/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

/* Portions of this design are protected by US Patent no. 8,321,823
 * (assignee: Carnegie Mellon University).
 */

//   Input/output stream: 2 complex words per cycle
//   Throughput: one transform every 2048 cycles
//   Latency: 5503 cycles

//   Resources required:
//     44 multipliers (32 x 32 bit)
//     70 adders (32 x 32 bit)
//     2 RAMs (32 words, 64 bits per word)
//     2 RAMs (256 words, 64 bits per word)
//     2 RAMs (2048 words, 64 bits per word)
//     2 RAMs (512 words, 64 bits per word)
//     6 RAMs (4096 words, 64 bits per word)
//     2 RAMs (16 words, 64 bits per word)
//     2 RAMs (128 words, 64 bits per word)
//     2 RAMs (1024 words, 64 bits per word)
//     2 RAMs (8 words, 64 bits per word)
//     2 RAMs (64 words, 64 bits per word)
//     2 ROMs (8 words, 32 bits per word)
//     2 ROMs (16 words, 32 bits per word)
//     2 ROMs (128 words, 32 bits per word)
//     2 ROMs (2048 words, 32 bits per word)
//     2 ROMs (64 words, 32 bits per word)
//     2 ROMs (1024 words, 32 bits per word)
//     2 ROMs (32 words, 32 bits per word)
//     2 ROMs (512 words, 32 bits per word)
//     2 ROMs (256 words, 32 bits per word)

// Generated on Wed May 18 09:38:08 EDT 2016

// Latency: 5503 clock cycles
// Throughput: 1 transform every 2048 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 2048 cycles.  This means that
// 2048 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 5503 cycles.  This means that
// the 'next_out' will be asserted 5503 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [31:0] in [3:0];
   wire [31:0] X0;
   wire [31:0] Y0;
   wire [31:0] X1;
   wire [31:0] Y1;
   wire [31:0] X2;
   wire [31:0] Y2;
   wire [31:0] X3;
   wire [31:0] Y3;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];

   initial clk = 0;

   always #10000 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 4096 complex data points enter the system over 2048 cycles
      for (j=0; j < 2047; j = j+1) begin
          // Input: 2 complex words per cycle
         for (k=0; k < 4; k = k+1) begin
            in[k] <= j*4 + k;
         end
         @(posedge clk);
      end
      j = 2047;
      for (k=0; k < 4; k = k+1) begin
         in[k] <= j*4 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 2046)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 2047; j = j+1) begin
         // Input 4 words per cycle
         for (k=0; k < 4; k = k+1) begin
            in[k] <= 8192 + j*4 + k;
          end
          @(posedge clk);
       end
       j = 2047;
       for (k=0; k < 4; k = k+1) begin
          in[k] <= 8192 + j*4 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 2047; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 2047; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $finish;
   end
endmodule

// Latency: 5503
// Gap: 2048
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [31:0] t0_0;
   wire [31:0] t0_1;
   wire [31:0] t0_2;
   wire [31:0] t0_3;
   wire next_0;
   wire [31:0] t1_0;
   wire [31:0] t1_1;
   wire [31:0] t1_2;
   wire [31:0] t1_3;
   wire next_1;
   wire [31:0] t2_0;
   wire [31:0] t2_1;
   wire [31:0] t2_2;
   wire [31:0] t2_3;
   wire next_2;
   wire [31:0] t3_0;
   wire [31:0] t3_1;
   wire [31:0] t3_2;
   wire [31:0] t3_3;
   wire next_3;
   wire [31:0] t4_0;
   wire [31:0] t4_1;
   wire [31:0] t4_2;
   wire [31:0] t4_3;
   wire next_4;
   wire [31:0] t5_0;
   wire [31:0] t5_1;
   wire [31:0] t5_2;
   wire [31:0] t5_3;
   wire next_5;
   wire [31:0] t6_0;
   wire [31:0] t6_1;
   wire [31:0] t6_2;
   wire [31:0] t6_3;
   wire next_6;
   wire [31:0] t7_0;
   wire [31:0] t7_1;
   wire [31:0] t7_2;
   wire [31:0] t7_3;
   wire next_7;
   wire [31:0] t8_0;
   wire [31:0] t8_1;
   wire [31:0] t8_2;
   wire [31:0] t8_3;
   wire next_8;
   wire [31:0] t9_0;
   wire [31:0] t9_1;
   wire [31:0] t9_2;
   wire [31:0] t9_3;
   wire next_9;
   wire [31:0] t10_0;
   wire [31:0] t10_1;
   wire [31:0] t10_2;
   wire [31:0] t10_3;
   wire next_10;
   wire [31:0] t11_0;
   wire [31:0] t11_1;
   wire [31:0] t11_2;
   wire [31:0] t11_3;
   wire next_11;
   wire [31:0] t12_0;
   wire [31:0] t12_1;
   wire [31:0] t12_2;
   wire [31:0] t12_3;
   wire next_12;
   wire [31:0] t13_0;
   wire [31:0] t13_1;
   wire [31:0] t13_2;
   wire [31:0] t13_3;
   wire next_13;
   wire [31:0] t14_0;
   wire [31:0] t14_1;
   wire [31:0] t14_2;
   wire [31:0] t14_3;
   wire next_14;
   wire [31:0] t15_0;
   wire [31:0] t15_1;
   wire [31:0] t15_2;
   wire [31:0] t15_3;
   wire next_15;
   wire [31:0] t16_0;
   wire [31:0] t16_1;
   wire [31:0] t16_2;
   wire [31:0] t16_3;
   wire next_16;
   wire [31:0] t17_0;
   wire [31:0] t17_1;
   wire [31:0] t17_2;
   wire [31:0] t17_3;
   wire next_17;
   wire [31:0] t18_0;
   wire [31:0] t18_1;
   wire [31:0] t18_2;
   wire [31:0] t18_3;
   wire next_18;
   wire [31:0] t19_0;
   wire [31:0] t19_1;
   wire [31:0] t19_2;
   wire [31:0] t19_3;
   wire next_19;
   wire [31:0] t20_0;
   wire [31:0] t20_1;
   wire [31:0] t20_2;
   wire [31:0] t20_3;
   wire next_20;
   wire [31:0] t21_0;
   wire [31:0] t21_1;
   wire [31:0] t21_2;
   wire [31:0] t21_3;
   wire next_21;
   wire [31:0] t22_0;
   wire [31:0] t22_1;
   wire [31:0] t22_2;
   wire [31:0] t22_3;
   wire next_22;
   wire [31:0] t23_0;
   wire [31:0] t23_1;
   wire [31:0] t23_2;
   wire [31:0] t23_3;
   wire next_23;
   wire [31:0] t24_0;
   wire [31:0] t24_1;
   wire [31:0] t24_2;
   wire [31:0] t24_3;
   wire next_24;
   wire [31:0] t25_0;
   wire [31:0] t25_1;
   wire [31:0] t25_2;
   wire [31:0] t25_3;
   wire next_25;
   wire [31:0] t26_0;
   wire [31:0] t26_1;
   wire [31:0] t26_2;
   wire [31:0] t26_3;
   wire next_26;
   wire [31:0] t27_0;
   wire [31:0] t27_1;
   wire [31:0] t27_2;
   wire [31:0] t27_3;
   wire next_27;
   wire [31:0] t28_0;
   wire [31:0] t28_1;
   wire [31:0] t28_2;
   wire [31:0] t28_3;
   wire next_28;
   wire [31:0] t29_0;
   wire [31:0] t29_1;
   wire [31:0] t29_2;
   wire [31:0] t29_3;
   wire next_29;
   wire [31:0] t30_0;
   wire [31:0] t30_1;
   wire [31:0] t30_2;
   wire [31:0] t30_3;
   wire next_30;
   wire [31:0] t31_0;
   wire [31:0] t31_1;
   wire [31:0] t31_2;
   wire [31:0] t31_3;
   wire next_31;
   wire [31:0] t32_0;
   wire [31:0] t32_1;
   wire [31:0] t32_2;
   wire [31:0] t32_3;
   wire next_32;
   wire [31:0] t33_0;
   wire [31:0] t33_1;
   wire [31:0] t33_2;
   wire [31:0] t33_3;
   wire next_33;
   wire [31:0] t34_0;
   wire [31:0] t34_1;
   wire [31:0] t34_2;
   wire [31:0] t34_3;
   wire next_34;
   wire [31:0] t35_0;
   wire [31:0] t35_1;
   wire [31:0] t35_2;
   wire [31:0] t35_3;
   wire next_35;
   wire [31:0] t36_0;
   wire [31:0] t36_1;
   wire [31:0] t36_2;
   wire [31:0] t36_3;
   wire next_36;
   assign t0_0 = X0;
   assign Y0 = t36_0;
   assign t0_1 = X1;
   assign Y1 = t36_1;
   assign t0_2 = X2;
   assign Y2 = t36_2;
   assign t0_3 = X3;
   assign Y3 = t36_3;
   assign next_0 = next;
   assign next_out = next_36;

// latency=1988, gap=2048
   rc87481 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3));


// latency=12, gap=2048
   codeBlock87483 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3));


// latency=4, gap=2048
   rc87564 stage2(.clk(clk), .reset(reset), .next(next_2), .next_out(next_3),
    .X0(t2_0), .Y0(t3_0),
    .X1(t2_1), .Y1(t3_1),
    .X2(t2_2), .Y2(t3_2),
    .X3(t2_3), .Y3(t3_3));


// latency=24, gap=2048
   DirSum_87745 stage3(.next(next_3), .clk(clk), .reset(reset), .next_out(next_4),
       .X0(t3_0), .Y0(t4_0),
       .X1(t3_1), .Y1(t4_1),
       .X2(t3_2), .Y2(t4_2),
       .X3(t3_3), .Y3(t4_3));


// latency=12, gap=2048
   codeBlock87748 stage4(.clk(clk), .reset(reset), .next_in(next_4), .next_out(next_5),
       .X0_in(t4_0), .Y0(t5_0),
       .X1_in(t4_1), .Y1(t5_1),
       .X2_in(t4_2), .Y2(t5_2),
       .X3_in(t4_3), .Y3(t5_3));


// latency=5, gap=2048
   rc87829 stage5(.clk(clk), .reset(reset), .next(next_5), .next_out(next_6),
    .X0(t5_0), .Y0(t6_0),
    .X1(t5_1), .Y1(t6_1),
    .X2(t5_2), .Y2(t6_2),
    .X3(t5_3), .Y3(t6_3));


// latency=24, gap=2048
   DirSum_88018 stage6(.next(next_6), .clk(clk), .reset(reset), .next_out(next_7),
       .X0(t6_0), .Y0(t7_0),
       .X1(t6_1), .Y1(t7_1),
       .X2(t6_2), .Y2(t7_2),
       .X3(t6_3), .Y3(t7_3));


// latency=12, gap=2048
   codeBlock88021 stage7(.clk(clk), .reset(reset), .next_in(next_7), .next_out(next_8),
       .X0_in(t7_0), .Y0(t8_0),
       .X1_in(t7_1), .Y1(t8_1),
       .X2_in(t7_2), .Y2(t8_2),
       .X3_in(t7_3), .Y3(t8_3));


// latency=7, gap=2048
   rc88102 stage8(.clk(clk), .reset(reset), .next(next_8), .next_out(next_9),
    .X0(t8_0), .Y0(t9_0),
    .X1(t8_1), .Y1(t9_1),
    .X2(t8_2), .Y2(t9_2),
    .X3(t8_3), .Y3(t9_3));


// latency=24, gap=2048
   DirSum_88307 stage9(.next(next_9), .clk(clk), .reset(reset), .next_out(next_10),
       .X0(t9_0), .Y0(t10_0),
       .X1(t9_1), .Y1(t10_1),
       .X2(t9_2), .Y2(t10_2),
       .X3(t9_3), .Y3(t10_3));


// latency=12, gap=2048
   codeBlock88310 stage10(.clk(clk), .reset(reset), .next_in(next_10), .next_out(next_11),
       .X0_in(t10_0), .Y0(t11_0),
       .X1_in(t10_1), .Y1(t11_1),
       .X2_in(t10_2), .Y2(t11_2),
       .X3_in(t10_3), .Y3(t11_3));


// latency=11, gap=2048
   rc88391 stage11(.clk(clk), .reset(reset), .next(next_11), .next_out(next_12),
    .X0(t11_0), .Y0(t12_0),
    .X1(t11_1), .Y1(t12_1),
    .X2(t11_2), .Y2(t12_2),
    .X3(t11_3), .Y3(t12_3));


// latency=24, gap=2048
   DirSum_88628 stage12(.next(next_12), .clk(clk), .reset(reset), .next_out(next_13),
       .X0(t12_0), .Y0(t13_0),
       .X1(t12_1), .Y1(t13_1),
       .X2(t12_2), .Y2(t13_2),
       .X3(t12_3), .Y3(t13_3));


// latency=12, gap=2048
   codeBlock88631 stage13(.clk(clk), .reset(reset), .next_in(next_13), .next_out(next_14),
       .X0_in(t13_0), .Y0(t14_0),
       .X1_in(t13_1), .Y1(t14_1),
       .X2_in(t13_2), .Y2(t14_2),
       .X3_in(t13_3), .Y3(t14_3));


// latency=19, gap=2048
   rc88712 stage14(.clk(clk), .reset(reset), .next(next_14), .next_out(next_15),
    .X0(t14_0), .Y0(t15_0),
    .X1(t14_1), .Y1(t15_1),
    .X2(t14_2), .Y2(t15_2),
    .X3(t14_3), .Y3(t15_3));


// latency=24, gap=2048
   DirSum_89013 stage15(.next(next_15), .clk(clk), .reset(reset), .next_out(next_16),
       .X0(t15_0), .Y0(t16_0),
       .X1(t15_1), .Y1(t16_1),
       .X2(t15_2), .Y2(t16_2),
       .X3(t15_3), .Y3(t16_3));


// latency=12, gap=2048
   codeBlock89016 stage16(.clk(clk), .reset(reset), .next_in(next_16), .next_out(next_17),
       .X0_in(t16_0), .Y0(t17_0),
       .X1_in(t16_1), .Y1(t17_1),
       .X2_in(t16_2), .Y2(t17_2),
       .X3_in(t16_3), .Y3(t17_3));


// latency=35, gap=2048
   rc89097 stage17(.clk(clk), .reset(reset), .next(next_17), .next_out(next_18),
    .X0(t17_0), .Y0(t18_0),
    .X1(t17_1), .Y1(t18_1),
    .X2(t17_2), .Y2(t18_2),
    .X3(t17_3), .Y3(t18_3));


// latency=24, gap=2048
   DirSum_89526 stage18(.next(next_18), .clk(clk), .reset(reset), .next_out(next_19),
       .X0(t18_0), .Y0(t19_0),
       .X1(t18_1), .Y1(t19_1),
       .X2(t18_2), .Y2(t19_2),
       .X3(t18_3), .Y3(t19_3));


// latency=12, gap=2048
   codeBlock89529 stage19(.clk(clk), .reset(reset), .next_in(next_19), .next_out(next_20),
       .X0_in(t19_0), .Y0(t20_0),
       .X1_in(t19_1), .Y1(t20_1),
       .X2_in(t19_2), .Y2(t20_2),
       .X3_in(t19_3), .Y3(t20_3));


// latency=67, gap=2048
   rc89610 stage20(.clk(clk), .reset(reset), .next(next_20), .next_out(next_21),
    .X0(t20_0), .Y0(t21_0),
    .X1(t20_1), .Y1(t21_1),
    .X2(t20_2), .Y2(t21_2),
    .X3(t20_3), .Y3(t21_3));


// latency=24, gap=2048
   DirSum_90295 stage21(.next(next_21), .clk(clk), .reset(reset), .next_out(next_22),
       .X0(t21_0), .Y0(t22_0),
       .X1(t21_1), .Y1(t22_1),
       .X2(t21_2), .Y2(t22_2),
       .X3(t21_3), .Y3(t22_3));


// latency=12, gap=2048
   codeBlock90298 stage22(.clk(clk), .reset(reset), .next_in(next_22), .next_out(next_23),
       .X0_in(t22_0), .Y0(t23_0),
       .X1_in(t22_1), .Y1(t23_1),
       .X2_in(t22_2), .Y2(t23_2),
       .X3_in(t22_3), .Y3(t23_3));


// latency=131, gap=2048
   rc90379 stage23(.clk(clk), .reset(reset), .next(next_23), .next_out(next_24),
    .X0(t23_0), .Y0(t24_0),
    .X1(t23_1), .Y1(t24_1),
    .X2(t23_2), .Y2(t24_2),
    .X3(t23_3), .Y3(t24_3));


// latency=24, gap=2048
   DirSum_91576 stage24(.next(next_24), .clk(clk), .reset(reset), .next_out(next_25),
       .X0(t24_0), .Y0(t25_0),
       .X1(t24_1), .Y1(t25_1),
       .X2(t24_2), .Y2(t25_2),
       .X3(t24_3), .Y3(t25_3));


// latency=12, gap=2048
   codeBlock91579 stage25(.clk(clk), .reset(reset), .next_in(next_25), .next_out(next_26),
       .X0_in(t25_0), .Y0(t26_0),
       .X1_in(t25_1), .Y1(t26_1),
       .X2_in(t25_2), .Y2(t26_2),
       .X3_in(t25_3), .Y3(t26_3));


// latency=259, gap=2048
   rc91660 stage26(.clk(clk), .reset(reset), .next(next_26), .next_out(next_27),
    .X0(t26_0), .Y0(t27_0),
    .X1(t26_1), .Y1(t27_1),
    .X2(t26_2), .Y2(t27_2),
    .X3(t26_3), .Y3(t27_3));


// latency=24, gap=2048
   DirSum_93881 stage27(.next(next_27), .clk(clk), .reset(reset), .next_out(next_28),
       .X0(t27_0), .Y0(t28_0),
       .X1(t27_1), .Y1(t28_1),
       .X2(t27_2), .Y2(t28_2),
       .X3(t27_3), .Y3(t28_3));


// latency=12, gap=2048
   codeBlock93884 stage28(.clk(clk), .reset(reset), .next_in(next_28), .next_out(next_29),
       .X0_in(t28_0), .Y0(t29_0),
       .X1_in(t28_1), .Y1(t29_1),
       .X2_in(t28_2), .Y2(t29_2),
       .X3_in(t28_3), .Y3(t29_3));


// latency=515, gap=2048
   rc93965 stage29(.clk(clk), .reset(reset), .next(next_29), .next_out(next_30),
    .X0(t29_0), .Y0(t30_0),
    .X1(t29_1), .Y1(t30_1),
    .X2(t29_2), .Y2(t30_2),
    .X3(t29_3), .Y3(t30_3));


// latency=24, gap=2048
   DirSum_98234 stage30(.next(next_30), .clk(clk), .reset(reset), .next_out(next_31),
       .X0(t30_0), .Y0(t31_0),
       .X1(t30_1), .Y1(t31_1),
       .X2(t30_2), .Y2(t31_2),
       .X3(t30_3), .Y3(t31_3));


// latency=12, gap=2048
   codeBlock98237 stage31(.clk(clk), .reset(reset), .next_in(next_31), .next_out(next_32),
       .X0_in(t31_0), .Y0(t32_0),
       .X1_in(t31_1), .Y1(t32_1),
       .X2_in(t31_2), .Y2(t32_2),
       .X3_in(t31_3), .Y3(t32_3));


// latency=1027, gap=2048
   rc98318 stage32(.clk(clk), .reset(reset), .next(next_32), .next_out(next_33),
    .X0(t32_0), .Y0(t33_0),
    .X1(t32_1), .Y1(t33_1),
    .X2(t32_2), .Y2(t33_2),
    .X3(t32_3), .Y3(t33_3));


// latency=24, gap=2048
   DirSum_106682 stage33(.next(next_33), .clk(clk), .reset(reset), .next_out(next_34),
       .X0(t33_0), .Y0(t34_0),
       .X1(t33_1), .Y1(t34_1),
       .X2(t33_2), .Y2(t34_2),
       .X3(t33_3), .Y3(t34_3));


// latency=12, gap=2048
   codeBlock106685 stage34(.clk(clk), .reset(reset), .next_in(next_34), .next_out(next_35),
       .X0_in(t34_0), .Y0(t35_0),
       .X1_in(t34_1), .Y1(t35_1),
       .X2_in(t34_2), .Y2(t35_2),
       .X3_in(t34_3), .Y3(t35_3));


// latency=1027, gap=2048
   rc106766 stage35(.clk(clk), .reset(reset), .next(next_35), .next_out(next_36),
    .X0(t35_0), .Y0(t36_0),
    .X1(t35_1), .Y1(t36_1),
    .X2(t35_2), .Y2(t36_2),
    .X3(t35_3), .Y3(t36_3));


endmodule

// Latency: 1988
// Gap: 2048
module rc87481(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm87479 instPerm110003(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 1988
// Gap: 2048
module perm87479(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 2048;
   parameter logDepth = 11;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[11] ^ addr0[0];
   assign inAddr0[0] = addr0[10];
   assign inAddr0[1] = addr0[9];
   assign inAddr0[2] = addr0[8];
   assign inAddr0[3] = addr0[7];
   assign inAddr0[4] = addr0[6];
   assign inAddr0[5] = addr0[5];
   assign inAddr0[6] = addr0[4];
   assign inAddr0[7] = addr0[3];
   assign inAddr0[8] = addr0[2];
   assign inAddr0[9] = addr0[1];
   assign inAddr0[10] = addr0[0];
   assign outBank0[0] = addr0b[11] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outAddr0[3] = addr0b[4];
   assign outAddr0[4] = addr0b[5];
   assign outAddr0[5] = addr0b[6];
   assign outAddr0[6] = addr0b[7];
   assign outAddr0[7] = addr0b[8];
   assign outAddr0[8] = addr0b[9];
   assign outAddr0[9] = addr0b[10];
   assign outAddr0[10] = addr0b[11];
   assign outBank_a0[0] = addr0c[11] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];
   assign outAddr_a0[3] = addr0c[4];
   assign outAddr_a0[4] = addr0c[5];
   assign outAddr_a0[5] = addr0c[6];
   assign outAddr_a0[6] = addr0c[7];
   assign outAddr_a0[7] = addr0c[8];
   assign outAddr_a0[8] = addr0c[9];
   assign outAddr_a0[9] = addr0c[10];
   assign outAddr_a0[10] = addr0c[11];

   assign inBank1[0] = addr1[11] ^ addr1[0];
   assign inAddr1[0] = addr1[10];
   assign inAddr1[1] = addr1[9];
   assign inAddr1[2] = addr1[8];
   assign inAddr1[3] = addr1[7];
   assign inAddr1[4] = addr1[6];
   assign inAddr1[5] = addr1[5];
   assign inAddr1[6] = addr1[4];
   assign inAddr1[7] = addr1[3];
   assign inAddr1[8] = addr1[2];
   assign inAddr1[9] = addr1[1];
   assign inAddr1[10] = addr1[0];
   assign outBank1[0] = addr1b[11] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outAddr1[3] = addr1b[4];
   assign outAddr1[4] = addr1b[5];
   assign outAddr1[5] = addr1b[6];
   assign outAddr1[6] = addr1b[7];
   assign outAddr1[7] = addr1b[8];
   assign outAddr1[8] = addr1b[9];
   assign outAddr1[9] = addr1b[10];
   assign outAddr1[10] = addr1b[11];
   assign outBank_a1[0] = addr1c[11] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];
   assign outAddr_a1[3] = addr1c[4];
   assign outAddr_a1[4] = addr1c[5];
   assign outAddr_a1[5] = addr1c[6];
   assign outAddr_a1[6] = addr1c[7];
   assign outAddr_a1[7] = addr1c[8];
   assign outAddr_a1[8] = addr1c[9];
   assign outAddr_a1[9] = addr1c[10];
   assign outAddr_a1[10] = addr1c[11];

   nextReg #(1986, 11) nextReg_110008(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110011(.X(next0), .Y(next_out), .clk(clk));


   memArray4096_87479 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 1985)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 1987)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 1985) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 2047) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 1985)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[10];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[10];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[10];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray4096_87479(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 2048;
   parameter logDepth = 11;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   nextReg #(2048, 11) nextReg_110016(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule


module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module switch(ctrl, x0, x1, y0, y1);
    parameter width = 16;
    input [width-1:0] x0, x1;
    output [width-1:0] y0, y1;
    input ctrl;
    assign y0 = (ctrl == 0) ? x0 : x1;
    assign y1 = (ctrl == 0) ? x1 : x0;
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock87483(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(11, 1) shiftFIFO_110023(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a670;
   wire signed [31:0] a671;
   wire signed [31:0] a672;
   wire signed [31:0] a673;
   wire  [31:0] t285;
   wire  [31:0] t286;
   wire  [31:0] t287;
   wire  [31:0] t288;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a670 = X0;
   assign a671 = X2;
   assign a672 = X1;
   assign a673 = X3;
   assign Y0 = t285;
   assign Y1 = t286;
   assign Y2 = t287;
   assign Y3 = t288;

    addfp32 add87495(.a(a670), .b(a671), .clk(clk), .out(t285), .enable(1'b1), .rst(reset));
    addfp32 add87510(.a(a672), .b(a673), .clk(clk), .out(t286), .enable(1'b1), .rst(reset));
    subfp32 sub87525(.a(a670), .b(a671), .clk(clk), .out(t287), .enable(1'b1), .rst(reset));
    subfp32 sub87540(.a(a672), .b(a673), .clk(clk), .out(t288), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 4
// Gap: 2
module rc87564(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm87562 instPerm110024(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 4
// Gap: 2
module perm87562(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[1] ^ addr0[0];
   assign inAddr0[0] = addr0[0];
   assign outBank0[0] = addr0b[1] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outBank_a0[0] = addr0c[1] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];

   assign inBank1[0] = addr1[1] ^ addr1[0];
   assign inAddr1[0] = addr1[0];
   assign outBank1[0] = addr1b[1] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outBank_a1[0] = addr1c[1] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];

   shiftRegFIFO #(2, 1) shiftFIFO_110027(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110030(.X(next0), .Y(next_out), .clk(clk));


   memArray4_87562 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

    reg resetOutCountRd2_2;
    reg resetOutCountRd2_3;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_2 <= 0;
            resetOutCountRd2_3 <= 0;
        end
        else begin
            resetOutCountRd2_2 <= (inCount == 1) ? 1'b1 : 1'b0;
            resetOutCountRd2_3 <= resetOutCountRd2_2;
            if (resetOutCountRd2_3 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 1)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 1) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 1) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 1)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[0];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[0];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[0];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray4_87562(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 2;
   parameter logDepth = 1;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   shiftRegFIFO #(2, 1) shiftFIFO_110033(.X(next), .Y(next0), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 24
// Gap: 2
module DirSum_87745(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   input clk, reset, next;

   reg [0:0] i11;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   always @(posedge clk) begin
      if (reset == 1) begin
         i11 <= 0;
      end
      else begin
         if (next == 1)
            i11 <= 0;
         else if (i11 == 1)
            i11 <= 0;
         else
            i11 <= i11 + 1;
      end
   end

   codeBlock87567 codeBlockIsnt110034(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i11_in(i11),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3));

endmodule

module D42_87735(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h0;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D44_87743(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbf800000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 24
// Gap: 1
module codeBlock87567(clk, reset, next_in, next_out,
   i11_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [0:0] i11_in;
   reg [0:0] i11;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(23, 1) shiftFIFO_110037(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a654;
   wire signed [31:0] a643;
   wire signed [31:0] a657;
   wire signed [31:0] a647;
   wire signed [31:0] a658;
   wire signed [31:0] a659;
   reg signed [31:0] tm286;
   reg signed [31:0] tm290;
   reg signed [31:0] tm302;
   reg signed [31:0] tm325;
   reg signed [31:0] tm287;
   reg signed [31:0] tm291;
   reg signed [31:0] tm303;
   reg signed [31:0] tm326;
   wire signed [31:0] tm2;
   wire signed [31:0] a648;
   wire signed [31:0] tm3;
   wire signed [31:0] a650;
   reg signed [31:0] tm288;
   reg signed [31:0] tm292;
   reg signed [31:0] tm304;
   reg signed [31:0] tm327;
   reg signed [31:0] tm48;
   reg signed [31:0] tm49;
   reg signed [31:0] tm289;
   reg signed [31:0] tm293;
   reg signed [31:0] tm305;
   reg signed [31:0] tm328;
   reg signed [31:0] tm306;
   reg signed [31:0] tm329;
   reg signed [31:0] tm307;
   reg signed [31:0] tm330;
   reg signed [31:0] tm308;
   reg signed [31:0] tm331;
   reg signed [31:0] tm309;
   reg signed [31:0] tm332;
   reg signed [31:0] tm310;
   reg signed [31:0] tm333;
   reg signed [31:0] tm311;
   reg signed [31:0] tm334;
   reg signed [31:0] tm312;
   reg signed [31:0] tm335;
   wire  [31:0] a649;
   wire  [31:0] a651;
   wire  [31:0] a652;
   wire  [31:0] a653;
   reg signed [31:0] tm313;
   reg signed [31:0] tm336;
   reg signed [31:0] tm314;
   reg signed [31:0] tm337;
   reg signed [31:0] tm315;
   reg signed [31:0] tm338;
   reg signed [31:0] tm316;
   reg signed [31:0] tm339;
   reg signed [31:0] tm317;
   reg signed [31:0] tm340;
   reg signed [31:0] tm318;
   reg signed [31:0] tm341;
   reg signed [31:0] tm319;
   reg signed [31:0] tm342;
   reg signed [31:0] tm320;
   reg signed [31:0] tm343;
   reg signed [31:0] tm321;
   reg signed [31:0] tm344;
   reg signed [31:0] tm322;
   reg signed [31:0] tm345;
   reg signed [31:0] tm323;
   reg signed [31:0] tm346;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire  [31:0] Y2;
   wire  [31:0] Y3;
   reg signed [31:0] tm324;
   reg signed [31:0] tm347;


   assign a654 = X0;
   assign a643 = a654;
   assign a657 = X1;
   assign a647 = a657;
   assign a658 = X2;
   assign a659 = X3;
   assign a648 = tm2;
   assign a650 = tm3;
   assign Y0 = tm324;
   assign Y1 = tm347;

   D42_87735 instD42inst0_87735(.addr(i11[0:0]), .out(tm2), .clk(clk));

   D44_87743 instD44inst0_87743(.addr(i11[0:0]), .out(tm3), .clk(clk));

    multfp32fp32 m87666(.a(tm48), .b(tm289), .clk(clk), .out(a649), .enable(1'b1), .rst(reset));
    multfp32fp32 m87688(.a(tm49), .b(tm293), .clk(clk), .out(a651), .enable(1'b1), .rst(reset));
    multfp32fp32 m87706(.a(tm49), .b(tm289), .clk(clk), .out(a652), .enable(1'b1), .rst(reset));
    multfp32fp32 m87717(.a(tm48), .b(tm293), .clk(clk), .out(a653), .enable(1'b1), .rst(reset));
    subfp32 sub87695(.a(a649), .b(a651), .clk(clk), .out(Y2), .enable(1'b1), .rst(reset));
    addfp32 add87724(.a(a652), .b(a653), .clk(clk), .out(Y3), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
         tm48 <= 0;
         tm289 <= 0;
         tm49 <= 0;
         tm293 <= 0;
         tm49 <= 0;
         tm289 <= 0;
         tm48 <= 0;
         tm293 <= 0;
      end
      else begin
         i11 <= i11_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
         tm286 <= a658;
         tm290 <= a659;
         tm302 <= a643;
         tm325 <= a647;
         tm287 <= tm286;
         tm291 <= tm290;
         tm303 <= tm302;
         tm326 <= tm325;
         tm288 <= tm287;
         tm292 <= tm291;
         tm304 <= tm303;
         tm327 <= tm326;
         tm48 <= a648;
         tm49 <= a650;
         tm289 <= tm288;
         tm293 <= tm292;
         tm305 <= tm304;
         tm328 <= tm327;
         tm306 <= tm305;
         tm329 <= tm328;
         tm307 <= tm306;
         tm330 <= tm329;
         tm308 <= tm307;
         tm331 <= tm330;
         tm309 <= tm308;
         tm332 <= tm331;
         tm310 <= tm309;
         tm333 <= tm332;
         tm311 <= tm310;
         tm334 <= tm333;
         tm312 <= tm311;
         tm335 <= tm334;
         tm313 <= tm312;
         tm336 <= tm335;
         tm314 <= tm313;
         tm337 <= tm336;
         tm315 <= tm314;
         tm338 <= tm337;
         tm316 <= tm315;
         tm339 <= tm338;
         tm317 <= tm316;
         tm340 <= tm339;
         tm318 <= tm317;
         tm341 <= tm340;
         tm319 <= tm318;
         tm342 <= tm341;
         tm320 <= tm319;
         tm343 <= tm342;
         tm321 <= tm320;
         tm344 <= tm343;
         tm322 <= tm321;
         tm345 <= tm344;
         tm323 <= tm322;
         tm346 <= tm345;
         tm324 <= tm323;
         tm347 <= tm346;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock87748(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(11, 1) shiftFIFO_110040(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a610;
   wire signed [31:0] a611;
   wire signed [31:0] a612;
   wire signed [31:0] a613;
   wire  [31:0] t261;
   wire  [31:0] t262;
   wire  [31:0] t263;
   wire  [31:0] t264;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a610 = X0;
   assign a611 = X2;
   assign a612 = X1;
   assign a613 = X3;
   assign Y0 = t261;
   assign Y1 = t262;
   assign Y2 = t263;
   assign Y3 = t264;

    addfp32 add87760(.a(a610), .b(a611), .clk(clk), .out(t261), .enable(1'b1), .rst(reset));
    addfp32 add87775(.a(a612), .b(a613), .clk(clk), .out(t262), .enable(1'b1), .rst(reset));
    subfp32 sub87790(.a(a610), .b(a611), .clk(clk), .out(t263), .enable(1'b1), .rst(reset));
    subfp32 sub87805(.a(a612), .b(a613), .clk(clk), .out(t264), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 5
// Gap: 4
module rc87829(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm87827 instPerm110041(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 5
// Gap: 4
module perm87827(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 4;
   parameter logDepth = 2;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[2] ^ addr0[0];
   assign inAddr0[0] = addr0[1];
   assign inAddr0[1] = addr0[0];
   assign outBank0[0] = addr0b[2] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outBank_a0[0] = addr0c[2] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];

   assign inBank1[0] = addr1[2] ^ addr1[0];
   assign inAddr1[0] = addr1[1];
   assign inAddr1[1] = addr1[0];
   assign outBank1[0] = addr1b[2] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outBank_a1[0] = addr1c[2] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];

   shiftRegFIFO #(3, 1) shiftFIFO_110044(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110047(.X(next0), .Y(next_out), .clk(clk));


   memArray8_87827 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

    reg resetOutCountRd2_4;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_4 <= 0;
        end
        else begin
            resetOutCountRd2_4 <= (inCount == 3) ? 1'b1 : 1'b0;
            if (resetOutCountRd2_4 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 2)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 2) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 3) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 2)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[1];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[1];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[1];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray8_87827(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 4;
   parameter logDepth = 2;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   shiftRegFIFO #(4, 1) shiftFIFO_110050(.X(next), .Y(next0), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 24
// Gap: 4
module DirSum_88018(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   input clk, reset, next;

   reg [1:0] i10;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   always @(posedge clk) begin
      if (reset == 1) begin
         i10 <= 0;
      end
      else begin
         if (next == 1)
            i10 <= 0;
         else if (i10 == 3)
            i10 <= 0;
         else
            i10 <= i10 + 1;
      end
   end

   codeBlock87832 codeBlockIsnt110051(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i10_in(i10),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3));

endmodule

module D38_87998(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h3f3504f3;
      2: out3 <= 32'h0;
      3: out3 <= 32'hbf3504f3;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D40_88016(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbf3504f3;
      2: out3 <= 32'hbf800000;
      3: out3 <= 32'hbf3504f3;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 24
// Gap: 1
module codeBlock87832(clk, reset, next_in, next_out,
   i10_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [1:0] i10_in;
   reg [1:0] i10;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(23, 1) shiftFIFO_110054(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a594;
   wire signed [31:0] a583;
   wire signed [31:0] a597;
   wire signed [31:0] a587;
   wire signed [31:0] a598;
   wire signed [31:0] a599;
   reg signed [31:0] tm348;
   reg signed [31:0] tm352;
   reg signed [31:0] tm364;
   reg signed [31:0] tm387;
   reg signed [31:0] tm349;
   reg signed [31:0] tm353;
   reg signed [31:0] tm365;
   reg signed [31:0] tm388;
   wire signed [31:0] tm6;
   wire signed [31:0] a588;
   wire signed [31:0] tm7;
   wire signed [31:0] a590;
   reg signed [31:0] tm350;
   reg signed [31:0] tm354;
   reg signed [31:0] tm366;
   reg signed [31:0] tm389;
   reg signed [31:0] tm56;
   reg signed [31:0] tm57;
   reg signed [31:0] tm351;
   reg signed [31:0] tm355;
   reg signed [31:0] tm367;
   reg signed [31:0] tm390;
   reg signed [31:0] tm368;
   reg signed [31:0] tm391;
   reg signed [31:0] tm369;
   reg signed [31:0] tm392;
   reg signed [31:0] tm370;
   reg signed [31:0] tm393;
   reg signed [31:0] tm371;
   reg signed [31:0] tm394;
   reg signed [31:0] tm372;
   reg signed [31:0] tm395;
   reg signed [31:0] tm373;
   reg signed [31:0] tm396;
   reg signed [31:0] tm374;
   reg signed [31:0] tm397;
   wire  [31:0] a589;
   wire  [31:0] a591;
   wire  [31:0] a592;
   wire  [31:0] a593;
   reg signed [31:0] tm375;
   reg signed [31:0] tm398;
   reg signed [31:0] tm376;
   reg signed [31:0] tm399;
   reg signed [31:0] tm377;
   reg signed [31:0] tm400;
   reg signed [31:0] tm378;
   reg signed [31:0] tm401;
   reg signed [31:0] tm379;
   reg signed [31:0] tm402;
   reg signed [31:0] tm380;
   reg signed [31:0] tm403;
   reg signed [31:0] tm381;
   reg signed [31:0] tm404;
   reg signed [31:0] tm382;
   reg signed [31:0] tm405;
   reg signed [31:0] tm383;
   reg signed [31:0] tm406;
   reg signed [31:0] tm384;
   reg signed [31:0] tm407;
   reg signed [31:0] tm385;
   reg signed [31:0] tm408;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire  [31:0] Y2;
   wire  [31:0] Y3;
   reg signed [31:0] tm386;
   reg signed [31:0] tm409;


   assign a594 = X0;
   assign a583 = a594;
   assign a597 = X1;
   assign a587 = a597;
   assign a598 = X2;
   assign a599 = X3;
   assign a588 = tm6;
   assign a590 = tm7;
   assign Y0 = tm386;
   assign Y1 = tm409;

   D38_87998 instD38inst0_87998(.addr(i10[1:0]), .out(tm6), .clk(clk));

   D40_88016 instD40inst0_88016(.addr(i10[1:0]), .out(tm7), .clk(clk));

    multfp32fp32 m87931(.a(tm56), .b(tm351), .clk(clk), .out(a589), .enable(1'b1), .rst(reset));
    multfp32fp32 m87953(.a(tm57), .b(tm355), .clk(clk), .out(a591), .enable(1'b1), .rst(reset));
    multfp32fp32 m87971(.a(tm57), .b(tm351), .clk(clk), .out(a592), .enable(1'b1), .rst(reset));
    multfp32fp32 m87982(.a(tm56), .b(tm355), .clk(clk), .out(a593), .enable(1'b1), .rst(reset));
    subfp32 sub87960(.a(a589), .b(a591), .clk(clk), .out(Y2), .enable(1'b1), .rst(reset));
    addfp32 add87989(.a(a592), .b(a593), .clk(clk), .out(Y3), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
         tm56 <= 0;
         tm351 <= 0;
         tm57 <= 0;
         tm355 <= 0;
         tm57 <= 0;
         tm351 <= 0;
         tm56 <= 0;
         tm355 <= 0;
      end
      else begin
         i10 <= i10_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
         tm348 <= a598;
         tm352 <= a599;
         tm364 <= a583;
         tm387 <= a587;
         tm349 <= tm348;
         tm353 <= tm352;
         tm365 <= tm364;
         tm388 <= tm387;
         tm350 <= tm349;
         tm354 <= tm353;
         tm366 <= tm365;
         tm389 <= tm388;
         tm56 <= a588;
         tm57 <= a590;
         tm351 <= tm350;
         tm355 <= tm354;
         tm367 <= tm366;
         tm390 <= tm389;
         tm368 <= tm367;
         tm391 <= tm390;
         tm369 <= tm368;
         tm392 <= tm391;
         tm370 <= tm369;
         tm393 <= tm392;
         tm371 <= tm370;
         tm394 <= tm393;
         tm372 <= tm371;
         tm395 <= tm394;
         tm373 <= tm372;
         tm396 <= tm395;
         tm374 <= tm373;
         tm397 <= tm396;
         tm375 <= tm374;
         tm398 <= tm397;
         tm376 <= tm375;
         tm399 <= tm398;
         tm377 <= tm376;
         tm400 <= tm399;
         tm378 <= tm377;
         tm401 <= tm400;
         tm379 <= tm378;
         tm402 <= tm401;
         tm380 <= tm379;
         tm403 <= tm402;
         tm381 <= tm380;
         tm404 <= tm403;
         tm382 <= tm381;
         tm405 <= tm404;
         tm383 <= tm382;
         tm406 <= tm405;
         tm384 <= tm383;
         tm407 <= tm406;
         tm385 <= tm384;
         tm408 <= tm407;
         tm386 <= tm385;
         tm409 <= tm408;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock88021(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(11, 1) shiftFIFO_110057(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a550;
   wire signed [31:0] a551;
   wire signed [31:0] a552;
   wire signed [31:0] a553;
   wire  [31:0] t237;
   wire  [31:0] t238;
   wire  [31:0] t239;
   wire  [31:0] t240;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a550 = X0;
   assign a551 = X2;
   assign a552 = X1;
   assign a553 = X3;
   assign Y0 = t237;
   assign Y1 = t238;
   assign Y2 = t239;
   assign Y3 = t240;

    addfp32 add88033(.a(a550), .b(a551), .clk(clk), .out(t237), .enable(1'b1), .rst(reset));
    addfp32 add88048(.a(a552), .b(a553), .clk(clk), .out(t238), .enable(1'b1), .rst(reset));
    subfp32 sub88063(.a(a550), .b(a551), .clk(clk), .out(t239), .enable(1'b1), .rst(reset));
    subfp32 sub88078(.a(a552), .b(a553), .clk(clk), .out(t240), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 7
// Gap: 8
module rc88102(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm88100 instPerm110058(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 7
// Gap: 8
module perm88100(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 8;
   parameter logDepth = 3;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[3] ^ addr0[0];
   assign inAddr0[0] = addr0[1];
   assign inAddr0[1] = addr0[2];
   assign inAddr0[2] = addr0[0];
   assign outBank0[0] = addr0b[3] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outBank_a0[0] = addr0c[3] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];

   assign inBank1[0] = addr1[3] ^ addr1[0];
   assign inAddr1[0] = addr1[1];
   assign inAddr1[1] = addr1[2];
   assign inAddr1[2] = addr1[0];
   assign outBank1[0] = addr1b[3] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outBank_a1[0] = addr1c[3] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];

   shiftRegFIFO #(5, 1) shiftFIFO_110061(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110064(.X(next0), .Y(next_out), .clk(clk));


   memArray16_88100 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 4)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 6)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 4) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 7) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 4)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[2];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[2];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[2];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray16_88100(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 8;
   parameter logDepth = 3;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   shiftRegFIFO #(8, 1) shiftFIFO_110067(.X(next), .Y(next0), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 24
// Gap: 8
module DirSum_88307(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   input clk, reset, next;

   reg [2:0] i9;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   always @(posedge clk) begin
      if (reset == 1) begin
         i9 <= 0;
      end
      else begin
         if (next == 1)
            i9 <= 0;
         else if (i9 == 7)
            i9 <= 0;
         else
            i9 <= i9 + 1;
      end
   end

   codeBlock88105 codeBlockIsnt110068(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i9_in(i9),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3));

endmodule

module D36_88275(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbec3ef15;
      2: out3 <= 32'hbf3504f3;
      3: out3 <= 32'hbf6c835e;
      4: out3 <= 32'hbf800000;
      5: out3 <= 32'hbf6c835e;
      6: out3 <= 32'hbf3504f3;
      7: out3 <= 32'hbec3ef15;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D34_88295(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h3f6c835e;
      2: out3 <= 32'h3f3504f3;
      3: out3 <= 32'h3ec3ef15;
      4: out3 <= 32'h0;
      5: out3 <= 32'hbec3ef15;
      6: out3 <= 32'hbf3504f3;
      7: out3 <= 32'hbf6c835e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 24
// Gap: 1
module codeBlock88105(clk, reset, next_in, next_out,
   i9_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [2:0] i9_in;
   reg [2:0] i9;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(23, 1) shiftFIFO_110071(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a534;
   wire signed [31:0] a523;
   wire signed [31:0] a537;
   wire signed [31:0] a527;
   wire signed [31:0] a538;
   wire signed [31:0] a539;
   reg signed [31:0] tm410;
   reg signed [31:0] tm414;
   reg signed [31:0] tm426;
   reg signed [31:0] tm449;
   reg signed [31:0] tm411;
   reg signed [31:0] tm415;
   reg signed [31:0] tm427;
   reg signed [31:0] tm450;
   wire signed [31:0] tm10;
   wire signed [31:0] a528;
   wire signed [31:0] tm11;
   wire signed [31:0] a530;
   reg signed [31:0] tm412;
   reg signed [31:0] tm416;
   reg signed [31:0] tm428;
   reg signed [31:0] tm451;
   reg signed [31:0] tm64;
   reg signed [31:0] tm65;
   reg signed [31:0] tm413;
   reg signed [31:0] tm417;
   reg signed [31:0] tm429;
   reg signed [31:0] tm452;
   reg signed [31:0] tm430;
   reg signed [31:0] tm453;
   reg signed [31:0] tm431;
   reg signed [31:0] tm454;
   reg signed [31:0] tm432;
   reg signed [31:0] tm455;
   reg signed [31:0] tm433;
   reg signed [31:0] tm456;
   reg signed [31:0] tm434;
   reg signed [31:0] tm457;
   reg signed [31:0] tm435;
   reg signed [31:0] tm458;
   reg signed [31:0] tm436;
   reg signed [31:0] tm459;
   wire  [31:0] a529;
   wire  [31:0] a531;
   wire  [31:0] a532;
   wire  [31:0] a533;
   reg signed [31:0] tm437;
   reg signed [31:0] tm460;
   reg signed [31:0] tm438;
   reg signed [31:0] tm461;
   reg signed [31:0] tm439;
   reg signed [31:0] tm462;
   reg signed [31:0] tm440;
   reg signed [31:0] tm463;
   reg signed [31:0] tm441;
   reg signed [31:0] tm464;
   reg signed [31:0] tm442;
   reg signed [31:0] tm465;
   reg signed [31:0] tm443;
   reg signed [31:0] tm466;
   reg signed [31:0] tm444;
   reg signed [31:0] tm467;
   reg signed [31:0] tm445;
   reg signed [31:0] tm468;
   reg signed [31:0] tm446;
   reg signed [31:0] tm469;
   reg signed [31:0] tm447;
   reg signed [31:0] tm470;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire  [31:0] Y2;
   wire  [31:0] Y3;
   reg signed [31:0] tm448;
   reg signed [31:0] tm471;


   assign a534 = X0;
   assign a523 = a534;
   assign a537 = X1;
   assign a527 = a537;
   assign a538 = X2;
   assign a539 = X3;
   assign a528 = tm10;
   assign a530 = tm11;
   assign Y0 = tm448;
   assign Y1 = tm471;

   D36_88275 instD36inst0_88275(.addr(i9[2:0]), .out(tm11), .clk(clk));

   D34_88295 instD34inst0_88295(.addr(i9[2:0]), .out(tm10), .clk(clk));

    multfp32fp32 m88204(.a(tm64), .b(tm413), .clk(clk), .out(a529), .enable(1'b1), .rst(reset));
    multfp32fp32 m88226(.a(tm65), .b(tm417), .clk(clk), .out(a531), .enable(1'b1), .rst(reset));
    multfp32fp32 m88244(.a(tm65), .b(tm413), .clk(clk), .out(a532), .enable(1'b1), .rst(reset));
    multfp32fp32 m88255(.a(tm64), .b(tm417), .clk(clk), .out(a533), .enable(1'b1), .rst(reset));
    subfp32 sub88233(.a(a529), .b(a531), .clk(clk), .out(Y2), .enable(1'b1), .rst(reset));
    addfp32 add88262(.a(a532), .b(a533), .clk(clk), .out(Y3), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
         tm64 <= 0;
         tm413 <= 0;
         tm65 <= 0;
         tm417 <= 0;
         tm65 <= 0;
         tm413 <= 0;
         tm64 <= 0;
         tm417 <= 0;
      end
      else begin
         i9 <= i9_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
         tm410 <= a538;
         tm414 <= a539;
         tm426 <= a523;
         tm449 <= a527;
         tm411 <= tm410;
         tm415 <= tm414;
         tm427 <= tm426;
         tm450 <= tm449;
         tm412 <= tm411;
         tm416 <= tm415;
         tm428 <= tm427;
         tm451 <= tm450;
         tm64 <= a528;
         tm65 <= a530;
         tm413 <= tm412;
         tm417 <= tm416;
         tm429 <= tm428;
         tm452 <= tm451;
         tm430 <= tm429;
         tm453 <= tm452;
         tm431 <= tm430;
         tm454 <= tm453;
         tm432 <= tm431;
         tm455 <= tm454;
         tm433 <= tm432;
         tm456 <= tm455;
         tm434 <= tm433;
         tm457 <= tm456;
         tm435 <= tm434;
         tm458 <= tm457;
         tm436 <= tm435;
         tm459 <= tm458;
         tm437 <= tm436;
         tm460 <= tm459;
         tm438 <= tm437;
         tm461 <= tm460;
         tm439 <= tm438;
         tm462 <= tm461;
         tm440 <= tm439;
         tm463 <= tm462;
         tm441 <= tm440;
         tm464 <= tm463;
         tm442 <= tm441;
         tm465 <= tm464;
         tm443 <= tm442;
         tm466 <= tm465;
         tm444 <= tm443;
         tm467 <= tm466;
         tm445 <= tm444;
         tm468 <= tm467;
         tm446 <= tm445;
         tm469 <= tm468;
         tm447 <= tm446;
         tm470 <= tm469;
         tm448 <= tm447;
         tm471 <= tm470;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock88310(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(11, 1) shiftFIFO_110074(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a490;
   wire signed [31:0] a491;
   wire signed [31:0] a492;
   wire signed [31:0] a493;
   wire  [31:0] t213;
   wire  [31:0] t214;
   wire  [31:0] t215;
   wire  [31:0] t216;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a490 = X0;
   assign a491 = X2;
   assign a492 = X1;
   assign a493 = X3;
   assign Y0 = t213;
   assign Y1 = t214;
   assign Y2 = t215;
   assign Y3 = t216;

    addfp32 add88322(.a(a490), .b(a491), .clk(clk), .out(t213), .enable(1'b1), .rst(reset));
    addfp32 add88337(.a(a492), .b(a493), .clk(clk), .out(t214), .enable(1'b1), .rst(reset));
    subfp32 sub88352(.a(a490), .b(a491), .clk(clk), .out(t215), .enable(1'b1), .rst(reset));
    subfp32 sub88367(.a(a492), .b(a493), .clk(clk), .out(t216), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 11
// Gap: 16
module rc88391(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm88389 instPerm110075(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 11
// Gap: 16
module perm88389(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 16;
   parameter logDepth = 4;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[4] ^ addr0[0];
   assign inAddr0[0] = addr0[1];
   assign inAddr0[1] = addr0[2];
   assign inAddr0[2] = addr0[3];
   assign inAddr0[3] = addr0[0];
   assign outBank0[0] = addr0b[4] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outAddr0[3] = addr0b[4];
   assign outBank_a0[0] = addr0c[4] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];
   assign outAddr_a0[3] = addr0c[4];

   assign inBank1[0] = addr1[4] ^ addr1[0];
   assign inAddr1[0] = addr1[1];
   assign inAddr1[1] = addr1[2];
   assign inAddr1[2] = addr1[3];
   assign inAddr1[3] = addr1[0];
   assign outBank1[0] = addr1b[4] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outAddr1[3] = addr1b[4];
   assign outBank_a1[0] = addr1c[4] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];
   assign outAddr_a1[3] = addr1c[4];

   nextReg #(9, 4) nextReg_110080(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110083(.X(next0), .Y(next_out), .clk(clk));


   memArray32_88389 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 8)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 10)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 8) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 15) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 8)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[3];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[3];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[3];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray32_88389(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 16;
   parameter logDepth = 4;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   nextReg #(16, 4) nextReg_110088(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 24
// Gap: 16
module DirSum_88628(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   input clk, reset, next;

   reg [3:0] i8;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   always @(posedge clk) begin
      if (reset == 1) begin
         i8 <= 0;
      end
      else begin
         if (next == 1)
            i8 <= 0;
         else if (i8 == 15)
            i8 <= 0;
         else
            i8 <= i8 + 1;
      end
   end

   codeBlock88394 codeBlockIsnt110093(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i8_in(i8),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3));

endmodule

module D32_88572(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbe47c5c2;
      2: out3 <= 32'hbec3ef15;
      3: out3 <= 32'hbf0e39da;
      4: out3 <= 32'hbf3504f3;
      5: out3 <= 32'hbf54db31;
      6: out3 <= 32'hbf6c835e;
      7: out3 <= 32'hbf7b14be;
      8: out3 <= 32'hbf800000;
      9: out3 <= 32'hbf7b14be;
      10: out3 <= 32'hbf6c835e;
      11: out3 <= 32'hbf54db31;
      12: out3 <= 32'hbf3504f3;
      13: out3 <= 32'hbf0e39da;
      14: out3 <= 32'hbec3ef15;
      15: out3 <= 32'hbe47c5c2;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D30_88608(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h3f7b14be;
      2: out3 <= 32'h3f6c835e;
      3: out3 <= 32'h3f54db31;
      4: out3 <= 32'h3f3504f3;
      5: out3 <= 32'h3f0e39da;
      6: out3 <= 32'h3ec3ef15;
      7: out3 <= 32'h3e47c5c2;
      8: out3 <= 32'h0;
      9: out3 <= 32'hbe47c5c2;
      10: out3 <= 32'hbec3ef15;
      11: out3 <= 32'hbf0e39da;
      12: out3 <= 32'hbf3504f3;
      13: out3 <= 32'hbf54db31;
      14: out3 <= 32'hbf6c835e;
      15: out3 <= 32'hbf7b14be;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 24
// Gap: 1
module codeBlock88394(clk, reset, next_in, next_out,
   i8_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [3:0] i8_in;
   reg [3:0] i8;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(23, 1) shiftFIFO_110096(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a474;
   wire signed [31:0] a463;
   wire signed [31:0] a477;
   wire signed [31:0] a467;
   wire signed [31:0] a478;
   wire signed [31:0] a479;
   reg signed [31:0] tm472;
   reg signed [31:0] tm476;
   reg signed [31:0] tm488;
   reg signed [31:0] tm511;
   reg signed [31:0] tm473;
   reg signed [31:0] tm477;
   reg signed [31:0] tm489;
   reg signed [31:0] tm512;
   wire signed [31:0] tm14;
   wire signed [31:0] a468;
   wire signed [31:0] tm15;
   wire signed [31:0] a470;
   reg signed [31:0] tm474;
   reg signed [31:0] tm478;
   reg signed [31:0] tm490;
   reg signed [31:0] tm513;
   reg signed [31:0] tm72;
   reg signed [31:0] tm73;
   reg signed [31:0] tm475;
   reg signed [31:0] tm479;
   reg signed [31:0] tm491;
   reg signed [31:0] tm514;
   reg signed [31:0] tm492;
   reg signed [31:0] tm515;
   reg signed [31:0] tm493;
   reg signed [31:0] tm516;
   reg signed [31:0] tm494;
   reg signed [31:0] tm517;
   reg signed [31:0] tm495;
   reg signed [31:0] tm518;
   reg signed [31:0] tm496;
   reg signed [31:0] tm519;
   reg signed [31:0] tm497;
   reg signed [31:0] tm520;
   reg signed [31:0] tm498;
   reg signed [31:0] tm521;
   wire  [31:0] a469;
   wire  [31:0] a471;
   wire  [31:0] a472;
   wire  [31:0] a473;
   reg signed [31:0] tm499;
   reg signed [31:0] tm522;
   reg signed [31:0] tm500;
   reg signed [31:0] tm523;
   reg signed [31:0] tm501;
   reg signed [31:0] tm524;
   reg signed [31:0] tm502;
   reg signed [31:0] tm525;
   reg signed [31:0] tm503;
   reg signed [31:0] tm526;
   reg signed [31:0] tm504;
   reg signed [31:0] tm527;
   reg signed [31:0] tm505;
   reg signed [31:0] tm528;
   reg signed [31:0] tm506;
   reg signed [31:0] tm529;
   reg signed [31:0] tm507;
   reg signed [31:0] tm530;
   reg signed [31:0] tm508;
   reg signed [31:0] tm531;
   reg signed [31:0] tm509;
   reg signed [31:0] tm532;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire  [31:0] Y2;
   wire  [31:0] Y3;
   reg signed [31:0] tm510;
   reg signed [31:0] tm533;


   assign a474 = X0;
   assign a463 = a474;
   assign a477 = X1;
   assign a467 = a477;
   assign a478 = X2;
   assign a479 = X3;
   assign a468 = tm14;
   assign a470 = tm15;
   assign Y0 = tm510;
   assign Y1 = tm533;

   D32_88572 instD32inst0_88572(.addr(i8[3:0]), .out(tm15), .clk(clk));

   D30_88608 instD30inst0_88608(.addr(i8[3:0]), .out(tm14), .clk(clk));

    multfp32fp32 m88493(.a(tm72), .b(tm475), .clk(clk), .out(a469), .enable(1'b1), .rst(reset));
    multfp32fp32 m88515(.a(tm73), .b(tm479), .clk(clk), .out(a471), .enable(1'b1), .rst(reset));
    multfp32fp32 m88533(.a(tm73), .b(tm475), .clk(clk), .out(a472), .enable(1'b1), .rst(reset));
    multfp32fp32 m88544(.a(tm72), .b(tm479), .clk(clk), .out(a473), .enable(1'b1), .rst(reset));
    subfp32 sub88522(.a(a469), .b(a471), .clk(clk), .out(Y2), .enable(1'b1), .rst(reset));
    addfp32 add88551(.a(a472), .b(a473), .clk(clk), .out(Y3), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
         tm72 <= 0;
         tm475 <= 0;
         tm73 <= 0;
         tm479 <= 0;
         tm73 <= 0;
         tm475 <= 0;
         tm72 <= 0;
         tm479 <= 0;
      end
      else begin
         i8 <= i8_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
         tm472 <= a478;
         tm476 <= a479;
         tm488 <= a463;
         tm511 <= a467;
         tm473 <= tm472;
         tm477 <= tm476;
         tm489 <= tm488;
         tm512 <= tm511;
         tm474 <= tm473;
         tm478 <= tm477;
         tm490 <= tm489;
         tm513 <= tm512;
         tm72 <= a468;
         tm73 <= a470;
         tm475 <= tm474;
         tm479 <= tm478;
         tm491 <= tm490;
         tm514 <= tm513;
         tm492 <= tm491;
         tm515 <= tm514;
         tm493 <= tm492;
         tm516 <= tm515;
         tm494 <= tm493;
         tm517 <= tm516;
         tm495 <= tm494;
         tm518 <= tm517;
         tm496 <= tm495;
         tm519 <= tm518;
         tm497 <= tm496;
         tm520 <= tm519;
         tm498 <= tm497;
         tm521 <= tm520;
         tm499 <= tm498;
         tm522 <= tm521;
         tm500 <= tm499;
         tm523 <= tm522;
         tm501 <= tm500;
         tm524 <= tm523;
         tm502 <= tm501;
         tm525 <= tm524;
         tm503 <= tm502;
         tm526 <= tm525;
         tm504 <= tm503;
         tm527 <= tm526;
         tm505 <= tm504;
         tm528 <= tm527;
         tm506 <= tm505;
         tm529 <= tm528;
         tm507 <= tm506;
         tm530 <= tm529;
         tm508 <= tm507;
         tm531 <= tm530;
         tm509 <= tm508;
         tm532 <= tm531;
         tm510 <= tm509;
         tm533 <= tm532;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock88631(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(11, 1) shiftFIFO_110099(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a430;
   wire signed [31:0] a431;
   wire signed [31:0] a432;
   wire signed [31:0] a433;
   wire  [31:0] t189;
   wire  [31:0] t190;
   wire  [31:0] t191;
   wire  [31:0] t192;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a430 = X0;
   assign a431 = X2;
   assign a432 = X1;
   assign a433 = X3;
   assign Y0 = t189;
   assign Y1 = t190;
   assign Y2 = t191;
   assign Y3 = t192;

    addfp32 add88643(.a(a430), .b(a431), .clk(clk), .out(t189), .enable(1'b1), .rst(reset));
    addfp32 add88658(.a(a432), .b(a433), .clk(clk), .out(t190), .enable(1'b1), .rst(reset));
    subfp32 sub88673(.a(a430), .b(a431), .clk(clk), .out(t191), .enable(1'b1), .rst(reset));
    subfp32 sub88688(.a(a432), .b(a433), .clk(clk), .out(t192), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 19
// Gap: 32
module rc88712(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm88710 instPerm110100(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 19
// Gap: 32
module perm88710(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 32;
   parameter logDepth = 5;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[5] ^ addr0[0];
   assign inAddr0[0] = addr0[1];
   assign inAddr0[1] = addr0[2];
   assign inAddr0[2] = addr0[3];
   assign inAddr0[3] = addr0[4];
   assign inAddr0[4] = addr0[0];
   assign outBank0[0] = addr0b[5] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outAddr0[3] = addr0b[4];
   assign outAddr0[4] = addr0b[5];
   assign outBank_a0[0] = addr0c[5] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];
   assign outAddr_a0[3] = addr0c[4];
   assign outAddr_a0[4] = addr0c[5];

   assign inBank1[0] = addr1[5] ^ addr1[0];
   assign inAddr1[0] = addr1[1];
   assign inAddr1[1] = addr1[2];
   assign inAddr1[2] = addr1[3];
   assign inAddr1[3] = addr1[4];
   assign inAddr1[4] = addr1[0];
   assign outBank1[0] = addr1b[5] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outAddr1[3] = addr1b[4];
   assign outAddr1[4] = addr1b[5];
   assign outBank_a1[0] = addr1c[5] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];
   assign outAddr_a1[3] = addr1c[4];
   assign outAddr_a1[4] = addr1c[5];

   nextReg #(17, 5) nextReg_110105(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110108(.X(next0), .Y(next_out), .clk(clk));


   memArray64_88710 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 16)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 18)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 16) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 31) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 16)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[4];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[4];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[4];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray64_88710(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 32;
   parameter logDepth = 5;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   nextReg #(32, 5) nextReg_110113(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 24
// Gap: 32
module DirSum_89013(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   input clk, reset, next;

   reg [4:0] i7;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   always @(posedge clk) begin
      if (reset == 1) begin
         i7 <= 0;
      end
      else begin
         if (next == 1)
            i7 <= 0;
         else if (i7 == 31)
            i7 <= 0;
         else
            i7 <= i7 + 1;
      end
   end

   codeBlock88715 codeBlockIsnt110118(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i7_in(i7),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3));

endmodule

module D28_88909(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbdc8bd36;
      2: out3 <= 32'hbe47c5c2;
      3: out3 <= 32'hbe94a031;
      4: out3 <= 32'hbec3ef15;
      5: out3 <= 32'hbef15aea;
      6: out3 <= 32'hbf0e39da;
      7: out3 <= 32'hbf226799;
      8: out3 <= 32'hbf3504f3;
      9: out3 <= 32'hbf45e403;
      10: out3 <= 32'hbf54db31;
      11: out3 <= 32'hbf61c598;
      12: out3 <= 32'hbf6c835e;
      13: out3 <= 32'hbf74fa0b;
      14: out3 <= 32'hbf7b14be;
      15: out3 <= 32'hbf7ec46d;
      16: out3 <= 32'hbf800000;
      17: out3 <= 32'hbf7ec46d;
      18: out3 <= 32'hbf7b14be;
      19: out3 <= 32'hbf74fa0b;
      20: out3 <= 32'hbf6c835e;
      21: out3 <= 32'hbf61c598;
      22: out3 <= 32'hbf54db31;
      23: out3 <= 32'hbf45e403;
      24: out3 <= 32'hbf3504f3;
      25: out3 <= 32'hbf226799;
      26: out3 <= 32'hbf0e39da;
      27: out3 <= 32'hbef15aea;
      28: out3 <= 32'hbec3ef15;
      29: out3 <= 32'hbe94a031;
      30: out3 <= 32'hbe47c5c2;
      31: out3 <= 32'hbdc8bd36;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D26_88977(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h3f7ec46d;
      2: out3 <= 32'h3f7b14be;
      3: out3 <= 32'h3f74fa0b;
      4: out3 <= 32'h3f6c835e;
      5: out3 <= 32'h3f61c598;
      6: out3 <= 32'h3f54db31;
      7: out3 <= 32'h3f45e403;
      8: out3 <= 32'h3f3504f3;
      9: out3 <= 32'h3f226799;
      10: out3 <= 32'h3f0e39da;
      11: out3 <= 32'h3ef15aea;
      12: out3 <= 32'h3ec3ef15;
      13: out3 <= 32'h3e94a031;
      14: out3 <= 32'h3e47c5c2;
      15: out3 <= 32'h3dc8bd36;
      16: out3 <= 32'h0;
      17: out3 <= 32'hbdc8bd36;
      18: out3 <= 32'hbe47c5c2;
      19: out3 <= 32'hbe94a031;
      20: out3 <= 32'hbec3ef15;
      21: out3 <= 32'hbef15aea;
      22: out3 <= 32'hbf0e39da;
      23: out3 <= 32'hbf226799;
      24: out3 <= 32'hbf3504f3;
      25: out3 <= 32'hbf45e403;
      26: out3 <= 32'hbf54db31;
      27: out3 <= 32'hbf61c598;
      28: out3 <= 32'hbf6c835e;
      29: out3 <= 32'hbf74fa0b;
      30: out3 <= 32'hbf7b14be;
      31: out3 <= 32'hbf7ec46d;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 24
// Gap: 1
module codeBlock88715(clk, reset, next_in, next_out,
   i7_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [4:0] i7_in;
   reg [4:0] i7;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(23, 1) shiftFIFO_110121(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a414;
   wire signed [31:0] a403;
   wire signed [31:0] a417;
   wire signed [31:0] a407;
   wire signed [31:0] a418;
   wire signed [31:0] a419;
   reg signed [31:0] tm534;
   reg signed [31:0] tm538;
   reg signed [31:0] tm550;
   reg signed [31:0] tm573;
   reg signed [31:0] tm535;
   reg signed [31:0] tm539;
   reg signed [31:0] tm551;
   reg signed [31:0] tm574;
   wire signed [31:0] tm18;
   wire signed [31:0] a408;
   wire signed [31:0] tm19;
   wire signed [31:0] a410;
   reg signed [31:0] tm536;
   reg signed [31:0] tm540;
   reg signed [31:0] tm552;
   reg signed [31:0] tm575;
   reg signed [31:0] tm80;
   reg signed [31:0] tm81;
   reg signed [31:0] tm537;
   reg signed [31:0] tm541;
   reg signed [31:0] tm553;
   reg signed [31:0] tm576;
   reg signed [31:0] tm554;
   reg signed [31:0] tm577;
   reg signed [31:0] tm555;
   reg signed [31:0] tm578;
   reg signed [31:0] tm556;
   reg signed [31:0] tm579;
   reg signed [31:0] tm557;
   reg signed [31:0] tm580;
   reg signed [31:0] tm558;
   reg signed [31:0] tm581;
   reg signed [31:0] tm559;
   reg signed [31:0] tm582;
   reg signed [31:0] tm560;
   reg signed [31:0] tm583;
   wire  [31:0] a409;
   wire  [31:0] a411;
   wire  [31:0] a412;
   wire  [31:0] a413;
   reg signed [31:0] tm561;
   reg signed [31:0] tm584;
   reg signed [31:0] tm562;
   reg signed [31:0] tm585;
   reg signed [31:0] tm563;
   reg signed [31:0] tm586;
   reg signed [31:0] tm564;
   reg signed [31:0] tm587;
   reg signed [31:0] tm565;
   reg signed [31:0] tm588;
   reg signed [31:0] tm566;
   reg signed [31:0] tm589;
   reg signed [31:0] tm567;
   reg signed [31:0] tm590;
   reg signed [31:0] tm568;
   reg signed [31:0] tm591;
   reg signed [31:0] tm569;
   reg signed [31:0] tm592;
   reg signed [31:0] tm570;
   reg signed [31:0] tm593;
   reg signed [31:0] tm571;
   reg signed [31:0] tm594;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire  [31:0] Y2;
   wire  [31:0] Y3;
   reg signed [31:0] tm572;
   reg signed [31:0] tm595;


   assign a414 = X0;
   assign a403 = a414;
   assign a417 = X1;
   assign a407 = a417;
   assign a418 = X2;
   assign a419 = X3;
   assign a408 = tm18;
   assign a410 = tm19;
   assign Y0 = tm572;
   assign Y1 = tm595;

   D28_88909 instD28inst0_88909(.addr(i7[4:0]), .out(tm19), .clk(clk));

   D26_88977 instD26inst0_88977(.addr(i7[4:0]), .out(tm18), .clk(clk));

    multfp32fp32 m88814(.a(tm80), .b(tm537), .clk(clk), .out(a409), .enable(1'b1), .rst(reset));
    multfp32fp32 m88836(.a(tm81), .b(tm541), .clk(clk), .out(a411), .enable(1'b1), .rst(reset));
    multfp32fp32 m88854(.a(tm81), .b(tm537), .clk(clk), .out(a412), .enable(1'b1), .rst(reset));
    multfp32fp32 m88865(.a(tm80), .b(tm541), .clk(clk), .out(a413), .enable(1'b1), .rst(reset));
    subfp32 sub88843(.a(a409), .b(a411), .clk(clk), .out(Y2), .enable(1'b1), .rst(reset));
    addfp32 add88872(.a(a412), .b(a413), .clk(clk), .out(Y3), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
         tm80 <= 0;
         tm537 <= 0;
         tm81 <= 0;
         tm541 <= 0;
         tm81 <= 0;
         tm537 <= 0;
         tm80 <= 0;
         tm541 <= 0;
      end
      else begin
         i7 <= i7_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
         tm534 <= a418;
         tm538 <= a419;
         tm550 <= a403;
         tm573 <= a407;
         tm535 <= tm534;
         tm539 <= tm538;
         tm551 <= tm550;
         tm574 <= tm573;
         tm536 <= tm535;
         tm540 <= tm539;
         tm552 <= tm551;
         tm575 <= tm574;
         tm80 <= a408;
         tm81 <= a410;
         tm537 <= tm536;
         tm541 <= tm540;
         tm553 <= tm552;
         tm576 <= tm575;
         tm554 <= tm553;
         tm577 <= tm576;
         tm555 <= tm554;
         tm578 <= tm577;
         tm556 <= tm555;
         tm579 <= tm578;
         tm557 <= tm556;
         tm580 <= tm579;
         tm558 <= tm557;
         tm581 <= tm580;
         tm559 <= tm558;
         tm582 <= tm581;
         tm560 <= tm559;
         tm583 <= tm582;
         tm561 <= tm560;
         tm584 <= tm583;
         tm562 <= tm561;
         tm585 <= tm584;
         tm563 <= tm562;
         tm586 <= tm585;
         tm564 <= tm563;
         tm587 <= tm586;
         tm565 <= tm564;
         tm588 <= tm587;
         tm566 <= tm565;
         tm589 <= tm588;
         tm567 <= tm566;
         tm590 <= tm589;
         tm568 <= tm567;
         tm591 <= tm590;
         tm569 <= tm568;
         tm592 <= tm591;
         tm570 <= tm569;
         tm593 <= tm592;
         tm571 <= tm570;
         tm594 <= tm593;
         tm572 <= tm571;
         tm595 <= tm594;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock89016(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(11, 1) shiftFIFO_110124(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a369;
   wire signed [31:0] a370;
   wire signed [31:0] a371;
   wire signed [31:0] a372;
   wire  [31:0] t165;
   wire  [31:0] t166;
   wire  [31:0] t167;
   wire  [31:0] t168;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a369 = X0;
   assign a370 = X2;
   assign a371 = X1;
   assign a372 = X3;
   assign Y0 = t165;
   assign Y1 = t166;
   assign Y2 = t167;
   assign Y3 = t168;

    addfp32 add89028(.a(a369), .b(a370), .clk(clk), .out(t165), .enable(1'b1), .rst(reset));
    addfp32 add89043(.a(a371), .b(a372), .clk(clk), .out(t166), .enable(1'b1), .rst(reset));
    subfp32 sub89058(.a(a369), .b(a370), .clk(clk), .out(t167), .enable(1'b1), .rst(reset));
    subfp32 sub89073(.a(a371), .b(a372), .clk(clk), .out(t168), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 35
// Gap: 64
module rc89097(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm89095 instPerm110125(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 35
// Gap: 64
module perm89095(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[6] ^ addr0[0];
   assign inAddr0[0] = addr0[1];
   assign inAddr0[1] = addr0[2];
   assign inAddr0[2] = addr0[3];
   assign inAddr0[3] = addr0[4];
   assign inAddr0[4] = addr0[5];
   assign inAddr0[5] = addr0[0];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outAddr0[3] = addr0b[4];
   assign outAddr0[4] = addr0b[5];
   assign outAddr0[5] = addr0b[6];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];
   assign outAddr_a0[3] = addr0c[4];
   assign outAddr_a0[4] = addr0c[5];
   assign outAddr_a0[5] = addr0c[6];

   assign inBank1[0] = addr1[6] ^ addr1[0];
   assign inAddr1[0] = addr1[1];
   assign inAddr1[1] = addr1[2];
   assign inAddr1[2] = addr1[3];
   assign inAddr1[3] = addr1[4];
   assign inAddr1[4] = addr1[5];
   assign inAddr1[5] = addr1[0];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outAddr1[3] = addr1b[4];
   assign outAddr1[4] = addr1b[5];
   assign outAddr1[5] = addr1b[6];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];
   assign outAddr_a1[3] = addr1c[4];
   assign outAddr_a1[4] = addr1c[5];
   assign outAddr_a1[5] = addr1c[6];

   nextReg #(33, 6) nextReg_110130(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110133(.X(next0), .Y(next_out), .clk(clk));


   memArray128_89095 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 32)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 34)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 32) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 63) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 32)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[5];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[5];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[5];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray128_89095(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   nextReg #(64, 6) nextReg_110138(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 24
// Gap: 64
module DirSum_89526(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   input clk, reset, next;

   reg [5:0] i6;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   always @(posedge clk) begin
      if (reset == 1) begin
         i6 <= 0;
      end
      else begin
         if (next == 1)
            i6 <= 0;
         else if (i6 == 63)
            i6 <= 0;
         else
            i6 <= i6 + 1;
      end
   end

   codeBlock89100 codeBlockIsnt110143(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i6_in(i6),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3));

endmodule

module D24_89326(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbd48fb30;
      2: out3 <= 32'hbdc8bd36;
      3: out3 <= 32'hbe164083;
      4: out3 <= 32'hbe47c5c2;
      5: out3 <= 32'hbe78cfcc;
      6: out3 <= 32'hbe94a031;
      7: out3 <= 32'hbeac7cd4;
      8: out3 <= 32'hbec3ef15;
      9: out3 <= 32'hbedae880;
      10: out3 <= 32'hbef15aea;
      11: out3 <= 32'hbf039c3d;
      12: out3 <= 32'hbf0e39da;
      13: out3 <= 32'hbf187fc0;
      14: out3 <= 32'hbf226799;
      15: out3 <= 32'hbf2beb4a;
      16: out3 <= 32'hbf3504f3;
      17: out3 <= 32'hbf3daef9;
      18: out3 <= 32'hbf45e403;
      19: out3 <= 32'hbf4d9f02;
      20: out3 <= 32'hbf54db31;
      21: out3 <= 32'hbf5b941a;
      22: out3 <= 32'hbf61c598;
      23: out3 <= 32'hbf676bd8;
      24: out3 <= 32'hbf6c835e;
      25: out3 <= 32'hbf710908;
      26: out3 <= 32'hbf74fa0b;
      27: out3 <= 32'hbf7853f8;
      28: out3 <= 32'hbf7b14be;
      29: out3 <= 32'hbf7d3aac;
      30: out3 <= 32'hbf7ec46d;
      31: out3 <= 32'hbf7fb10f;
      32: out3 <= 32'hbf800000;
      33: out3 <= 32'hbf7fb10f;
      34: out3 <= 32'hbf7ec46d;
      35: out3 <= 32'hbf7d3aac;
      36: out3 <= 32'hbf7b14be;
      37: out3 <= 32'hbf7853f8;
      38: out3 <= 32'hbf74fa0b;
      39: out3 <= 32'hbf710908;
      40: out3 <= 32'hbf6c835e;
      41: out3 <= 32'hbf676bd8;
      42: out3 <= 32'hbf61c598;
      43: out3 <= 32'hbf5b941a;
      44: out3 <= 32'hbf54db31;
      45: out3 <= 32'hbf4d9f02;
      46: out3 <= 32'hbf45e403;
      47: out3 <= 32'hbf3daef9;
      48: out3 <= 32'hbf3504f3;
      49: out3 <= 32'hbf2beb4a;
      50: out3 <= 32'hbf226799;
      51: out3 <= 32'hbf187fc0;
      52: out3 <= 32'hbf0e39da;
      53: out3 <= 32'hbf039c3d;
      54: out3 <= 32'hbef15aea;
      55: out3 <= 32'hbedae880;
      56: out3 <= 32'hbec3ef15;
      57: out3 <= 32'hbeac7cd4;
      58: out3 <= 32'hbe94a031;
      59: out3 <= 32'hbe78cfcc;
      60: out3 <= 32'hbe47c5c2;
      61: out3 <= 32'hbe164083;
      62: out3 <= 32'hbdc8bd36;
      63: out3 <= 32'hbd48fb30;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D22_89458(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h3f7fb10f;
      2: out3 <= 32'h3f7ec46d;
      3: out3 <= 32'h3f7d3aac;
      4: out3 <= 32'h3f7b14be;
      5: out3 <= 32'h3f7853f8;
      6: out3 <= 32'h3f74fa0b;
      7: out3 <= 32'h3f710908;
      8: out3 <= 32'h3f6c835e;
      9: out3 <= 32'h3f676bd8;
      10: out3 <= 32'h3f61c598;
      11: out3 <= 32'h3f5b941a;
      12: out3 <= 32'h3f54db31;
      13: out3 <= 32'h3f4d9f02;
      14: out3 <= 32'h3f45e403;
      15: out3 <= 32'h3f3daef9;
      16: out3 <= 32'h3f3504f3;
      17: out3 <= 32'h3f2beb4a;
      18: out3 <= 32'h3f226799;
      19: out3 <= 32'h3f187fc0;
      20: out3 <= 32'h3f0e39da;
      21: out3 <= 32'h3f039c3d;
      22: out3 <= 32'h3ef15aea;
      23: out3 <= 32'h3edae880;
      24: out3 <= 32'h3ec3ef15;
      25: out3 <= 32'h3eac7cd4;
      26: out3 <= 32'h3e94a031;
      27: out3 <= 32'h3e78cfcc;
      28: out3 <= 32'h3e47c5c2;
      29: out3 <= 32'h3e164083;
      30: out3 <= 32'h3dc8bd36;
      31: out3 <= 32'h3d48fb30;
      32: out3 <= 32'h0;
      33: out3 <= 32'hbd48fb30;
      34: out3 <= 32'hbdc8bd36;
      35: out3 <= 32'hbe164083;
      36: out3 <= 32'hbe47c5c2;
      37: out3 <= 32'hbe78cfcc;
      38: out3 <= 32'hbe94a031;
      39: out3 <= 32'hbeac7cd4;
      40: out3 <= 32'hbec3ef15;
      41: out3 <= 32'hbedae880;
      42: out3 <= 32'hbef15aea;
      43: out3 <= 32'hbf039c3d;
      44: out3 <= 32'hbf0e39da;
      45: out3 <= 32'hbf187fc0;
      46: out3 <= 32'hbf226799;
      47: out3 <= 32'hbf2beb4a;
      48: out3 <= 32'hbf3504f3;
      49: out3 <= 32'hbf3daef9;
      50: out3 <= 32'hbf45e403;
      51: out3 <= 32'hbf4d9f02;
      52: out3 <= 32'hbf54db31;
      53: out3 <= 32'hbf5b941a;
      54: out3 <= 32'hbf61c598;
      55: out3 <= 32'hbf676bd8;
      56: out3 <= 32'hbf6c835e;
      57: out3 <= 32'hbf710908;
      58: out3 <= 32'hbf74fa0b;
      59: out3 <= 32'hbf7853f8;
      60: out3 <= 32'hbf7b14be;
      61: out3 <= 32'hbf7d3aac;
      62: out3 <= 32'hbf7ec46d;
      63: out3 <= 32'hbf7fb10f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 24
// Gap: 1
module codeBlock89100(clk, reset, next_in, next_out,
   i6_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [5:0] i6_in;
   reg [5:0] i6;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(23, 1) shiftFIFO_110146(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a353;
   wire signed [31:0] a342;
   wire signed [31:0] a356;
   wire signed [31:0] a346;
   wire signed [31:0] a357;
   wire signed [31:0] a358;
   reg signed [31:0] tm596;
   reg signed [31:0] tm600;
   reg signed [31:0] tm612;
   reg signed [31:0] tm635;
   reg signed [31:0] tm597;
   reg signed [31:0] tm601;
   reg signed [31:0] tm613;
   reg signed [31:0] tm636;
   wire signed [31:0] tm22;
   wire signed [31:0] a347;
   wire signed [31:0] tm23;
   wire signed [31:0] a349;
   reg signed [31:0] tm598;
   reg signed [31:0] tm602;
   reg signed [31:0] tm614;
   reg signed [31:0] tm637;
   reg signed [31:0] tm88;
   reg signed [31:0] tm89;
   reg signed [31:0] tm599;
   reg signed [31:0] tm603;
   reg signed [31:0] tm615;
   reg signed [31:0] tm638;
   reg signed [31:0] tm616;
   reg signed [31:0] tm639;
   reg signed [31:0] tm617;
   reg signed [31:0] tm640;
   reg signed [31:0] tm618;
   reg signed [31:0] tm641;
   reg signed [31:0] tm619;
   reg signed [31:0] tm642;
   reg signed [31:0] tm620;
   reg signed [31:0] tm643;
   reg signed [31:0] tm621;
   reg signed [31:0] tm644;
   reg signed [31:0] tm622;
   reg signed [31:0] tm645;
   wire  [31:0] a348;
   wire  [31:0] a350;
   wire  [31:0] a351;
   wire  [31:0] a352;
   reg signed [31:0] tm623;
   reg signed [31:0] tm646;
   reg signed [31:0] tm624;
   reg signed [31:0] tm647;
   reg signed [31:0] tm625;
   reg signed [31:0] tm648;
   reg signed [31:0] tm626;
   reg signed [31:0] tm649;
   reg signed [31:0] tm627;
   reg signed [31:0] tm650;
   reg signed [31:0] tm628;
   reg signed [31:0] tm651;
   reg signed [31:0] tm629;
   reg signed [31:0] tm652;
   reg signed [31:0] tm630;
   reg signed [31:0] tm653;
   reg signed [31:0] tm631;
   reg signed [31:0] tm654;
   reg signed [31:0] tm632;
   reg signed [31:0] tm655;
   reg signed [31:0] tm633;
   reg signed [31:0] tm656;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire  [31:0] Y2;
   wire  [31:0] Y3;
   reg signed [31:0] tm634;
   reg signed [31:0] tm657;


   assign a353 = X0;
   assign a342 = a353;
   assign a356 = X1;
   assign a346 = a356;
   assign a357 = X2;
   assign a358 = X3;
   assign a347 = tm22;
   assign a349 = tm23;
   assign Y0 = tm634;
   assign Y1 = tm657;

   D24_89326 instD24inst0_89326(.addr(i6[5:0]), .out(tm23), .clk(clk));

   D22_89458 instD22inst0_89458(.addr(i6[5:0]), .out(tm22), .clk(clk));

    multfp32fp32 m89199(.a(tm88), .b(tm599), .clk(clk), .out(a348), .enable(1'b1), .rst(reset));
    multfp32fp32 m89221(.a(tm89), .b(tm603), .clk(clk), .out(a350), .enable(1'b1), .rst(reset));
    multfp32fp32 m89239(.a(tm89), .b(tm599), .clk(clk), .out(a351), .enable(1'b1), .rst(reset));
    multfp32fp32 m89250(.a(tm88), .b(tm603), .clk(clk), .out(a352), .enable(1'b1), .rst(reset));
    subfp32 sub89228(.a(a348), .b(a350), .clk(clk), .out(Y2), .enable(1'b1), .rst(reset));
    addfp32 add89257(.a(a351), .b(a352), .clk(clk), .out(Y3), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
         tm88 <= 0;
         tm599 <= 0;
         tm89 <= 0;
         tm603 <= 0;
         tm89 <= 0;
         tm599 <= 0;
         tm88 <= 0;
         tm603 <= 0;
      end
      else begin
         i6 <= i6_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
         tm596 <= a357;
         tm600 <= a358;
         tm612 <= a342;
         tm635 <= a346;
         tm597 <= tm596;
         tm601 <= tm600;
         tm613 <= tm612;
         tm636 <= tm635;
         tm598 <= tm597;
         tm602 <= tm601;
         tm614 <= tm613;
         tm637 <= tm636;
         tm88 <= a347;
         tm89 <= a349;
         tm599 <= tm598;
         tm603 <= tm602;
         tm615 <= tm614;
         tm638 <= tm637;
         tm616 <= tm615;
         tm639 <= tm638;
         tm617 <= tm616;
         tm640 <= tm639;
         tm618 <= tm617;
         tm641 <= tm640;
         tm619 <= tm618;
         tm642 <= tm641;
         tm620 <= tm619;
         tm643 <= tm642;
         tm621 <= tm620;
         tm644 <= tm643;
         tm622 <= tm621;
         tm645 <= tm644;
         tm623 <= tm622;
         tm646 <= tm645;
         tm624 <= tm623;
         tm647 <= tm646;
         tm625 <= tm624;
         tm648 <= tm647;
         tm626 <= tm625;
         tm649 <= tm648;
         tm627 <= tm626;
         tm650 <= tm649;
         tm628 <= tm627;
         tm651 <= tm650;
         tm629 <= tm628;
         tm652 <= tm651;
         tm630 <= tm629;
         tm653 <= tm652;
         tm631 <= tm630;
         tm654 <= tm653;
         tm632 <= tm631;
         tm655 <= tm654;
         tm633 <= tm632;
         tm656 <= tm655;
         tm634 <= tm633;
         tm657 <= tm656;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock89529(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(11, 1) shiftFIFO_110149(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a309;
   wire signed [31:0] a310;
   wire signed [31:0] a311;
   wire signed [31:0] a312;
   wire  [31:0] t141;
   wire  [31:0] t142;
   wire  [31:0] t143;
   wire  [31:0] t144;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a309 = X0;
   assign a310 = X2;
   assign a311 = X1;
   assign a312 = X3;
   assign Y0 = t141;
   assign Y1 = t142;
   assign Y2 = t143;
   assign Y3 = t144;

    addfp32 add89541(.a(a309), .b(a310), .clk(clk), .out(t141), .enable(1'b1), .rst(reset));
    addfp32 add89556(.a(a311), .b(a312), .clk(clk), .out(t142), .enable(1'b1), .rst(reset));
    subfp32 sub89571(.a(a309), .b(a310), .clk(clk), .out(t143), .enable(1'b1), .rst(reset));
    subfp32 sub89586(.a(a311), .b(a312), .clk(clk), .out(t144), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 67
// Gap: 128
module rc89610(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm89608 instPerm110150(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 67
// Gap: 128
module perm89608(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[7] ^ addr0[0];
   assign inAddr0[0] = addr0[1];
   assign inAddr0[1] = addr0[2];
   assign inAddr0[2] = addr0[3];
   assign inAddr0[3] = addr0[4];
   assign inAddr0[4] = addr0[5];
   assign inAddr0[5] = addr0[6];
   assign inAddr0[6] = addr0[0];
   assign outBank0[0] = addr0b[7] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outAddr0[3] = addr0b[4];
   assign outAddr0[4] = addr0b[5];
   assign outAddr0[5] = addr0b[6];
   assign outAddr0[6] = addr0b[7];
   assign outBank_a0[0] = addr0c[7] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];
   assign outAddr_a0[3] = addr0c[4];
   assign outAddr_a0[4] = addr0c[5];
   assign outAddr_a0[5] = addr0c[6];
   assign outAddr_a0[6] = addr0c[7];

   assign inBank1[0] = addr1[7] ^ addr1[0];
   assign inAddr1[0] = addr1[1];
   assign inAddr1[1] = addr1[2];
   assign inAddr1[2] = addr1[3];
   assign inAddr1[3] = addr1[4];
   assign inAddr1[4] = addr1[5];
   assign inAddr1[5] = addr1[6];
   assign inAddr1[6] = addr1[0];
   assign outBank1[0] = addr1b[7] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outAddr1[3] = addr1b[4];
   assign outAddr1[4] = addr1b[5];
   assign outAddr1[5] = addr1b[6];
   assign outAddr1[6] = addr1b[7];
   assign outBank_a1[0] = addr1c[7] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];
   assign outAddr_a1[3] = addr1c[4];
   assign outAddr_a1[4] = addr1c[5];
   assign outAddr_a1[5] = addr1c[6];
   assign outAddr_a1[6] = addr1c[7];

   nextReg #(65, 7) nextReg_110155(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110158(.X(next0), .Y(next_out), .clk(clk));


   memArray256_89608 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 64)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 66)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 64) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 127) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 64)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[6];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[6];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[6];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray256_89608(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 128;
   parameter logDepth = 7;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   nextReg #(128, 7) nextReg_110163(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 24
// Gap: 128
module DirSum_90295(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   input clk, reset, next;

   reg [6:0] i5;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   always @(posedge clk) begin
      if (reset == 1) begin
         i5 <= 0;
      end
      else begin
         if (next == 1)
            i5 <= 0;
         else if (i5 == 127)
            i5 <= 0;
         else
            i5 <= i5 + 1;
      end
   end

   codeBlock89613 codeBlockIsnt110168(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i5_in(i5),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3));

endmodule

module D18_90033(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h3f7fec43;
      2: out3 <= 32'h3f7fb10f;
      3: out3 <= 32'h3f7f4e6d;
      4: out3 <= 32'h3f7ec46d;
      5: out3 <= 32'h3f7e1324;
      6: out3 <= 32'h3f7d3aac;
      7: out3 <= 32'h3f7c3b28;
      8: out3 <= 32'h3f7b14be;
      9: out3 <= 32'h3f79c79d;
      10: out3 <= 32'h3f7853f8;
      11: out3 <= 32'h3f76ba07;
      12: out3 <= 32'h3f74fa0b;
      13: out3 <= 32'h3f731447;
      14: out3 <= 32'h3f710908;
      15: out3 <= 32'h3f6ed89e;
      16: out3 <= 32'h3f6c835e;
      17: out3 <= 32'h3f6a09a7;
      18: out3 <= 32'h3f676bd8;
      19: out3 <= 32'h3f64aa59;
      20: out3 <= 32'h3f61c598;
      21: out3 <= 32'h3f5ebe05;
      22: out3 <= 32'h3f5b941a;
      23: out3 <= 32'h3f584853;
      24: out3 <= 32'h3f54db31;
      25: out3 <= 32'h3f514d3d;
      26: out3 <= 32'h3f4d9f02;
      27: out3 <= 32'h3f49d112;
      28: out3 <= 32'h3f45e403;
      29: out3 <= 32'h3f41d870;
      30: out3 <= 32'h3f3daef9;
      31: out3 <= 32'h3f396842;
      32: out3 <= 32'h3f3504f3;
      33: out3 <= 32'h3f3085bb;
      34: out3 <= 32'h3f2beb4a;
      35: out3 <= 32'h3f273656;
      36: out3 <= 32'h3f226799;
      37: out3 <= 32'h3f1d7fd1;
      38: out3 <= 32'h3f187fc0;
      39: out3 <= 32'h3f13682a;
      40: out3 <= 32'h3f0e39da;
      41: out3 <= 32'h3f08f59b;
      42: out3 <= 32'h3f039c3d;
      43: out3 <= 32'h3efc5d27;
      44: out3 <= 32'h3ef15aea;
      45: out3 <= 32'h3ee63375;
      46: out3 <= 32'h3edae880;
      47: out3 <= 32'h3ecf7bca;
      48: out3 <= 32'h3ec3ef15;
      49: out3 <= 32'h3eb8442a;
      50: out3 <= 32'h3eac7cd4;
      51: out3 <= 32'h3ea09ae5;
      52: out3 <= 32'h3e94a031;
      53: out3 <= 32'h3e888e93;
      54: out3 <= 32'h3e78cfcc;
      55: out3 <= 32'h3e605c13;
      56: out3 <= 32'h3e47c5c2;
      57: out3 <= 32'h3e2f10a2;
      58: out3 <= 32'h3e164083;
      59: out3 <= 32'h3dfab273;
      60: out3 <= 32'h3dc8bd36;
      61: out3 <= 32'h3d96a905;
      62: out3 <= 32'h3d48fb30;
      63: out3 <= 32'h3cc90ab0;
      64: out3 <= 32'h0;
      65: out3 <= 32'hbcc90ab0;
      66: out3 <= 32'hbd48fb30;
      67: out3 <= 32'hbd96a905;
      68: out3 <= 32'hbdc8bd36;
      69: out3 <= 32'hbdfab273;
      70: out3 <= 32'hbe164083;
      71: out3 <= 32'hbe2f10a2;
      72: out3 <= 32'hbe47c5c2;
      73: out3 <= 32'hbe605c13;
      74: out3 <= 32'hbe78cfcc;
      75: out3 <= 32'hbe888e93;
      76: out3 <= 32'hbe94a031;
      77: out3 <= 32'hbea09ae5;
      78: out3 <= 32'hbeac7cd4;
      79: out3 <= 32'hbeb8442a;
      80: out3 <= 32'hbec3ef15;
      81: out3 <= 32'hbecf7bca;
      82: out3 <= 32'hbedae880;
      83: out3 <= 32'hbee63375;
      84: out3 <= 32'hbef15aea;
      85: out3 <= 32'hbefc5d27;
      86: out3 <= 32'hbf039c3d;
      87: out3 <= 32'hbf08f59b;
      88: out3 <= 32'hbf0e39da;
      89: out3 <= 32'hbf13682a;
      90: out3 <= 32'hbf187fc0;
      91: out3 <= 32'hbf1d7fd1;
      92: out3 <= 32'hbf226799;
      93: out3 <= 32'hbf273656;
      94: out3 <= 32'hbf2beb4a;
      95: out3 <= 32'hbf3085bb;
      96: out3 <= 32'hbf3504f3;
      97: out3 <= 32'hbf396842;
      98: out3 <= 32'hbf3daef9;
      99: out3 <= 32'hbf41d870;
      100: out3 <= 32'hbf45e403;
      101: out3 <= 32'hbf49d112;
      102: out3 <= 32'hbf4d9f02;
      103: out3 <= 32'hbf514d3d;
      104: out3 <= 32'hbf54db31;
      105: out3 <= 32'hbf584853;
      106: out3 <= 32'hbf5b941a;
      107: out3 <= 32'hbf5ebe05;
      108: out3 <= 32'hbf61c598;
      109: out3 <= 32'hbf64aa59;
      110: out3 <= 32'hbf676bd8;
      111: out3 <= 32'hbf6a09a7;
      112: out3 <= 32'hbf6c835e;
      113: out3 <= 32'hbf6ed89e;
      114: out3 <= 32'hbf710908;
      115: out3 <= 32'hbf731447;
      116: out3 <= 32'hbf74fa0b;
      117: out3 <= 32'hbf76ba07;
      118: out3 <= 32'hbf7853f8;
      119: out3 <= 32'hbf79c79d;
      120: out3 <= 32'hbf7b14be;
      121: out3 <= 32'hbf7c3b28;
      122: out3 <= 32'hbf7d3aac;
      123: out3 <= 32'hbf7e1324;
      124: out3 <= 32'hbf7ec46d;
      125: out3 <= 32'hbf7f4e6d;
      126: out3 <= 32'hbf7fb10f;
      127: out3 <= 32'hbf7fec43;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D20_90293(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbcc90ab0;
      2: out3 <= 32'hbd48fb30;
      3: out3 <= 32'hbd96a905;
      4: out3 <= 32'hbdc8bd36;
      5: out3 <= 32'hbdfab273;
      6: out3 <= 32'hbe164083;
      7: out3 <= 32'hbe2f10a2;
      8: out3 <= 32'hbe47c5c2;
      9: out3 <= 32'hbe605c13;
      10: out3 <= 32'hbe78cfcc;
      11: out3 <= 32'hbe888e93;
      12: out3 <= 32'hbe94a031;
      13: out3 <= 32'hbea09ae5;
      14: out3 <= 32'hbeac7cd4;
      15: out3 <= 32'hbeb8442a;
      16: out3 <= 32'hbec3ef15;
      17: out3 <= 32'hbecf7bca;
      18: out3 <= 32'hbedae880;
      19: out3 <= 32'hbee63375;
      20: out3 <= 32'hbef15aea;
      21: out3 <= 32'hbefc5d27;
      22: out3 <= 32'hbf039c3d;
      23: out3 <= 32'hbf08f59b;
      24: out3 <= 32'hbf0e39da;
      25: out3 <= 32'hbf13682a;
      26: out3 <= 32'hbf187fc0;
      27: out3 <= 32'hbf1d7fd1;
      28: out3 <= 32'hbf226799;
      29: out3 <= 32'hbf273656;
      30: out3 <= 32'hbf2beb4a;
      31: out3 <= 32'hbf3085bb;
      32: out3 <= 32'hbf3504f3;
      33: out3 <= 32'hbf396842;
      34: out3 <= 32'hbf3daef9;
      35: out3 <= 32'hbf41d870;
      36: out3 <= 32'hbf45e403;
      37: out3 <= 32'hbf49d112;
      38: out3 <= 32'hbf4d9f02;
      39: out3 <= 32'hbf514d3d;
      40: out3 <= 32'hbf54db31;
      41: out3 <= 32'hbf584853;
      42: out3 <= 32'hbf5b941a;
      43: out3 <= 32'hbf5ebe05;
      44: out3 <= 32'hbf61c598;
      45: out3 <= 32'hbf64aa59;
      46: out3 <= 32'hbf676bd8;
      47: out3 <= 32'hbf6a09a7;
      48: out3 <= 32'hbf6c835e;
      49: out3 <= 32'hbf6ed89e;
      50: out3 <= 32'hbf710908;
      51: out3 <= 32'hbf731447;
      52: out3 <= 32'hbf74fa0b;
      53: out3 <= 32'hbf76ba07;
      54: out3 <= 32'hbf7853f8;
      55: out3 <= 32'hbf79c79d;
      56: out3 <= 32'hbf7b14be;
      57: out3 <= 32'hbf7c3b28;
      58: out3 <= 32'hbf7d3aac;
      59: out3 <= 32'hbf7e1324;
      60: out3 <= 32'hbf7ec46d;
      61: out3 <= 32'hbf7f4e6d;
      62: out3 <= 32'hbf7fb10f;
      63: out3 <= 32'hbf7fec43;
      64: out3 <= 32'hbf800000;
      65: out3 <= 32'hbf7fec43;
      66: out3 <= 32'hbf7fb10f;
      67: out3 <= 32'hbf7f4e6d;
      68: out3 <= 32'hbf7ec46d;
      69: out3 <= 32'hbf7e1324;
      70: out3 <= 32'hbf7d3aac;
      71: out3 <= 32'hbf7c3b28;
      72: out3 <= 32'hbf7b14be;
      73: out3 <= 32'hbf79c79d;
      74: out3 <= 32'hbf7853f8;
      75: out3 <= 32'hbf76ba07;
      76: out3 <= 32'hbf74fa0b;
      77: out3 <= 32'hbf731447;
      78: out3 <= 32'hbf710908;
      79: out3 <= 32'hbf6ed89e;
      80: out3 <= 32'hbf6c835e;
      81: out3 <= 32'hbf6a09a7;
      82: out3 <= 32'hbf676bd8;
      83: out3 <= 32'hbf64aa59;
      84: out3 <= 32'hbf61c598;
      85: out3 <= 32'hbf5ebe05;
      86: out3 <= 32'hbf5b941a;
      87: out3 <= 32'hbf584853;
      88: out3 <= 32'hbf54db31;
      89: out3 <= 32'hbf514d3d;
      90: out3 <= 32'hbf4d9f02;
      91: out3 <= 32'hbf49d112;
      92: out3 <= 32'hbf45e403;
      93: out3 <= 32'hbf41d870;
      94: out3 <= 32'hbf3daef9;
      95: out3 <= 32'hbf396842;
      96: out3 <= 32'hbf3504f3;
      97: out3 <= 32'hbf3085bb;
      98: out3 <= 32'hbf2beb4a;
      99: out3 <= 32'hbf273656;
      100: out3 <= 32'hbf226799;
      101: out3 <= 32'hbf1d7fd1;
      102: out3 <= 32'hbf187fc0;
      103: out3 <= 32'hbf13682a;
      104: out3 <= 32'hbf0e39da;
      105: out3 <= 32'hbf08f59b;
      106: out3 <= 32'hbf039c3d;
      107: out3 <= 32'hbefc5d27;
      108: out3 <= 32'hbef15aea;
      109: out3 <= 32'hbee63375;
      110: out3 <= 32'hbedae880;
      111: out3 <= 32'hbecf7bca;
      112: out3 <= 32'hbec3ef15;
      113: out3 <= 32'hbeb8442a;
      114: out3 <= 32'hbeac7cd4;
      115: out3 <= 32'hbea09ae5;
      116: out3 <= 32'hbe94a031;
      117: out3 <= 32'hbe888e93;
      118: out3 <= 32'hbe78cfcc;
      119: out3 <= 32'hbe605c13;
      120: out3 <= 32'hbe47c5c2;
      121: out3 <= 32'hbe2f10a2;
      122: out3 <= 32'hbe164083;
      123: out3 <= 32'hbdfab273;
      124: out3 <= 32'hbdc8bd36;
      125: out3 <= 32'hbd96a905;
      126: out3 <= 32'hbd48fb30;
      127: out3 <= 32'hbcc90ab0;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 24
// Gap: 1
module codeBlock89613(clk, reset, next_in, next_out,
   i5_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [6:0] i5_in;
   reg [6:0] i5;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(23, 1) shiftFIFO_110171(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a293;
   wire signed [31:0] a282;
   wire signed [31:0] a296;
   wire signed [31:0] a286;
   wire signed [31:0] a297;
   wire signed [31:0] a298;
   reg signed [31:0] tm658;
   reg signed [31:0] tm662;
   reg signed [31:0] tm674;
   reg signed [31:0] tm697;
   reg signed [31:0] tm659;
   reg signed [31:0] tm663;
   reg signed [31:0] tm675;
   reg signed [31:0] tm698;
   wire signed [31:0] tm26;
   wire signed [31:0] a287;
   wire signed [31:0] tm27;
   wire signed [31:0] a289;
   reg signed [31:0] tm660;
   reg signed [31:0] tm664;
   reg signed [31:0] tm676;
   reg signed [31:0] tm699;
   reg signed [31:0] tm96;
   reg signed [31:0] tm97;
   reg signed [31:0] tm661;
   reg signed [31:0] tm665;
   reg signed [31:0] tm677;
   reg signed [31:0] tm700;
   reg signed [31:0] tm678;
   reg signed [31:0] tm701;
   reg signed [31:0] tm679;
   reg signed [31:0] tm702;
   reg signed [31:0] tm680;
   reg signed [31:0] tm703;
   reg signed [31:0] tm681;
   reg signed [31:0] tm704;
   reg signed [31:0] tm682;
   reg signed [31:0] tm705;
   reg signed [31:0] tm683;
   reg signed [31:0] tm706;
   reg signed [31:0] tm684;
   reg signed [31:0] tm707;
   wire  [31:0] a288;
   wire  [31:0] a290;
   wire  [31:0] a291;
   wire  [31:0] a292;
   reg signed [31:0] tm685;
   reg signed [31:0] tm708;
   reg signed [31:0] tm686;
   reg signed [31:0] tm709;
   reg signed [31:0] tm687;
   reg signed [31:0] tm710;
   reg signed [31:0] tm688;
   reg signed [31:0] tm711;
   reg signed [31:0] tm689;
   reg signed [31:0] tm712;
   reg signed [31:0] tm690;
   reg signed [31:0] tm713;
   reg signed [31:0] tm691;
   reg signed [31:0] tm714;
   reg signed [31:0] tm692;
   reg signed [31:0] tm715;
   reg signed [31:0] tm693;
   reg signed [31:0] tm716;
   reg signed [31:0] tm694;
   reg signed [31:0] tm717;
   reg signed [31:0] tm695;
   reg signed [31:0] tm718;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire  [31:0] Y2;
   wire  [31:0] Y3;
   reg signed [31:0] tm696;
   reg signed [31:0] tm719;


   assign a293 = X0;
   assign a282 = a293;
   assign a296 = X1;
   assign a286 = a296;
   assign a297 = X2;
   assign a298 = X3;
   assign a287 = tm26;
   assign a289 = tm27;
   assign Y0 = tm696;
   assign Y1 = tm719;

   D18_90033 instD18inst0_90033(.addr(i5[6:0]), .out(tm26), .clk(clk));

   D20_90293 instD20inst0_90293(.addr(i5[6:0]), .out(tm27), .clk(clk));

    multfp32fp32 m89712(.a(tm96), .b(tm661), .clk(clk), .out(a288), .enable(1'b1), .rst(reset));
    multfp32fp32 m89734(.a(tm97), .b(tm665), .clk(clk), .out(a290), .enable(1'b1), .rst(reset));
    multfp32fp32 m89752(.a(tm97), .b(tm661), .clk(clk), .out(a291), .enable(1'b1), .rst(reset));
    multfp32fp32 m89763(.a(tm96), .b(tm665), .clk(clk), .out(a292), .enable(1'b1), .rst(reset));
    subfp32 sub89741(.a(a288), .b(a290), .clk(clk), .out(Y2), .enable(1'b1), .rst(reset));
    addfp32 add89770(.a(a291), .b(a292), .clk(clk), .out(Y3), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
         tm96 <= 0;
         tm661 <= 0;
         tm97 <= 0;
         tm665 <= 0;
         tm97 <= 0;
         tm661 <= 0;
         tm96 <= 0;
         tm665 <= 0;
      end
      else begin
         i5 <= i5_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
         tm658 <= a297;
         tm662 <= a298;
         tm674 <= a282;
         tm697 <= a286;
         tm659 <= tm658;
         tm663 <= tm662;
         tm675 <= tm674;
         tm698 <= tm697;
         tm660 <= tm659;
         tm664 <= tm663;
         tm676 <= tm675;
         tm699 <= tm698;
         tm96 <= a287;
         tm97 <= a289;
         tm661 <= tm660;
         tm665 <= tm664;
         tm677 <= tm676;
         tm700 <= tm699;
         tm678 <= tm677;
         tm701 <= tm700;
         tm679 <= tm678;
         tm702 <= tm701;
         tm680 <= tm679;
         tm703 <= tm702;
         tm681 <= tm680;
         tm704 <= tm703;
         tm682 <= tm681;
         tm705 <= tm704;
         tm683 <= tm682;
         tm706 <= tm705;
         tm684 <= tm683;
         tm707 <= tm706;
         tm685 <= tm684;
         tm708 <= tm707;
         tm686 <= tm685;
         tm709 <= tm708;
         tm687 <= tm686;
         tm710 <= tm709;
         tm688 <= tm687;
         tm711 <= tm710;
         tm689 <= tm688;
         tm712 <= tm711;
         tm690 <= tm689;
         tm713 <= tm712;
         tm691 <= tm690;
         tm714 <= tm713;
         tm692 <= tm691;
         tm715 <= tm714;
         tm693 <= tm692;
         tm716 <= tm715;
         tm694 <= tm693;
         tm717 <= tm716;
         tm695 <= tm694;
         tm718 <= tm717;
         tm696 <= tm695;
         tm719 <= tm718;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock90298(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(11, 1) shiftFIFO_110174(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a249;
   wire signed [31:0] a250;
   wire signed [31:0] a251;
   wire signed [31:0] a252;
   wire  [31:0] t117;
   wire  [31:0] t118;
   wire  [31:0] t119;
   wire  [31:0] t120;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a249 = X0;
   assign a250 = X2;
   assign a251 = X1;
   assign a252 = X3;
   assign Y0 = t117;
   assign Y1 = t118;
   assign Y2 = t119;
   assign Y3 = t120;

    addfp32 add90310(.a(a249), .b(a250), .clk(clk), .out(t117), .enable(1'b1), .rst(reset));
    addfp32 add90325(.a(a251), .b(a252), .clk(clk), .out(t118), .enable(1'b1), .rst(reset));
    subfp32 sub90340(.a(a249), .b(a250), .clk(clk), .out(t119), .enable(1'b1), .rst(reset));
    subfp32 sub90355(.a(a251), .b(a252), .clk(clk), .out(t120), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 131
// Gap: 256
module rc90379(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm90377 instPerm110175(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 131
// Gap: 256
module perm90377(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 256;
   parameter logDepth = 8;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[8] ^ addr0[0];
   assign inAddr0[0] = addr0[1];
   assign inAddr0[1] = addr0[2];
   assign inAddr0[2] = addr0[3];
   assign inAddr0[3] = addr0[4];
   assign inAddr0[4] = addr0[5];
   assign inAddr0[5] = addr0[6];
   assign inAddr0[6] = addr0[7];
   assign inAddr0[7] = addr0[0];
   assign outBank0[0] = addr0b[8] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outAddr0[3] = addr0b[4];
   assign outAddr0[4] = addr0b[5];
   assign outAddr0[5] = addr0b[6];
   assign outAddr0[6] = addr0b[7];
   assign outAddr0[7] = addr0b[8];
   assign outBank_a0[0] = addr0c[8] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];
   assign outAddr_a0[3] = addr0c[4];
   assign outAddr_a0[4] = addr0c[5];
   assign outAddr_a0[5] = addr0c[6];
   assign outAddr_a0[6] = addr0c[7];
   assign outAddr_a0[7] = addr0c[8];

   assign inBank1[0] = addr1[8] ^ addr1[0];
   assign inAddr1[0] = addr1[1];
   assign inAddr1[1] = addr1[2];
   assign inAddr1[2] = addr1[3];
   assign inAddr1[3] = addr1[4];
   assign inAddr1[4] = addr1[5];
   assign inAddr1[5] = addr1[6];
   assign inAddr1[6] = addr1[7];
   assign inAddr1[7] = addr1[0];
   assign outBank1[0] = addr1b[8] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outAddr1[3] = addr1b[4];
   assign outAddr1[4] = addr1b[5];
   assign outAddr1[5] = addr1b[6];
   assign outAddr1[6] = addr1b[7];
   assign outAddr1[7] = addr1b[8];
   assign outBank_a1[0] = addr1c[8] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];
   assign outAddr_a1[3] = addr1c[4];
   assign outAddr_a1[4] = addr1c[5];
   assign outAddr_a1[5] = addr1c[6];
   assign outAddr_a1[6] = addr1c[7];
   assign outAddr_a1[7] = addr1c[8];

   nextReg #(129, 8) nextReg_110180(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110183(.X(next0), .Y(next_out), .clk(clk));


   memArray512_90377 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 128)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 130)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 128) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 255) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 128)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[7];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[7];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[7];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray512_90377(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 256;
   parameter logDepth = 8;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   nextReg #(256, 8) nextReg_110188(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 24
// Gap: 256
module DirSum_91576(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   input clk, reset, next;

   reg [7:0] i4;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   always @(posedge clk) begin
      if (reset == 1) begin
         i4 <= 0;
      end
      else begin
         if (next == 1)
            i4 <= 0;
         else if (i4 == 255)
            i4 <= 0;
         else
            i4 <= i4 + 1;
      end
   end

   codeBlock90382 codeBlockIsnt110193(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i4_in(i4),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3));

endmodule

module D16_90800(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [7:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbc490e90;
      2: out3 <= 32'hbcc90ab0;
      3: out3 <= 32'hbd16c32c;
      4: out3 <= 32'hbd48fb30;
      5: out3 <= 32'hbd7b2b74;
      6: out3 <= 32'hbd96a905;
      7: out3 <= 32'hbdafb680;
      8: out3 <= 32'hbdc8bd36;
      9: out3 <= 32'hbde1bc2e;
      10: out3 <= 32'hbdfab273;
      11: out3 <= 32'hbe09cf86;
      12: out3 <= 32'hbe164083;
      13: out3 <= 32'hbe22abb6;
      14: out3 <= 32'hbe2f10a2;
      15: out3 <= 32'hbe3b6ecf;
      16: out3 <= 32'hbe47c5c2;
      17: out3 <= 32'hbe541501;
      18: out3 <= 32'hbe605c13;
      19: out3 <= 32'hbe6c9a7f;
      20: out3 <= 32'hbe78cfcc;
      21: out3 <= 32'hbe827dc0;
      22: out3 <= 32'hbe888e93;
      23: out3 <= 32'hbe8e9a22;
      24: out3 <= 32'hbe94a031;
      25: out3 <= 32'hbe9aa086;
      26: out3 <= 32'hbea09ae5;
      27: out3 <= 32'hbea68f12;
      28: out3 <= 32'hbeac7cd4;
      29: out3 <= 32'hbeb263ef;
      30: out3 <= 32'hbeb8442a;
      31: out3 <= 32'hbebe1d4a;
      32: out3 <= 32'hbec3ef15;
      33: out3 <= 32'hbec9b953;
      34: out3 <= 32'hbecf7bca;
      35: out3 <= 32'hbed53641;
      36: out3 <= 32'hbedae880;
      37: out3 <= 32'hbee0924f;
      38: out3 <= 32'hbee63375;
      39: out3 <= 32'hbeebcbbb;
      40: out3 <= 32'hbef15aea;
      41: out3 <= 32'hbef6e0cb;
      42: out3 <= 32'hbefc5d27;
      43: out3 <= 32'hbf00e7e4;
      44: out3 <= 32'hbf039c3d;
      45: out3 <= 32'hbf064b82;
      46: out3 <= 32'hbf08f59b;
      47: out3 <= 32'hbf0b9a6b;
      48: out3 <= 32'hbf0e39da;
      49: out3 <= 32'hbf10d3cd;
      50: out3 <= 32'hbf13682a;
      51: out3 <= 32'hbf15f6d9;
      52: out3 <= 32'hbf187fc0;
      53: out3 <= 32'hbf1b02c6;
      54: out3 <= 32'hbf1d7fd1;
      55: out3 <= 32'hbf1ff6cb;
      56: out3 <= 32'hbf226799;
      57: out3 <= 32'hbf24d225;
      58: out3 <= 32'hbf273656;
      59: out3 <= 32'hbf299415;
      60: out3 <= 32'hbf2beb4a;
      61: out3 <= 32'hbf2e3bde;
      62: out3 <= 32'hbf3085bb;
      63: out3 <= 32'hbf32c8c9;
      64: out3 <= 32'hbf3504f3;
      65: out3 <= 32'hbf373a23;
      66: out3 <= 32'hbf396842;
      67: out3 <= 32'hbf3b8f3b;
      68: out3 <= 32'hbf3daef9;
      69: out3 <= 32'hbf3fc767;
      70: out3 <= 32'hbf41d870;
      71: out3 <= 32'hbf43e200;
      72: out3 <= 32'hbf45e403;
      73: out3 <= 32'hbf47de65;
      74: out3 <= 32'hbf49d112;
      75: out3 <= 32'hbf4bbbf8;
      76: out3 <= 32'hbf4d9f02;
      77: out3 <= 32'hbf4f7a1f;
      78: out3 <= 32'hbf514d3d;
      79: out3 <= 32'hbf531849;
      80: out3 <= 32'hbf54db31;
      81: out3 <= 32'hbf5695e5;
      82: out3 <= 32'hbf584853;
      83: out3 <= 32'hbf59f26a;
      84: out3 <= 32'hbf5b941a;
      85: out3 <= 32'hbf5d2d53;
      86: out3 <= 32'hbf5ebe05;
      87: out3 <= 32'hbf604621;
      88: out3 <= 32'hbf61c598;
      89: out3 <= 32'hbf633c5a;
      90: out3 <= 32'hbf64aa59;
      91: out3 <= 32'hbf660f88;
      92: out3 <= 32'hbf676bd8;
      93: out3 <= 32'hbf68bf3c;
      94: out3 <= 32'hbf6a09a7;
      95: out3 <= 32'hbf6b4b0c;
      96: out3 <= 32'hbf6c835e;
      97: out3 <= 32'hbf6db293;
      98: out3 <= 32'hbf6ed89e;
      99: out3 <= 32'hbf6ff573;
      100: out3 <= 32'hbf710908;
      101: out3 <= 32'hbf721352;
      102: out3 <= 32'hbf731447;
      103: out3 <= 32'hbf740bdd;
      104: out3 <= 32'hbf74fa0b;
      105: out3 <= 32'hbf75dec6;
      106: out3 <= 32'hbf76ba07;
      107: out3 <= 32'hbf778bc5;
      108: out3 <= 32'hbf7853f8;
      109: out3 <= 32'hbf791298;
      110: out3 <= 32'hbf79c79d;
      111: out3 <= 32'hbf7a7302;
      112: out3 <= 32'hbf7b14be;
      113: out3 <= 32'hbf7baccd;
      114: out3 <= 32'hbf7c3b28;
      115: out3 <= 32'hbf7cbfc9;
      116: out3 <= 32'hbf7d3aac;
      117: out3 <= 32'hbf7dabcc;
      118: out3 <= 32'hbf7e1324;
      119: out3 <= 32'hbf7e70b0;
      120: out3 <= 32'hbf7ec46d;
      121: out3 <= 32'hbf7f0e58;
      122: out3 <= 32'hbf7f4e6d;
      123: out3 <= 32'hbf7f84ab;
      124: out3 <= 32'hbf7fb10f;
      125: out3 <= 32'hbf7fd397;
      126: out3 <= 32'hbf7fec43;
      127: out3 <= 32'hbf7ffb11;
      128: out3 <= 32'hbf800000;
      129: out3 <= 32'hbf7ffb11;
      130: out3 <= 32'hbf7fec43;
      131: out3 <= 32'hbf7fd397;
      132: out3 <= 32'hbf7fb10f;
      133: out3 <= 32'hbf7f84ab;
      134: out3 <= 32'hbf7f4e6d;
      135: out3 <= 32'hbf7f0e58;
      136: out3 <= 32'hbf7ec46d;
      137: out3 <= 32'hbf7e70b0;
      138: out3 <= 32'hbf7e1324;
      139: out3 <= 32'hbf7dabcc;
      140: out3 <= 32'hbf7d3aac;
      141: out3 <= 32'hbf7cbfc9;
      142: out3 <= 32'hbf7c3b28;
      143: out3 <= 32'hbf7baccd;
      144: out3 <= 32'hbf7b14be;
      145: out3 <= 32'hbf7a7302;
      146: out3 <= 32'hbf79c79d;
      147: out3 <= 32'hbf791298;
      148: out3 <= 32'hbf7853f8;
      149: out3 <= 32'hbf778bc5;
      150: out3 <= 32'hbf76ba07;
      151: out3 <= 32'hbf75dec6;
      152: out3 <= 32'hbf74fa0b;
      153: out3 <= 32'hbf740bdd;
      154: out3 <= 32'hbf731447;
      155: out3 <= 32'hbf721352;
      156: out3 <= 32'hbf710908;
      157: out3 <= 32'hbf6ff573;
      158: out3 <= 32'hbf6ed89e;
      159: out3 <= 32'hbf6db293;
      160: out3 <= 32'hbf6c835e;
      161: out3 <= 32'hbf6b4b0c;
      162: out3 <= 32'hbf6a09a7;
      163: out3 <= 32'hbf68bf3c;
      164: out3 <= 32'hbf676bd8;
      165: out3 <= 32'hbf660f88;
      166: out3 <= 32'hbf64aa59;
      167: out3 <= 32'hbf633c5a;
      168: out3 <= 32'hbf61c598;
      169: out3 <= 32'hbf604621;
      170: out3 <= 32'hbf5ebe05;
      171: out3 <= 32'hbf5d2d53;
      172: out3 <= 32'hbf5b941a;
      173: out3 <= 32'hbf59f26a;
      174: out3 <= 32'hbf584853;
      175: out3 <= 32'hbf5695e5;
      176: out3 <= 32'hbf54db31;
      177: out3 <= 32'hbf531849;
      178: out3 <= 32'hbf514d3d;
      179: out3 <= 32'hbf4f7a1f;
      180: out3 <= 32'hbf4d9f02;
      181: out3 <= 32'hbf4bbbf8;
      182: out3 <= 32'hbf49d112;
      183: out3 <= 32'hbf47de65;
      184: out3 <= 32'hbf45e403;
      185: out3 <= 32'hbf43e200;
      186: out3 <= 32'hbf41d870;
      187: out3 <= 32'hbf3fc767;
      188: out3 <= 32'hbf3daef9;
      189: out3 <= 32'hbf3b8f3b;
      190: out3 <= 32'hbf396842;
      191: out3 <= 32'hbf373a23;
      192: out3 <= 32'hbf3504f3;
      193: out3 <= 32'hbf32c8c9;
      194: out3 <= 32'hbf3085bb;
      195: out3 <= 32'hbf2e3bde;
      196: out3 <= 32'hbf2beb4a;
      197: out3 <= 32'hbf299415;
      198: out3 <= 32'hbf273656;
      199: out3 <= 32'hbf24d225;
      200: out3 <= 32'hbf226799;
      201: out3 <= 32'hbf1ff6cb;
      202: out3 <= 32'hbf1d7fd1;
      203: out3 <= 32'hbf1b02c6;
      204: out3 <= 32'hbf187fc0;
      205: out3 <= 32'hbf15f6d9;
      206: out3 <= 32'hbf13682a;
      207: out3 <= 32'hbf10d3cd;
      208: out3 <= 32'hbf0e39da;
      209: out3 <= 32'hbf0b9a6b;
      210: out3 <= 32'hbf08f59b;
      211: out3 <= 32'hbf064b82;
      212: out3 <= 32'hbf039c3d;
      213: out3 <= 32'hbf00e7e4;
      214: out3 <= 32'hbefc5d27;
      215: out3 <= 32'hbef6e0cb;
      216: out3 <= 32'hbef15aea;
      217: out3 <= 32'hbeebcbbb;
      218: out3 <= 32'hbee63375;
      219: out3 <= 32'hbee0924f;
      220: out3 <= 32'hbedae880;
      221: out3 <= 32'hbed53641;
      222: out3 <= 32'hbecf7bca;
      223: out3 <= 32'hbec9b953;
      224: out3 <= 32'hbec3ef15;
      225: out3 <= 32'hbebe1d4a;
      226: out3 <= 32'hbeb8442a;
      227: out3 <= 32'hbeb263ef;
      228: out3 <= 32'hbeac7cd4;
      229: out3 <= 32'hbea68f12;
      230: out3 <= 32'hbea09ae5;
      231: out3 <= 32'hbe9aa086;
      232: out3 <= 32'hbe94a031;
      233: out3 <= 32'hbe8e9a22;
      234: out3 <= 32'hbe888e93;
      235: out3 <= 32'hbe827dc0;
      236: out3 <= 32'hbe78cfcc;
      237: out3 <= 32'hbe6c9a7f;
      238: out3 <= 32'hbe605c13;
      239: out3 <= 32'hbe541501;
      240: out3 <= 32'hbe47c5c2;
      241: out3 <= 32'hbe3b6ecf;
      242: out3 <= 32'hbe2f10a2;
      243: out3 <= 32'hbe22abb6;
      244: out3 <= 32'hbe164083;
      245: out3 <= 32'hbe09cf86;
      246: out3 <= 32'hbdfab273;
      247: out3 <= 32'hbde1bc2e;
      248: out3 <= 32'hbdc8bd36;
      249: out3 <= 32'hbdafb680;
      250: out3 <= 32'hbd96a905;
      251: out3 <= 32'hbd7b2b74;
      252: out3 <= 32'hbd48fb30;
      253: out3 <= 32'hbd16c32c;
      254: out3 <= 32'hbcc90ab0;
      255: out3 <= 32'hbc490e90;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D14_91574(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [7:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h3f7ffb11;
      2: out3 <= 32'h3f7fec43;
      3: out3 <= 32'h3f7fd397;
      4: out3 <= 32'h3f7fb10f;
      5: out3 <= 32'h3f7f84ab;
      6: out3 <= 32'h3f7f4e6d;
      7: out3 <= 32'h3f7f0e58;
      8: out3 <= 32'h3f7ec46d;
      9: out3 <= 32'h3f7e70b0;
      10: out3 <= 32'h3f7e1324;
      11: out3 <= 32'h3f7dabcc;
      12: out3 <= 32'h3f7d3aac;
      13: out3 <= 32'h3f7cbfc9;
      14: out3 <= 32'h3f7c3b28;
      15: out3 <= 32'h3f7baccd;
      16: out3 <= 32'h3f7b14be;
      17: out3 <= 32'h3f7a7302;
      18: out3 <= 32'h3f79c79d;
      19: out3 <= 32'h3f791298;
      20: out3 <= 32'h3f7853f8;
      21: out3 <= 32'h3f778bc5;
      22: out3 <= 32'h3f76ba07;
      23: out3 <= 32'h3f75dec6;
      24: out3 <= 32'h3f74fa0b;
      25: out3 <= 32'h3f740bdd;
      26: out3 <= 32'h3f731447;
      27: out3 <= 32'h3f721352;
      28: out3 <= 32'h3f710908;
      29: out3 <= 32'h3f6ff573;
      30: out3 <= 32'h3f6ed89e;
      31: out3 <= 32'h3f6db293;
      32: out3 <= 32'h3f6c835e;
      33: out3 <= 32'h3f6b4b0c;
      34: out3 <= 32'h3f6a09a7;
      35: out3 <= 32'h3f68bf3c;
      36: out3 <= 32'h3f676bd8;
      37: out3 <= 32'h3f660f88;
      38: out3 <= 32'h3f64aa59;
      39: out3 <= 32'h3f633c5a;
      40: out3 <= 32'h3f61c598;
      41: out3 <= 32'h3f604621;
      42: out3 <= 32'h3f5ebe05;
      43: out3 <= 32'h3f5d2d53;
      44: out3 <= 32'h3f5b941a;
      45: out3 <= 32'h3f59f26a;
      46: out3 <= 32'h3f584853;
      47: out3 <= 32'h3f5695e5;
      48: out3 <= 32'h3f54db31;
      49: out3 <= 32'h3f531849;
      50: out3 <= 32'h3f514d3d;
      51: out3 <= 32'h3f4f7a1f;
      52: out3 <= 32'h3f4d9f02;
      53: out3 <= 32'h3f4bbbf8;
      54: out3 <= 32'h3f49d112;
      55: out3 <= 32'h3f47de65;
      56: out3 <= 32'h3f45e403;
      57: out3 <= 32'h3f43e200;
      58: out3 <= 32'h3f41d870;
      59: out3 <= 32'h3f3fc767;
      60: out3 <= 32'h3f3daef9;
      61: out3 <= 32'h3f3b8f3b;
      62: out3 <= 32'h3f396842;
      63: out3 <= 32'h3f373a23;
      64: out3 <= 32'h3f3504f3;
      65: out3 <= 32'h3f32c8c9;
      66: out3 <= 32'h3f3085bb;
      67: out3 <= 32'h3f2e3bde;
      68: out3 <= 32'h3f2beb4a;
      69: out3 <= 32'h3f299415;
      70: out3 <= 32'h3f273656;
      71: out3 <= 32'h3f24d225;
      72: out3 <= 32'h3f226799;
      73: out3 <= 32'h3f1ff6cb;
      74: out3 <= 32'h3f1d7fd1;
      75: out3 <= 32'h3f1b02c6;
      76: out3 <= 32'h3f187fc0;
      77: out3 <= 32'h3f15f6d9;
      78: out3 <= 32'h3f13682a;
      79: out3 <= 32'h3f10d3cd;
      80: out3 <= 32'h3f0e39da;
      81: out3 <= 32'h3f0b9a6b;
      82: out3 <= 32'h3f08f59b;
      83: out3 <= 32'h3f064b82;
      84: out3 <= 32'h3f039c3d;
      85: out3 <= 32'h3f00e7e4;
      86: out3 <= 32'h3efc5d27;
      87: out3 <= 32'h3ef6e0cb;
      88: out3 <= 32'h3ef15aea;
      89: out3 <= 32'h3eebcbbb;
      90: out3 <= 32'h3ee63375;
      91: out3 <= 32'h3ee0924f;
      92: out3 <= 32'h3edae880;
      93: out3 <= 32'h3ed53641;
      94: out3 <= 32'h3ecf7bca;
      95: out3 <= 32'h3ec9b953;
      96: out3 <= 32'h3ec3ef15;
      97: out3 <= 32'h3ebe1d4a;
      98: out3 <= 32'h3eb8442a;
      99: out3 <= 32'h3eb263ef;
      100: out3 <= 32'h3eac7cd4;
      101: out3 <= 32'h3ea68f12;
      102: out3 <= 32'h3ea09ae5;
      103: out3 <= 32'h3e9aa086;
      104: out3 <= 32'h3e94a031;
      105: out3 <= 32'h3e8e9a22;
      106: out3 <= 32'h3e888e93;
      107: out3 <= 32'h3e827dc0;
      108: out3 <= 32'h3e78cfcc;
      109: out3 <= 32'h3e6c9a7f;
      110: out3 <= 32'h3e605c13;
      111: out3 <= 32'h3e541501;
      112: out3 <= 32'h3e47c5c2;
      113: out3 <= 32'h3e3b6ecf;
      114: out3 <= 32'h3e2f10a2;
      115: out3 <= 32'h3e22abb6;
      116: out3 <= 32'h3e164083;
      117: out3 <= 32'h3e09cf86;
      118: out3 <= 32'h3dfab273;
      119: out3 <= 32'h3de1bc2e;
      120: out3 <= 32'h3dc8bd36;
      121: out3 <= 32'h3dafb680;
      122: out3 <= 32'h3d96a905;
      123: out3 <= 32'h3d7b2b74;
      124: out3 <= 32'h3d48fb30;
      125: out3 <= 32'h3d16c32c;
      126: out3 <= 32'h3cc90ab0;
      127: out3 <= 32'h3c490e90;
      128: out3 <= 32'h0;
      129: out3 <= 32'hbc490e90;
      130: out3 <= 32'hbcc90ab0;
      131: out3 <= 32'hbd16c32c;
      132: out3 <= 32'hbd48fb30;
      133: out3 <= 32'hbd7b2b74;
      134: out3 <= 32'hbd96a905;
      135: out3 <= 32'hbdafb680;
      136: out3 <= 32'hbdc8bd36;
      137: out3 <= 32'hbde1bc2e;
      138: out3 <= 32'hbdfab273;
      139: out3 <= 32'hbe09cf86;
      140: out3 <= 32'hbe164083;
      141: out3 <= 32'hbe22abb6;
      142: out3 <= 32'hbe2f10a2;
      143: out3 <= 32'hbe3b6ecf;
      144: out3 <= 32'hbe47c5c2;
      145: out3 <= 32'hbe541501;
      146: out3 <= 32'hbe605c13;
      147: out3 <= 32'hbe6c9a7f;
      148: out3 <= 32'hbe78cfcc;
      149: out3 <= 32'hbe827dc0;
      150: out3 <= 32'hbe888e93;
      151: out3 <= 32'hbe8e9a22;
      152: out3 <= 32'hbe94a031;
      153: out3 <= 32'hbe9aa086;
      154: out3 <= 32'hbea09ae5;
      155: out3 <= 32'hbea68f12;
      156: out3 <= 32'hbeac7cd4;
      157: out3 <= 32'hbeb263ef;
      158: out3 <= 32'hbeb8442a;
      159: out3 <= 32'hbebe1d4a;
      160: out3 <= 32'hbec3ef15;
      161: out3 <= 32'hbec9b953;
      162: out3 <= 32'hbecf7bca;
      163: out3 <= 32'hbed53641;
      164: out3 <= 32'hbedae880;
      165: out3 <= 32'hbee0924f;
      166: out3 <= 32'hbee63375;
      167: out3 <= 32'hbeebcbbb;
      168: out3 <= 32'hbef15aea;
      169: out3 <= 32'hbef6e0cb;
      170: out3 <= 32'hbefc5d27;
      171: out3 <= 32'hbf00e7e4;
      172: out3 <= 32'hbf039c3d;
      173: out3 <= 32'hbf064b82;
      174: out3 <= 32'hbf08f59b;
      175: out3 <= 32'hbf0b9a6b;
      176: out3 <= 32'hbf0e39da;
      177: out3 <= 32'hbf10d3cd;
      178: out3 <= 32'hbf13682a;
      179: out3 <= 32'hbf15f6d9;
      180: out3 <= 32'hbf187fc0;
      181: out3 <= 32'hbf1b02c6;
      182: out3 <= 32'hbf1d7fd1;
      183: out3 <= 32'hbf1ff6cb;
      184: out3 <= 32'hbf226799;
      185: out3 <= 32'hbf24d225;
      186: out3 <= 32'hbf273656;
      187: out3 <= 32'hbf299415;
      188: out3 <= 32'hbf2beb4a;
      189: out3 <= 32'hbf2e3bde;
      190: out3 <= 32'hbf3085bb;
      191: out3 <= 32'hbf32c8c9;
      192: out3 <= 32'hbf3504f3;
      193: out3 <= 32'hbf373a23;
      194: out3 <= 32'hbf396842;
      195: out3 <= 32'hbf3b8f3b;
      196: out3 <= 32'hbf3daef9;
      197: out3 <= 32'hbf3fc767;
      198: out3 <= 32'hbf41d870;
      199: out3 <= 32'hbf43e200;
      200: out3 <= 32'hbf45e403;
      201: out3 <= 32'hbf47de65;
      202: out3 <= 32'hbf49d112;
      203: out3 <= 32'hbf4bbbf8;
      204: out3 <= 32'hbf4d9f02;
      205: out3 <= 32'hbf4f7a1f;
      206: out3 <= 32'hbf514d3d;
      207: out3 <= 32'hbf531849;
      208: out3 <= 32'hbf54db31;
      209: out3 <= 32'hbf5695e5;
      210: out3 <= 32'hbf584853;
      211: out3 <= 32'hbf59f26a;
      212: out3 <= 32'hbf5b941a;
      213: out3 <= 32'hbf5d2d53;
      214: out3 <= 32'hbf5ebe05;
      215: out3 <= 32'hbf604621;
      216: out3 <= 32'hbf61c598;
      217: out3 <= 32'hbf633c5a;
      218: out3 <= 32'hbf64aa59;
      219: out3 <= 32'hbf660f88;
      220: out3 <= 32'hbf676bd8;
      221: out3 <= 32'hbf68bf3c;
      222: out3 <= 32'hbf6a09a7;
      223: out3 <= 32'hbf6b4b0c;
      224: out3 <= 32'hbf6c835e;
      225: out3 <= 32'hbf6db293;
      226: out3 <= 32'hbf6ed89e;
      227: out3 <= 32'hbf6ff573;
      228: out3 <= 32'hbf710908;
      229: out3 <= 32'hbf721352;
      230: out3 <= 32'hbf731447;
      231: out3 <= 32'hbf740bdd;
      232: out3 <= 32'hbf74fa0b;
      233: out3 <= 32'hbf75dec6;
      234: out3 <= 32'hbf76ba07;
      235: out3 <= 32'hbf778bc5;
      236: out3 <= 32'hbf7853f8;
      237: out3 <= 32'hbf791298;
      238: out3 <= 32'hbf79c79d;
      239: out3 <= 32'hbf7a7302;
      240: out3 <= 32'hbf7b14be;
      241: out3 <= 32'hbf7baccd;
      242: out3 <= 32'hbf7c3b28;
      243: out3 <= 32'hbf7cbfc9;
      244: out3 <= 32'hbf7d3aac;
      245: out3 <= 32'hbf7dabcc;
      246: out3 <= 32'hbf7e1324;
      247: out3 <= 32'hbf7e70b0;
      248: out3 <= 32'hbf7ec46d;
      249: out3 <= 32'hbf7f0e58;
      250: out3 <= 32'hbf7f4e6d;
      251: out3 <= 32'hbf7f84ab;
      252: out3 <= 32'hbf7fb10f;
      253: out3 <= 32'hbf7fd397;
      254: out3 <= 32'hbf7fec43;
      255: out3 <= 32'hbf7ffb11;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 24
// Gap: 1
module codeBlock90382(clk, reset, next_in, next_out,
   i4_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [7:0] i4_in;
   reg [7:0] i4;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(23, 1) shiftFIFO_110196(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a233;
   wire signed [31:0] a222;
   wire signed [31:0] a236;
   wire signed [31:0] a226;
   wire signed [31:0] a237;
   wire signed [31:0] a238;
   reg signed [31:0] tm720;
   reg signed [31:0] tm724;
   reg signed [31:0] tm736;
   reg signed [31:0] tm759;
   reg signed [31:0] tm721;
   reg signed [31:0] tm725;
   reg signed [31:0] tm737;
   reg signed [31:0] tm760;
   wire signed [31:0] tm30;
   wire signed [31:0] a227;
   wire signed [31:0] tm31;
   wire signed [31:0] a229;
   reg signed [31:0] tm722;
   reg signed [31:0] tm726;
   reg signed [31:0] tm738;
   reg signed [31:0] tm761;
   reg signed [31:0] tm104;
   reg signed [31:0] tm105;
   reg signed [31:0] tm723;
   reg signed [31:0] tm727;
   reg signed [31:0] tm739;
   reg signed [31:0] tm762;
   reg signed [31:0] tm740;
   reg signed [31:0] tm763;
   reg signed [31:0] tm741;
   reg signed [31:0] tm764;
   reg signed [31:0] tm742;
   reg signed [31:0] tm765;
   reg signed [31:0] tm743;
   reg signed [31:0] tm766;
   reg signed [31:0] tm744;
   reg signed [31:0] tm767;
   reg signed [31:0] tm745;
   reg signed [31:0] tm768;
   reg signed [31:0] tm746;
   reg signed [31:0] tm769;
   wire  [31:0] a228;
   wire  [31:0] a230;
   wire  [31:0] a231;
   wire  [31:0] a232;
   reg signed [31:0] tm747;
   reg signed [31:0] tm770;
   reg signed [31:0] tm748;
   reg signed [31:0] tm771;
   reg signed [31:0] tm749;
   reg signed [31:0] tm772;
   reg signed [31:0] tm750;
   reg signed [31:0] tm773;
   reg signed [31:0] tm751;
   reg signed [31:0] tm774;
   reg signed [31:0] tm752;
   reg signed [31:0] tm775;
   reg signed [31:0] tm753;
   reg signed [31:0] tm776;
   reg signed [31:0] tm754;
   reg signed [31:0] tm777;
   reg signed [31:0] tm755;
   reg signed [31:0] tm778;
   reg signed [31:0] tm756;
   reg signed [31:0] tm779;
   reg signed [31:0] tm757;
   reg signed [31:0] tm780;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire  [31:0] Y2;
   wire  [31:0] Y3;
   reg signed [31:0] tm758;
   reg signed [31:0] tm781;


   assign a233 = X0;
   assign a222 = a233;
   assign a236 = X1;
   assign a226 = a236;
   assign a237 = X2;
   assign a238 = X3;
   assign a227 = tm30;
   assign a229 = tm31;
   assign Y0 = tm758;
   assign Y1 = tm781;

   D16_90800 instD16inst0_90800(.addr(i4[7:0]), .out(tm31), .clk(clk));

   D14_91574 instD14inst0_91574(.addr(i4[7:0]), .out(tm30), .clk(clk));

    multfp32fp32 m90481(.a(tm104), .b(tm723), .clk(clk), .out(a228), .enable(1'b1), .rst(reset));
    multfp32fp32 m90503(.a(tm105), .b(tm727), .clk(clk), .out(a230), .enable(1'b1), .rst(reset));
    multfp32fp32 m90521(.a(tm105), .b(tm723), .clk(clk), .out(a231), .enable(1'b1), .rst(reset));
    multfp32fp32 m90532(.a(tm104), .b(tm727), .clk(clk), .out(a232), .enable(1'b1), .rst(reset));
    subfp32 sub90510(.a(a228), .b(a230), .clk(clk), .out(Y2), .enable(1'b1), .rst(reset));
    addfp32 add90539(.a(a231), .b(a232), .clk(clk), .out(Y3), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
         tm104 <= 0;
         tm723 <= 0;
         tm105 <= 0;
         tm727 <= 0;
         tm105 <= 0;
         tm723 <= 0;
         tm104 <= 0;
         tm727 <= 0;
      end
      else begin
         i4 <= i4_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
         tm720 <= a237;
         tm724 <= a238;
         tm736 <= a222;
         tm759 <= a226;
         tm721 <= tm720;
         tm725 <= tm724;
         tm737 <= tm736;
         tm760 <= tm759;
         tm722 <= tm721;
         tm726 <= tm725;
         tm738 <= tm737;
         tm761 <= tm760;
         tm104 <= a227;
         tm105 <= a229;
         tm723 <= tm722;
         tm727 <= tm726;
         tm739 <= tm738;
         tm762 <= tm761;
         tm740 <= tm739;
         tm763 <= tm762;
         tm741 <= tm740;
         tm764 <= tm763;
         tm742 <= tm741;
         tm765 <= tm764;
         tm743 <= tm742;
         tm766 <= tm765;
         tm744 <= tm743;
         tm767 <= tm766;
         tm745 <= tm744;
         tm768 <= tm767;
         tm746 <= tm745;
         tm769 <= tm768;
         tm747 <= tm746;
         tm770 <= tm769;
         tm748 <= tm747;
         tm771 <= tm770;
         tm749 <= tm748;
         tm772 <= tm771;
         tm750 <= tm749;
         tm773 <= tm772;
         tm751 <= tm750;
         tm774 <= tm773;
         tm752 <= tm751;
         tm775 <= tm774;
         tm753 <= tm752;
         tm776 <= tm775;
         tm754 <= tm753;
         tm777 <= tm776;
         tm755 <= tm754;
         tm778 <= tm777;
         tm756 <= tm755;
         tm779 <= tm778;
         tm757 <= tm756;
         tm780 <= tm779;
         tm758 <= tm757;
         tm781 <= tm780;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock91579(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(11, 1) shiftFIFO_110199(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a189;
   wire signed [31:0] a190;
   wire signed [31:0] a191;
   wire signed [31:0] a192;
   wire  [31:0] t93;
   wire  [31:0] t94;
   wire  [31:0] t95;
   wire  [31:0] t96;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a189 = X0;
   assign a190 = X2;
   assign a191 = X1;
   assign a192 = X3;
   assign Y0 = t93;
   assign Y1 = t94;
   assign Y2 = t95;
   assign Y3 = t96;

    addfp32 add91591(.a(a189), .b(a190), .clk(clk), .out(t93), .enable(1'b1), .rst(reset));
    addfp32 add91606(.a(a191), .b(a192), .clk(clk), .out(t94), .enable(1'b1), .rst(reset));
    subfp32 sub91621(.a(a189), .b(a190), .clk(clk), .out(t95), .enable(1'b1), .rst(reset));
    subfp32 sub91636(.a(a191), .b(a192), .clk(clk), .out(t96), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 259
// Gap: 512
module rc91660(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm91658 instPerm110200(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 259
// Gap: 512
module perm91658(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 512;
   parameter logDepth = 9;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[9] ^ addr0[0];
   assign inAddr0[0] = addr0[1];
   assign inAddr0[1] = addr0[2];
   assign inAddr0[2] = addr0[3];
   assign inAddr0[3] = addr0[4];
   assign inAddr0[4] = addr0[5];
   assign inAddr0[5] = addr0[6];
   assign inAddr0[6] = addr0[7];
   assign inAddr0[7] = addr0[8];
   assign inAddr0[8] = addr0[0];
   assign outBank0[0] = addr0b[9] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outAddr0[3] = addr0b[4];
   assign outAddr0[4] = addr0b[5];
   assign outAddr0[5] = addr0b[6];
   assign outAddr0[6] = addr0b[7];
   assign outAddr0[7] = addr0b[8];
   assign outAddr0[8] = addr0b[9];
   assign outBank_a0[0] = addr0c[9] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];
   assign outAddr_a0[3] = addr0c[4];
   assign outAddr_a0[4] = addr0c[5];
   assign outAddr_a0[5] = addr0c[6];
   assign outAddr_a0[6] = addr0c[7];
   assign outAddr_a0[7] = addr0c[8];
   assign outAddr_a0[8] = addr0c[9];

   assign inBank1[0] = addr1[9] ^ addr1[0];
   assign inAddr1[0] = addr1[1];
   assign inAddr1[1] = addr1[2];
   assign inAddr1[2] = addr1[3];
   assign inAddr1[3] = addr1[4];
   assign inAddr1[4] = addr1[5];
   assign inAddr1[5] = addr1[6];
   assign inAddr1[6] = addr1[7];
   assign inAddr1[7] = addr1[8];
   assign inAddr1[8] = addr1[0];
   assign outBank1[0] = addr1b[9] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outAddr1[3] = addr1b[4];
   assign outAddr1[4] = addr1b[5];
   assign outAddr1[5] = addr1b[6];
   assign outAddr1[6] = addr1b[7];
   assign outAddr1[7] = addr1b[8];
   assign outAddr1[8] = addr1b[9];
   assign outBank_a1[0] = addr1c[9] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];
   assign outAddr_a1[3] = addr1c[4];
   assign outAddr_a1[4] = addr1c[5];
   assign outAddr_a1[5] = addr1c[6];
   assign outAddr_a1[6] = addr1c[7];
   assign outAddr_a1[7] = addr1c[8];
   assign outAddr_a1[8] = addr1c[9];

   nextReg #(257, 9) nextReg_110205(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110208(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_91658 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 256)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 258)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 256) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 511) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 256)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[8];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[8];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[8];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray1024_91658(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 512;
   parameter logDepth = 9;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   nextReg #(512, 9) nextReg_110213(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 24
// Gap: 512
module DirSum_93881(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   input clk, reset, next;

   reg [8:0] i3;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   always @(posedge clk) begin
      if (reset == 1) begin
         i3 <= 0;
      end
      else begin
         if (next == 1)
            i3 <= 0;
         else if (i3 == 511)
            i3 <= 0;
         else
            i3 <= i3 + 1;
      end
   end

   codeBlock91663 codeBlockIsnt110218(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i3_in(i3),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3));

endmodule

module D12_92337(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [8:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbbc90f88;
      2: out3 <= 32'hbc490e90;
      3: out3 <= 32'hbc96c9b6;
      4: out3 <= 32'hbcc90ab0;
      5: out3 <= 32'hbcfb49ba;
      6: out3 <= 32'hbd16c32c;
      7: out3 <= 32'hbd2fe007;
      8: out3 <= 32'hbd48fb30;
      9: out3 <= 32'hbd621469;
      10: out3 <= 32'hbd7b2b74;
      11: out3 <= 32'hbd8a200a;
      12: out3 <= 32'hbd96a905;
      13: out3 <= 32'hbda3308c;
      14: out3 <= 32'hbdafb680;
      15: out3 <= 32'hbdbc3ac3;
      16: out3 <= 32'hbdc8bd36;
      17: out3 <= 32'hbdd53db9;
      18: out3 <= 32'hbde1bc2e;
      19: out3 <= 32'hbdee3876;
      20: out3 <= 32'hbdfab273;
      21: out3 <= 32'hbe039502;
      22: out3 <= 32'hbe09cf86;
      23: out3 <= 32'hbe1008b7;
      24: out3 <= 32'hbe164083;
      25: out3 <= 32'hbe1c76de;
      26: out3 <= 32'hbe22abb6;
      27: out3 <= 32'hbe28defc;
      28: out3 <= 32'hbe2f10a2;
      29: out3 <= 32'hbe354098;
      30: out3 <= 32'hbe3b6ecf;
      31: out3 <= 32'hbe419b37;
      32: out3 <= 32'hbe47c5c2;
      33: out3 <= 32'hbe4dee60;
      34: out3 <= 32'hbe541501;
      35: out3 <= 32'hbe5a3997;
      36: out3 <= 32'hbe605c13;
      37: out3 <= 32'hbe667c66;
      38: out3 <= 32'hbe6c9a7f;
      39: out3 <= 32'hbe72b651;
      40: out3 <= 32'hbe78cfcc;
      41: out3 <= 32'hbe7ee6e1;
      42: out3 <= 32'hbe827dc0;
      43: out3 <= 32'hbe8586ce;
      44: out3 <= 32'hbe888e93;
      45: out3 <= 32'hbe8b9507;
      46: out3 <= 32'hbe8e9a22;
      47: out3 <= 32'hbe919ddd;
      48: out3 <= 32'hbe94a031;
      49: out3 <= 32'hbe97a117;
      50: out3 <= 32'hbe9aa086;
      51: out3 <= 32'hbe9d9e78;
      52: out3 <= 32'hbea09ae5;
      53: out3 <= 32'hbea395c5;
      54: out3 <= 32'hbea68f12;
      55: out3 <= 32'hbea986c4;
      56: out3 <= 32'hbeac7cd4;
      57: out3 <= 32'hbeaf713a;
      58: out3 <= 32'hbeb263ef;
      59: out3 <= 32'hbeb554ec;
      60: out3 <= 32'hbeb8442a;
      61: out3 <= 32'hbebb31a0;
      62: out3 <= 32'hbebe1d4a;
      63: out3 <= 32'hbec1071e;
      64: out3 <= 32'hbec3ef15;
      65: out3 <= 32'hbec6d529;
      66: out3 <= 32'hbec9b953;
      67: out3 <= 32'hbecc9b8b;
      68: out3 <= 32'hbecf7bca;
      69: out3 <= 32'hbed25a09;
      70: out3 <= 32'hbed53641;
      71: out3 <= 32'hbed8106b;
      72: out3 <= 32'hbedae880;
      73: out3 <= 32'hbeddbe79;
      74: out3 <= 32'hbee0924f;
      75: out3 <= 32'hbee363fa;
      76: out3 <= 32'hbee63375;
      77: out3 <= 32'hbee900b7;
      78: out3 <= 32'hbeebcbbb;
      79: out3 <= 32'hbeee9479;
      80: out3 <= 32'hbef15aea;
      81: out3 <= 32'hbef41f07;
      82: out3 <= 32'hbef6e0cb;
      83: out3 <= 32'hbef9a02d;
      84: out3 <= 32'hbefc5d27;
      85: out3 <= 32'hbeff17b2;
      86: out3 <= 32'hbf00e7e4;
      87: out3 <= 32'hbf0242b1;
      88: out3 <= 32'hbf039c3d;
      89: out3 <= 32'hbf04f484;
      90: out3 <= 32'hbf064b82;
      91: out3 <= 32'hbf07a136;
      92: out3 <= 32'hbf08f59b;
      93: out3 <= 32'hbf0a48ad;
      94: out3 <= 32'hbf0b9a6b;
      95: out3 <= 32'hbf0cead0;
      96: out3 <= 32'hbf0e39da;
      97: out3 <= 32'hbf0f8784;
      98: out3 <= 32'hbf10d3cd;
      99: out3 <= 32'hbf121eb0;
      100: out3 <= 32'hbf13682a;
      101: out3 <= 32'hbf14b039;
      102: out3 <= 32'hbf15f6d9;
      103: out3 <= 32'hbf173c07;
      104: out3 <= 32'hbf187fc0;
      105: out3 <= 32'hbf19c200;
      106: out3 <= 32'hbf1b02c6;
      107: out3 <= 32'hbf1c420c;
      108: out3 <= 32'hbf1d7fd1;
      109: out3 <= 32'hbf1ebc12;
      110: out3 <= 32'hbf1ff6cb;
      111: out3 <= 32'hbf212ff9;
      112: out3 <= 32'hbf226799;
      113: out3 <= 32'hbf239da9;
      114: out3 <= 32'hbf24d225;
      115: out3 <= 32'hbf26050a;
      116: out3 <= 32'hbf273656;
      117: out3 <= 32'hbf286605;
      118: out3 <= 32'hbf299415;
      119: out3 <= 32'hbf2ac082;
      120: out3 <= 32'hbf2beb4a;
      121: out3 <= 32'hbf2d1469;
      122: out3 <= 32'hbf2e3bde;
      123: out3 <= 32'hbf2f61a5;
      124: out3 <= 32'hbf3085bb;
      125: out3 <= 32'hbf31a81d;
      126: out3 <= 32'hbf32c8c9;
      127: out3 <= 32'hbf33e7bc;
      128: out3 <= 32'hbf3504f3;
      129: out3 <= 32'hbf36206c;
      130: out3 <= 32'hbf373a23;
      131: out3 <= 32'hbf385216;
      132: out3 <= 32'hbf396842;
      133: out3 <= 32'hbf3a7ca4;
      134: out3 <= 32'hbf3b8f3b;
      135: out3 <= 32'hbf3ca003;
      136: out3 <= 32'hbf3daef9;
      137: out3 <= 32'hbf3ebc1b;
      138: out3 <= 32'hbf3fc767;
      139: out3 <= 32'hbf40d0da;
      140: out3 <= 32'hbf41d870;
      141: out3 <= 32'hbf42de29;
      142: out3 <= 32'hbf43e200;
      143: out3 <= 32'hbf44e3f5;
      144: out3 <= 32'hbf45e403;
      145: out3 <= 32'hbf46e22a;
      146: out3 <= 32'hbf47de65;
      147: out3 <= 32'hbf48d8b3;
      148: out3 <= 32'hbf49d112;
      149: out3 <= 32'hbf4ac77f;
      150: out3 <= 32'hbf4bbbf8;
      151: out3 <= 32'hbf4cae79;
      152: out3 <= 32'hbf4d9f02;
      153: out3 <= 32'hbf4e8d90;
      154: out3 <= 32'hbf4f7a1f;
      155: out3 <= 32'hbf5064af;
      156: out3 <= 32'hbf514d3d;
      157: out3 <= 32'hbf5233c6;
      158: out3 <= 32'hbf531849;
      159: out3 <= 32'hbf53fac3;
      160: out3 <= 32'hbf54db31;
      161: out3 <= 32'hbf55b993;
      162: out3 <= 32'hbf5695e5;
      163: out3 <= 32'hbf577026;
      164: out3 <= 32'hbf584853;
      165: out3 <= 32'hbf591e6a;
      166: out3 <= 32'hbf59f26a;
      167: out3 <= 32'hbf5ac450;
      168: out3 <= 32'hbf5b941a;
      169: out3 <= 32'hbf5c61c7;
      170: out3 <= 32'hbf5d2d53;
      171: out3 <= 32'hbf5df6be;
      172: out3 <= 32'hbf5ebe05;
      173: out3 <= 32'hbf5f8327;
      174: out3 <= 32'hbf604621;
      175: out3 <= 32'hbf6106f2;
      176: out3 <= 32'hbf61c598;
      177: out3 <= 32'hbf628210;
      178: out3 <= 32'hbf633c5a;
      179: out3 <= 32'hbf63f473;
      180: out3 <= 32'hbf64aa59;
      181: out3 <= 32'hbf655e0b;
      182: out3 <= 32'hbf660f88;
      183: out3 <= 32'hbf66becc;
      184: out3 <= 32'hbf676bd8;
      185: out3 <= 32'hbf6816a8;
      186: out3 <= 32'hbf68bf3c;
      187: out3 <= 32'hbf696591;
      188: out3 <= 32'hbf6a09a7;
      189: out3 <= 32'hbf6aab7b;
      190: out3 <= 32'hbf6b4b0c;
      191: out3 <= 32'hbf6be858;
      192: out3 <= 32'hbf6c835e;
      193: out3 <= 32'hbf6d1c1d;
      194: out3 <= 32'hbf6db293;
      195: out3 <= 32'hbf6e46be;
      196: out3 <= 32'hbf6ed89e;
      197: out3 <= 32'hbf6f6830;
      198: out3 <= 32'hbf6ff573;
      199: out3 <= 32'hbf708066;
      200: out3 <= 32'hbf710908;
      201: out3 <= 32'hbf718f57;
      202: out3 <= 32'hbf721352;
      203: out3 <= 32'hbf7294f8;
      204: out3 <= 32'hbf731447;
      205: out3 <= 32'hbf73913f;
      206: out3 <= 32'hbf740bdd;
      207: out3 <= 32'hbf748422;
      208: out3 <= 32'hbf74fa0b;
      209: out3 <= 32'hbf756d97;
      210: out3 <= 32'hbf75dec6;
      211: out3 <= 32'hbf764d97;
      212: out3 <= 32'hbf76ba07;
      213: out3 <= 32'hbf772417;
      214: out3 <= 32'hbf778bc5;
      215: out3 <= 32'hbf77f110;
      216: out3 <= 32'hbf7853f8;
      217: out3 <= 32'hbf78b47b;
      218: out3 <= 32'hbf791298;
      219: out3 <= 32'hbf796e4e;
      220: out3 <= 32'hbf79c79d;
      221: out3 <= 32'hbf7a1e84;
      222: out3 <= 32'hbf7a7302;
      223: out3 <= 32'hbf7ac516;
      224: out3 <= 32'hbf7b14be;
      225: out3 <= 32'hbf7b61fc;
      226: out3 <= 32'hbf7baccd;
      227: out3 <= 32'hbf7bf531;
      228: out3 <= 32'hbf7c3b28;
      229: out3 <= 32'hbf7c7eb0;
      230: out3 <= 32'hbf7cbfc9;
      231: out3 <= 32'hbf7cfe73;
      232: out3 <= 32'hbf7d3aac;
      233: out3 <= 32'hbf7d7474;
      234: out3 <= 32'hbf7dabcc;
      235: out3 <= 32'hbf7de0b1;
      236: out3 <= 32'hbf7e1324;
      237: out3 <= 32'hbf7e4323;
      238: out3 <= 32'hbf7e70b0;
      239: out3 <= 32'hbf7e9bc9;
      240: out3 <= 32'hbf7ec46d;
      241: out3 <= 32'hbf7eea9d;
      242: out3 <= 32'hbf7f0e58;
      243: out3 <= 32'hbf7f2f9d;
      244: out3 <= 32'hbf7f4e6d;
      245: out3 <= 32'hbf7f6ac7;
      246: out3 <= 32'hbf7f84ab;
      247: out3 <= 32'hbf7f9c18;
      248: out3 <= 32'hbf7fb10f;
      249: out3 <= 32'hbf7fc38f;
      250: out3 <= 32'hbf7fd397;
      251: out3 <= 32'hbf7fe129;
      252: out3 <= 32'hbf7fec43;
      253: out3 <= 32'hbf7ff4e6;
      254: out3 <= 32'hbf7ffb11;
      255: out3 <= 32'hbf7ffec4;
      256: out3 <= 32'hbf800000;
      257: out3 <= 32'hbf7ffec4;
      258: out3 <= 32'hbf7ffb11;
      259: out3 <= 32'hbf7ff4e6;
      260: out3 <= 32'hbf7fec43;
      261: out3 <= 32'hbf7fe129;
      262: out3 <= 32'hbf7fd397;
      263: out3 <= 32'hbf7fc38f;
      264: out3 <= 32'hbf7fb10f;
      265: out3 <= 32'hbf7f9c18;
      266: out3 <= 32'hbf7f84ab;
      267: out3 <= 32'hbf7f6ac7;
      268: out3 <= 32'hbf7f4e6d;
      269: out3 <= 32'hbf7f2f9d;
      270: out3 <= 32'hbf7f0e58;
      271: out3 <= 32'hbf7eea9d;
      272: out3 <= 32'hbf7ec46d;
      273: out3 <= 32'hbf7e9bc9;
      274: out3 <= 32'hbf7e70b0;
      275: out3 <= 32'hbf7e4323;
      276: out3 <= 32'hbf7e1324;
      277: out3 <= 32'hbf7de0b1;
      278: out3 <= 32'hbf7dabcc;
      279: out3 <= 32'hbf7d7474;
      280: out3 <= 32'hbf7d3aac;
      281: out3 <= 32'hbf7cfe73;
      282: out3 <= 32'hbf7cbfc9;
      283: out3 <= 32'hbf7c7eb0;
      284: out3 <= 32'hbf7c3b28;
      285: out3 <= 32'hbf7bf531;
      286: out3 <= 32'hbf7baccd;
      287: out3 <= 32'hbf7b61fc;
      288: out3 <= 32'hbf7b14be;
      289: out3 <= 32'hbf7ac516;
      290: out3 <= 32'hbf7a7302;
      291: out3 <= 32'hbf7a1e84;
      292: out3 <= 32'hbf79c79d;
      293: out3 <= 32'hbf796e4e;
      294: out3 <= 32'hbf791298;
      295: out3 <= 32'hbf78b47b;
      296: out3 <= 32'hbf7853f8;
      297: out3 <= 32'hbf77f110;
      298: out3 <= 32'hbf778bc5;
      299: out3 <= 32'hbf772417;
      300: out3 <= 32'hbf76ba07;
      301: out3 <= 32'hbf764d97;
      302: out3 <= 32'hbf75dec6;
      303: out3 <= 32'hbf756d97;
      304: out3 <= 32'hbf74fa0b;
      305: out3 <= 32'hbf748422;
      306: out3 <= 32'hbf740bdd;
      307: out3 <= 32'hbf73913f;
      308: out3 <= 32'hbf731447;
      309: out3 <= 32'hbf7294f8;
      310: out3 <= 32'hbf721352;
      311: out3 <= 32'hbf718f57;
      312: out3 <= 32'hbf710908;
      313: out3 <= 32'hbf708066;
      314: out3 <= 32'hbf6ff573;
      315: out3 <= 32'hbf6f6830;
      316: out3 <= 32'hbf6ed89e;
      317: out3 <= 32'hbf6e46be;
      318: out3 <= 32'hbf6db293;
      319: out3 <= 32'hbf6d1c1d;
      320: out3 <= 32'hbf6c835e;
      321: out3 <= 32'hbf6be858;
      322: out3 <= 32'hbf6b4b0c;
      323: out3 <= 32'hbf6aab7b;
      324: out3 <= 32'hbf6a09a7;
      325: out3 <= 32'hbf696591;
      326: out3 <= 32'hbf68bf3c;
      327: out3 <= 32'hbf6816a8;
      328: out3 <= 32'hbf676bd8;
      329: out3 <= 32'hbf66becc;
      330: out3 <= 32'hbf660f88;
      331: out3 <= 32'hbf655e0b;
      332: out3 <= 32'hbf64aa59;
      333: out3 <= 32'hbf63f473;
      334: out3 <= 32'hbf633c5a;
      335: out3 <= 32'hbf628210;
      336: out3 <= 32'hbf61c598;
      337: out3 <= 32'hbf6106f2;
      338: out3 <= 32'hbf604621;
      339: out3 <= 32'hbf5f8327;
      340: out3 <= 32'hbf5ebe05;
      341: out3 <= 32'hbf5df6be;
      342: out3 <= 32'hbf5d2d53;
      343: out3 <= 32'hbf5c61c7;
      344: out3 <= 32'hbf5b941a;
      345: out3 <= 32'hbf5ac450;
      346: out3 <= 32'hbf59f26a;
      347: out3 <= 32'hbf591e6a;
      348: out3 <= 32'hbf584853;
      349: out3 <= 32'hbf577026;
      350: out3 <= 32'hbf5695e5;
      351: out3 <= 32'hbf55b993;
      352: out3 <= 32'hbf54db31;
      353: out3 <= 32'hbf53fac3;
      354: out3 <= 32'hbf531849;
      355: out3 <= 32'hbf5233c6;
      356: out3 <= 32'hbf514d3d;
      357: out3 <= 32'hbf5064af;
      358: out3 <= 32'hbf4f7a1f;
      359: out3 <= 32'hbf4e8d90;
      360: out3 <= 32'hbf4d9f02;
      361: out3 <= 32'hbf4cae79;
      362: out3 <= 32'hbf4bbbf8;
      363: out3 <= 32'hbf4ac77f;
      364: out3 <= 32'hbf49d112;
      365: out3 <= 32'hbf48d8b3;
      366: out3 <= 32'hbf47de65;
      367: out3 <= 32'hbf46e22a;
      368: out3 <= 32'hbf45e403;
      369: out3 <= 32'hbf44e3f5;
      370: out3 <= 32'hbf43e200;
      371: out3 <= 32'hbf42de29;
      372: out3 <= 32'hbf41d870;
      373: out3 <= 32'hbf40d0da;
      374: out3 <= 32'hbf3fc767;
      375: out3 <= 32'hbf3ebc1b;
      376: out3 <= 32'hbf3daef9;
      377: out3 <= 32'hbf3ca003;
      378: out3 <= 32'hbf3b8f3b;
      379: out3 <= 32'hbf3a7ca4;
      380: out3 <= 32'hbf396842;
      381: out3 <= 32'hbf385216;
      382: out3 <= 32'hbf373a23;
      383: out3 <= 32'hbf36206c;
      384: out3 <= 32'hbf3504f3;
      385: out3 <= 32'hbf33e7bc;
      386: out3 <= 32'hbf32c8c9;
      387: out3 <= 32'hbf31a81d;
      388: out3 <= 32'hbf3085bb;
      389: out3 <= 32'hbf2f61a5;
      390: out3 <= 32'hbf2e3bde;
      391: out3 <= 32'hbf2d1469;
      392: out3 <= 32'hbf2beb4a;
      393: out3 <= 32'hbf2ac082;
      394: out3 <= 32'hbf299415;
      395: out3 <= 32'hbf286605;
      396: out3 <= 32'hbf273656;
      397: out3 <= 32'hbf26050a;
      398: out3 <= 32'hbf24d225;
      399: out3 <= 32'hbf239da9;
      400: out3 <= 32'hbf226799;
      401: out3 <= 32'hbf212ff9;
      402: out3 <= 32'hbf1ff6cb;
      403: out3 <= 32'hbf1ebc12;
      404: out3 <= 32'hbf1d7fd1;
      405: out3 <= 32'hbf1c420c;
      406: out3 <= 32'hbf1b02c6;
      407: out3 <= 32'hbf19c200;
      408: out3 <= 32'hbf187fc0;
      409: out3 <= 32'hbf173c07;
      410: out3 <= 32'hbf15f6d9;
      411: out3 <= 32'hbf14b039;
      412: out3 <= 32'hbf13682a;
      413: out3 <= 32'hbf121eb0;
      414: out3 <= 32'hbf10d3cd;
      415: out3 <= 32'hbf0f8784;
      416: out3 <= 32'hbf0e39da;
      417: out3 <= 32'hbf0cead0;
      418: out3 <= 32'hbf0b9a6b;
      419: out3 <= 32'hbf0a48ad;
      420: out3 <= 32'hbf08f59b;
      421: out3 <= 32'hbf07a136;
      422: out3 <= 32'hbf064b82;
      423: out3 <= 32'hbf04f484;
      424: out3 <= 32'hbf039c3d;
      425: out3 <= 32'hbf0242b1;
      426: out3 <= 32'hbf00e7e4;
      427: out3 <= 32'hbeff17b2;
      428: out3 <= 32'hbefc5d27;
      429: out3 <= 32'hbef9a02d;
      430: out3 <= 32'hbef6e0cb;
      431: out3 <= 32'hbef41f07;
      432: out3 <= 32'hbef15aea;
      433: out3 <= 32'hbeee9479;
      434: out3 <= 32'hbeebcbbb;
      435: out3 <= 32'hbee900b7;
      436: out3 <= 32'hbee63375;
      437: out3 <= 32'hbee363fa;
      438: out3 <= 32'hbee0924f;
      439: out3 <= 32'hbeddbe79;
      440: out3 <= 32'hbedae880;
      441: out3 <= 32'hbed8106b;
      442: out3 <= 32'hbed53641;
      443: out3 <= 32'hbed25a09;
      444: out3 <= 32'hbecf7bca;
      445: out3 <= 32'hbecc9b8b;
      446: out3 <= 32'hbec9b953;
      447: out3 <= 32'hbec6d529;
      448: out3 <= 32'hbec3ef15;
      449: out3 <= 32'hbec1071e;
      450: out3 <= 32'hbebe1d4a;
      451: out3 <= 32'hbebb31a0;
      452: out3 <= 32'hbeb8442a;
      453: out3 <= 32'hbeb554ec;
      454: out3 <= 32'hbeb263ef;
      455: out3 <= 32'hbeaf713a;
      456: out3 <= 32'hbeac7cd4;
      457: out3 <= 32'hbea986c4;
      458: out3 <= 32'hbea68f12;
      459: out3 <= 32'hbea395c5;
      460: out3 <= 32'hbea09ae5;
      461: out3 <= 32'hbe9d9e78;
      462: out3 <= 32'hbe9aa086;
      463: out3 <= 32'hbe97a117;
      464: out3 <= 32'hbe94a031;
      465: out3 <= 32'hbe919ddd;
      466: out3 <= 32'hbe8e9a22;
      467: out3 <= 32'hbe8b9507;
      468: out3 <= 32'hbe888e93;
      469: out3 <= 32'hbe8586ce;
      470: out3 <= 32'hbe827dc0;
      471: out3 <= 32'hbe7ee6e1;
      472: out3 <= 32'hbe78cfcc;
      473: out3 <= 32'hbe72b651;
      474: out3 <= 32'hbe6c9a7f;
      475: out3 <= 32'hbe667c66;
      476: out3 <= 32'hbe605c13;
      477: out3 <= 32'hbe5a3997;
      478: out3 <= 32'hbe541501;
      479: out3 <= 32'hbe4dee60;
      480: out3 <= 32'hbe47c5c2;
      481: out3 <= 32'hbe419b37;
      482: out3 <= 32'hbe3b6ecf;
      483: out3 <= 32'hbe354098;
      484: out3 <= 32'hbe2f10a2;
      485: out3 <= 32'hbe28defc;
      486: out3 <= 32'hbe22abb6;
      487: out3 <= 32'hbe1c76de;
      488: out3 <= 32'hbe164083;
      489: out3 <= 32'hbe1008b7;
      490: out3 <= 32'hbe09cf86;
      491: out3 <= 32'hbe039502;
      492: out3 <= 32'hbdfab273;
      493: out3 <= 32'hbdee3876;
      494: out3 <= 32'hbde1bc2e;
      495: out3 <= 32'hbdd53db9;
      496: out3 <= 32'hbdc8bd36;
      497: out3 <= 32'hbdbc3ac3;
      498: out3 <= 32'hbdafb680;
      499: out3 <= 32'hbda3308c;
      500: out3 <= 32'hbd96a905;
      501: out3 <= 32'hbd8a200a;
      502: out3 <= 32'hbd7b2b74;
      503: out3 <= 32'hbd621469;
      504: out3 <= 32'hbd48fb30;
      505: out3 <= 32'hbd2fe007;
      506: out3 <= 32'hbd16c32c;
      507: out3 <= 32'hbcfb49ba;
      508: out3 <= 32'hbcc90ab0;
      509: out3 <= 32'hbc96c9b6;
      510: out3 <= 32'hbc490e90;
      511: out3 <= 32'hbbc90f88;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D10_92851(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [8:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h3f7ffec4;
      2: out3 <= 32'h3f7ffb11;
      3: out3 <= 32'h3f7ff4e6;
      4: out3 <= 32'h3f7fec43;
      5: out3 <= 32'h3f7fe129;
      6: out3 <= 32'h3f7fd397;
      7: out3 <= 32'h3f7fc38f;
      8: out3 <= 32'h3f7fb10f;
      9: out3 <= 32'h3f7f9c18;
      10: out3 <= 32'h3f7f84ab;
      11: out3 <= 32'h3f7f6ac7;
      12: out3 <= 32'h3f7f4e6d;
      13: out3 <= 32'h3f7f2f9d;
      14: out3 <= 32'h3f7f0e58;
      15: out3 <= 32'h3f7eea9d;
      16: out3 <= 32'h3f7ec46d;
      17: out3 <= 32'h3f7e9bc9;
      18: out3 <= 32'h3f7e70b0;
      19: out3 <= 32'h3f7e4323;
      20: out3 <= 32'h3f7e1324;
      21: out3 <= 32'h3f7de0b1;
      22: out3 <= 32'h3f7dabcc;
      23: out3 <= 32'h3f7d7474;
      24: out3 <= 32'h3f7d3aac;
      25: out3 <= 32'h3f7cfe73;
      26: out3 <= 32'h3f7cbfc9;
      27: out3 <= 32'h3f7c7eb0;
      28: out3 <= 32'h3f7c3b28;
      29: out3 <= 32'h3f7bf531;
      30: out3 <= 32'h3f7baccd;
      31: out3 <= 32'h3f7b61fc;
      32: out3 <= 32'h3f7b14be;
      33: out3 <= 32'h3f7ac516;
      34: out3 <= 32'h3f7a7302;
      35: out3 <= 32'h3f7a1e84;
      36: out3 <= 32'h3f79c79d;
      37: out3 <= 32'h3f796e4e;
      38: out3 <= 32'h3f791298;
      39: out3 <= 32'h3f78b47b;
      40: out3 <= 32'h3f7853f8;
      41: out3 <= 32'h3f77f110;
      42: out3 <= 32'h3f778bc5;
      43: out3 <= 32'h3f772417;
      44: out3 <= 32'h3f76ba07;
      45: out3 <= 32'h3f764d97;
      46: out3 <= 32'h3f75dec6;
      47: out3 <= 32'h3f756d97;
      48: out3 <= 32'h3f74fa0b;
      49: out3 <= 32'h3f748422;
      50: out3 <= 32'h3f740bdd;
      51: out3 <= 32'h3f73913f;
      52: out3 <= 32'h3f731447;
      53: out3 <= 32'h3f7294f8;
      54: out3 <= 32'h3f721352;
      55: out3 <= 32'h3f718f57;
      56: out3 <= 32'h3f710908;
      57: out3 <= 32'h3f708066;
      58: out3 <= 32'h3f6ff573;
      59: out3 <= 32'h3f6f6830;
      60: out3 <= 32'h3f6ed89e;
      61: out3 <= 32'h3f6e46be;
      62: out3 <= 32'h3f6db293;
      63: out3 <= 32'h3f6d1c1d;
      64: out3 <= 32'h3f6c835e;
      65: out3 <= 32'h3f6be858;
      66: out3 <= 32'h3f6b4b0c;
      67: out3 <= 32'h3f6aab7b;
      68: out3 <= 32'h3f6a09a7;
      69: out3 <= 32'h3f696591;
      70: out3 <= 32'h3f68bf3c;
      71: out3 <= 32'h3f6816a8;
      72: out3 <= 32'h3f676bd8;
      73: out3 <= 32'h3f66becc;
      74: out3 <= 32'h3f660f88;
      75: out3 <= 32'h3f655e0b;
      76: out3 <= 32'h3f64aa59;
      77: out3 <= 32'h3f63f473;
      78: out3 <= 32'h3f633c5a;
      79: out3 <= 32'h3f628210;
      80: out3 <= 32'h3f61c598;
      81: out3 <= 32'h3f6106f2;
      82: out3 <= 32'h3f604621;
      83: out3 <= 32'h3f5f8327;
      84: out3 <= 32'h3f5ebe05;
      85: out3 <= 32'h3f5df6be;
      86: out3 <= 32'h3f5d2d53;
      87: out3 <= 32'h3f5c61c7;
      88: out3 <= 32'h3f5b941a;
      89: out3 <= 32'h3f5ac450;
      90: out3 <= 32'h3f59f26a;
      91: out3 <= 32'h3f591e6a;
      92: out3 <= 32'h3f584853;
      93: out3 <= 32'h3f577026;
      94: out3 <= 32'h3f5695e5;
      95: out3 <= 32'h3f55b993;
      96: out3 <= 32'h3f54db31;
      97: out3 <= 32'h3f53fac3;
      98: out3 <= 32'h3f531849;
      99: out3 <= 32'h3f5233c6;
      100: out3 <= 32'h3f514d3d;
      101: out3 <= 32'h3f5064af;
      102: out3 <= 32'h3f4f7a1f;
      103: out3 <= 32'h3f4e8d90;
      104: out3 <= 32'h3f4d9f02;
      105: out3 <= 32'h3f4cae79;
      106: out3 <= 32'h3f4bbbf8;
      107: out3 <= 32'h3f4ac77f;
      108: out3 <= 32'h3f49d112;
      109: out3 <= 32'h3f48d8b3;
      110: out3 <= 32'h3f47de65;
      111: out3 <= 32'h3f46e22a;
      112: out3 <= 32'h3f45e403;
      113: out3 <= 32'h3f44e3f5;
      114: out3 <= 32'h3f43e200;
      115: out3 <= 32'h3f42de29;
      116: out3 <= 32'h3f41d870;
      117: out3 <= 32'h3f40d0da;
      118: out3 <= 32'h3f3fc767;
      119: out3 <= 32'h3f3ebc1b;
      120: out3 <= 32'h3f3daef9;
      121: out3 <= 32'h3f3ca003;
      122: out3 <= 32'h3f3b8f3b;
      123: out3 <= 32'h3f3a7ca4;
      124: out3 <= 32'h3f396842;
      125: out3 <= 32'h3f385216;
      126: out3 <= 32'h3f373a23;
      127: out3 <= 32'h3f36206c;
      128: out3 <= 32'h3f3504f3;
      129: out3 <= 32'h3f33e7bc;
      130: out3 <= 32'h3f32c8c9;
      131: out3 <= 32'h3f31a81d;
      132: out3 <= 32'h3f3085bb;
      133: out3 <= 32'h3f2f61a5;
      134: out3 <= 32'h3f2e3bde;
      135: out3 <= 32'h3f2d1469;
      136: out3 <= 32'h3f2beb4a;
      137: out3 <= 32'h3f2ac082;
      138: out3 <= 32'h3f299415;
      139: out3 <= 32'h3f286605;
      140: out3 <= 32'h3f273656;
      141: out3 <= 32'h3f26050a;
      142: out3 <= 32'h3f24d225;
      143: out3 <= 32'h3f239da9;
      144: out3 <= 32'h3f226799;
      145: out3 <= 32'h3f212ff9;
      146: out3 <= 32'h3f1ff6cb;
      147: out3 <= 32'h3f1ebc12;
      148: out3 <= 32'h3f1d7fd1;
      149: out3 <= 32'h3f1c420c;
      150: out3 <= 32'h3f1b02c6;
      151: out3 <= 32'h3f19c200;
      152: out3 <= 32'h3f187fc0;
      153: out3 <= 32'h3f173c07;
      154: out3 <= 32'h3f15f6d9;
      155: out3 <= 32'h3f14b039;
      156: out3 <= 32'h3f13682a;
      157: out3 <= 32'h3f121eb0;
      158: out3 <= 32'h3f10d3cd;
      159: out3 <= 32'h3f0f8784;
      160: out3 <= 32'h3f0e39da;
      161: out3 <= 32'h3f0cead0;
      162: out3 <= 32'h3f0b9a6b;
      163: out3 <= 32'h3f0a48ad;
      164: out3 <= 32'h3f08f59b;
      165: out3 <= 32'h3f07a136;
      166: out3 <= 32'h3f064b82;
      167: out3 <= 32'h3f04f484;
      168: out3 <= 32'h3f039c3d;
      169: out3 <= 32'h3f0242b1;
      170: out3 <= 32'h3f00e7e4;
      171: out3 <= 32'h3eff17b2;
      172: out3 <= 32'h3efc5d27;
      173: out3 <= 32'h3ef9a02d;
      174: out3 <= 32'h3ef6e0cb;
      175: out3 <= 32'h3ef41f07;
      176: out3 <= 32'h3ef15aea;
      177: out3 <= 32'h3eee9479;
      178: out3 <= 32'h3eebcbbb;
      179: out3 <= 32'h3ee900b7;
      180: out3 <= 32'h3ee63375;
      181: out3 <= 32'h3ee363fa;
      182: out3 <= 32'h3ee0924f;
      183: out3 <= 32'h3eddbe79;
      184: out3 <= 32'h3edae880;
      185: out3 <= 32'h3ed8106b;
      186: out3 <= 32'h3ed53641;
      187: out3 <= 32'h3ed25a09;
      188: out3 <= 32'h3ecf7bca;
      189: out3 <= 32'h3ecc9b8b;
      190: out3 <= 32'h3ec9b953;
      191: out3 <= 32'h3ec6d529;
      192: out3 <= 32'h3ec3ef15;
      193: out3 <= 32'h3ec1071e;
      194: out3 <= 32'h3ebe1d4a;
      195: out3 <= 32'h3ebb31a0;
      196: out3 <= 32'h3eb8442a;
      197: out3 <= 32'h3eb554ec;
      198: out3 <= 32'h3eb263ef;
      199: out3 <= 32'h3eaf713a;
      200: out3 <= 32'h3eac7cd4;
      201: out3 <= 32'h3ea986c4;
      202: out3 <= 32'h3ea68f12;
      203: out3 <= 32'h3ea395c5;
      204: out3 <= 32'h3ea09ae5;
      205: out3 <= 32'h3e9d9e78;
      206: out3 <= 32'h3e9aa086;
      207: out3 <= 32'h3e97a117;
      208: out3 <= 32'h3e94a031;
      209: out3 <= 32'h3e919ddd;
      210: out3 <= 32'h3e8e9a22;
      211: out3 <= 32'h3e8b9507;
      212: out3 <= 32'h3e888e93;
      213: out3 <= 32'h3e8586ce;
      214: out3 <= 32'h3e827dc0;
      215: out3 <= 32'h3e7ee6e1;
      216: out3 <= 32'h3e78cfcc;
      217: out3 <= 32'h3e72b651;
      218: out3 <= 32'h3e6c9a7f;
      219: out3 <= 32'h3e667c66;
      220: out3 <= 32'h3e605c13;
      221: out3 <= 32'h3e5a3997;
      222: out3 <= 32'h3e541501;
      223: out3 <= 32'h3e4dee60;
      224: out3 <= 32'h3e47c5c2;
      225: out3 <= 32'h3e419b37;
      226: out3 <= 32'h3e3b6ecf;
      227: out3 <= 32'h3e354098;
      228: out3 <= 32'h3e2f10a2;
      229: out3 <= 32'h3e28defc;
      230: out3 <= 32'h3e22abb6;
      231: out3 <= 32'h3e1c76de;
      232: out3 <= 32'h3e164083;
      233: out3 <= 32'h3e1008b7;
      234: out3 <= 32'h3e09cf86;
      235: out3 <= 32'h3e039502;
      236: out3 <= 32'h3dfab273;
      237: out3 <= 32'h3dee3876;
      238: out3 <= 32'h3de1bc2e;
      239: out3 <= 32'h3dd53db9;
      240: out3 <= 32'h3dc8bd36;
      241: out3 <= 32'h3dbc3ac3;
      242: out3 <= 32'h3dafb680;
      243: out3 <= 32'h3da3308c;
      244: out3 <= 32'h3d96a905;
      245: out3 <= 32'h3d8a200a;
      246: out3 <= 32'h3d7b2b74;
      247: out3 <= 32'h3d621469;
      248: out3 <= 32'h3d48fb30;
      249: out3 <= 32'h3d2fe007;
      250: out3 <= 32'h3d16c32c;
      251: out3 <= 32'h3cfb49ba;
      252: out3 <= 32'h3cc90ab0;
      253: out3 <= 32'h3c96c9b6;
      254: out3 <= 32'h3c490e90;
      255: out3 <= 32'h3bc90f88;
      256: out3 <= 32'h0;
      257: out3 <= 32'hbbc90f88;
      258: out3 <= 32'hbc490e90;
      259: out3 <= 32'hbc96c9b6;
      260: out3 <= 32'hbcc90ab0;
      261: out3 <= 32'hbcfb49ba;
      262: out3 <= 32'hbd16c32c;
      263: out3 <= 32'hbd2fe007;
      264: out3 <= 32'hbd48fb30;
      265: out3 <= 32'hbd621469;
      266: out3 <= 32'hbd7b2b74;
      267: out3 <= 32'hbd8a200a;
      268: out3 <= 32'hbd96a905;
      269: out3 <= 32'hbda3308c;
      270: out3 <= 32'hbdafb680;
      271: out3 <= 32'hbdbc3ac3;
      272: out3 <= 32'hbdc8bd36;
      273: out3 <= 32'hbdd53db9;
      274: out3 <= 32'hbde1bc2e;
      275: out3 <= 32'hbdee3876;
      276: out3 <= 32'hbdfab273;
      277: out3 <= 32'hbe039502;
      278: out3 <= 32'hbe09cf86;
      279: out3 <= 32'hbe1008b7;
      280: out3 <= 32'hbe164083;
      281: out3 <= 32'hbe1c76de;
      282: out3 <= 32'hbe22abb6;
      283: out3 <= 32'hbe28defc;
      284: out3 <= 32'hbe2f10a2;
      285: out3 <= 32'hbe354098;
      286: out3 <= 32'hbe3b6ecf;
      287: out3 <= 32'hbe419b37;
      288: out3 <= 32'hbe47c5c2;
      289: out3 <= 32'hbe4dee60;
      290: out3 <= 32'hbe541501;
      291: out3 <= 32'hbe5a3997;
      292: out3 <= 32'hbe605c13;
      293: out3 <= 32'hbe667c66;
      294: out3 <= 32'hbe6c9a7f;
      295: out3 <= 32'hbe72b651;
      296: out3 <= 32'hbe78cfcc;
      297: out3 <= 32'hbe7ee6e1;
      298: out3 <= 32'hbe827dc0;
      299: out3 <= 32'hbe8586ce;
      300: out3 <= 32'hbe888e93;
      301: out3 <= 32'hbe8b9507;
      302: out3 <= 32'hbe8e9a22;
      303: out3 <= 32'hbe919ddd;
      304: out3 <= 32'hbe94a031;
      305: out3 <= 32'hbe97a117;
      306: out3 <= 32'hbe9aa086;
      307: out3 <= 32'hbe9d9e78;
      308: out3 <= 32'hbea09ae5;
      309: out3 <= 32'hbea395c5;
      310: out3 <= 32'hbea68f12;
      311: out3 <= 32'hbea986c4;
      312: out3 <= 32'hbeac7cd4;
      313: out3 <= 32'hbeaf713a;
      314: out3 <= 32'hbeb263ef;
      315: out3 <= 32'hbeb554ec;
      316: out3 <= 32'hbeb8442a;
      317: out3 <= 32'hbebb31a0;
      318: out3 <= 32'hbebe1d4a;
      319: out3 <= 32'hbec1071e;
      320: out3 <= 32'hbec3ef15;
      321: out3 <= 32'hbec6d529;
      322: out3 <= 32'hbec9b953;
      323: out3 <= 32'hbecc9b8b;
      324: out3 <= 32'hbecf7bca;
      325: out3 <= 32'hbed25a09;
      326: out3 <= 32'hbed53641;
      327: out3 <= 32'hbed8106b;
      328: out3 <= 32'hbedae880;
      329: out3 <= 32'hbeddbe79;
      330: out3 <= 32'hbee0924f;
      331: out3 <= 32'hbee363fa;
      332: out3 <= 32'hbee63375;
      333: out3 <= 32'hbee900b7;
      334: out3 <= 32'hbeebcbbb;
      335: out3 <= 32'hbeee9479;
      336: out3 <= 32'hbef15aea;
      337: out3 <= 32'hbef41f07;
      338: out3 <= 32'hbef6e0cb;
      339: out3 <= 32'hbef9a02d;
      340: out3 <= 32'hbefc5d27;
      341: out3 <= 32'hbeff17b2;
      342: out3 <= 32'hbf00e7e4;
      343: out3 <= 32'hbf0242b1;
      344: out3 <= 32'hbf039c3d;
      345: out3 <= 32'hbf04f484;
      346: out3 <= 32'hbf064b82;
      347: out3 <= 32'hbf07a136;
      348: out3 <= 32'hbf08f59b;
      349: out3 <= 32'hbf0a48ad;
      350: out3 <= 32'hbf0b9a6b;
      351: out3 <= 32'hbf0cead0;
      352: out3 <= 32'hbf0e39da;
      353: out3 <= 32'hbf0f8784;
      354: out3 <= 32'hbf10d3cd;
      355: out3 <= 32'hbf121eb0;
      356: out3 <= 32'hbf13682a;
      357: out3 <= 32'hbf14b039;
      358: out3 <= 32'hbf15f6d9;
      359: out3 <= 32'hbf173c07;
      360: out3 <= 32'hbf187fc0;
      361: out3 <= 32'hbf19c200;
      362: out3 <= 32'hbf1b02c6;
      363: out3 <= 32'hbf1c420c;
      364: out3 <= 32'hbf1d7fd1;
      365: out3 <= 32'hbf1ebc12;
      366: out3 <= 32'hbf1ff6cb;
      367: out3 <= 32'hbf212ff9;
      368: out3 <= 32'hbf226799;
      369: out3 <= 32'hbf239da9;
      370: out3 <= 32'hbf24d225;
      371: out3 <= 32'hbf26050a;
      372: out3 <= 32'hbf273656;
      373: out3 <= 32'hbf286605;
      374: out3 <= 32'hbf299415;
      375: out3 <= 32'hbf2ac082;
      376: out3 <= 32'hbf2beb4a;
      377: out3 <= 32'hbf2d1469;
      378: out3 <= 32'hbf2e3bde;
      379: out3 <= 32'hbf2f61a5;
      380: out3 <= 32'hbf3085bb;
      381: out3 <= 32'hbf31a81d;
      382: out3 <= 32'hbf32c8c9;
      383: out3 <= 32'hbf33e7bc;
      384: out3 <= 32'hbf3504f3;
      385: out3 <= 32'hbf36206c;
      386: out3 <= 32'hbf373a23;
      387: out3 <= 32'hbf385216;
      388: out3 <= 32'hbf396842;
      389: out3 <= 32'hbf3a7ca4;
      390: out3 <= 32'hbf3b8f3b;
      391: out3 <= 32'hbf3ca003;
      392: out3 <= 32'hbf3daef9;
      393: out3 <= 32'hbf3ebc1b;
      394: out3 <= 32'hbf3fc767;
      395: out3 <= 32'hbf40d0da;
      396: out3 <= 32'hbf41d870;
      397: out3 <= 32'hbf42de29;
      398: out3 <= 32'hbf43e200;
      399: out3 <= 32'hbf44e3f5;
      400: out3 <= 32'hbf45e403;
      401: out3 <= 32'hbf46e22a;
      402: out3 <= 32'hbf47de65;
      403: out3 <= 32'hbf48d8b3;
      404: out3 <= 32'hbf49d112;
      405: out3 <= 32'hbf4ac77f;
      406: out3 <= 32'hbf4bbbf8;
      407: out3 <= 32'hbf4cae79;
      408: out3 <= 32'hbf4d9f02;
      409: out3 <= 32'hbf4e8d90;
      410: out3 <= 32'hbf4f7a1f;
      411: out3 <= 32'hbf5064af;
      412: out3 <= 32'hbf514d3d;
      413: out3 <= 32'hbf5233c6;
      414: out3 <= 32'hbf531849;
      415: out3 <= 32'hbf53fac3;
      416: out3 <= 32'hbf54db31;
      417: out3 <= 32'hbf55b993;
      418: out3 <= 32'hbf5695e5;
      419: out3 <= 32'hbf577026;
      420: out3 <= 32'hbf584853;
      421: out3 <= 32'hbf591e6a;
      422: out3 <= 32'hbf59f26a;
      423: out3 <= 32'hbf5ac450;
      424: out3 <= 32'hbf5b941a;
      425: out3 <= 32'hbf5c61c7;
      426: out3 <= 32'hbf5d2d53;
      427: out3 <= 32'hbf5df6be;
      428: out3 <= 32'hbf5ebe05;
      429: out3 <= 32'hbf5f8327;
      430: out3 <= 32'hbf604621;
      431: out3 <= 32'hbf6106f2;
      432: out3 <= 32'hbf61c598;
      433: out3 <= 32'hbf628210;
      434: out3 <= 32'hbf633c5a;
      435: out3 <= 32'hbf63f473;
      436: out3 <= 32'hbf64aa59;
      437: out3 <= 32'hbf655e0b;
      438: out3 <= 32'hbf660f88;
      439: out3 <= 32'hbf66becc;
      440: out3 <= 32'hbf676bd8;
      441: out3 <= 32'hbf6816a8;
      442: out3 <= 32'hbf68bf3c;
      443: out3 <= 32'hbf696591;
      444: out3 <= 32'hbf6a09a7;
      445: out3 <= 32'hbf6aab7b;
      446: out3 <= 32'hbf6b4b0c;
      447: out3 <= 32'hbf6be858;
      448: out3 <= 32'hbf6c835e;
      449: out3 <= 32'hbf6d1c1d;
      450: out3 <= 32'hbf6db293;
      451: out3 <= 32'hbf6e46be;
      452: out3 <= 32'hbf6ed89e;
      453: out3 <= 32'hbf6f6830;
      454: out3 <= 32'hbf6ff573;
      455: out3 <= 32'hbf708066;
      456: out3 <= 32'hbf710908;
      457: out3 <= 32'hbf718f57;
      458: out3 <= 32'hbf721352;
      459: out3 <= 32'hbf7294f8;
      460: out3 <= 32'hbf731447;
      461: out3 <= 32'hbf73913f;
      462: out3 <= 32'hbf740bdd;
      463: out3 <= 32'hbf748422;
      464: out3 <= 32'hbf74fa0b;
      465: out3 <= 32'hbf756d97;
      466: out3 <= 32'hbf75dec6;
      467: out3 <= 32'hbf764d97;
      468: out3 <= 32'hbf76ba07;
      469: out3 <= 32'hbf772417;
      470: out3 <= 32'hbf778bc5;
      471: out3 <= 32'hbf77f110;
      472: out3 <= 32'hbf7853f8;
      473: out3 <= 32'hbf78b47b;
      474: out3 <= 32'hbf791298;
      475: out3 <= 32'hbf796e4e;
      476: out3 <= 32'hbf79c79d;
      477: out3 <= 32'hbf7a1e84;
      478: out3 <= 32'hbf7a7302;
      479: out3 <= 32'hbf7ac516;
      480: out3 <= 32'hbf7b14be;
      481: out3 <= 32'hbf7b61fc;
      482: out3 <= 32'hbf7baccd;
      483: out3 <= 32'hbf7bf531;
      484: out3 <= 32'hbf7c3b28;
      485: out3 <= 32'hbf7c7eb0;
      486: out3 <= 32'hbf7cbfc9;
      487: out3 <= 32'hbf7cfe73;
      488: out3 <= 32'hbf7d3aac;
      489: out3 <= 32'hbf7d7474;
      490: out3 <= 32'hbf7dabcc;
      491: out3 <= 32'hbf7de0b1;
      492: out3 <= 32'hbf7e1324;
      493: out3 <= 32'hbf7e4323;
      494: out3 <= 32'hbf7e70b0;
      495: out3 <= 32'hbf7e9bc9;
      496: out3 <= 32'hbf7ec46d;
      497: out3 <= 32'hbf7eea9d;
      498: out3 <= 32'hbf7f0e58;
      499: out3 <= 32'hbf7f2f9d;
      500: out3 <= 32'hbf7f4e6d;
      501: out3 <= 32'hbf7f6ac7;
      502: out3 <= 32'hbf7f84ab;
      503: out3 <= 32'hbf7f9c18;
      504: out3 <= 32'hbf7fb10f;
      505: out3 <= 32'hbf7fc38f;
      506: out3 <= 32'hbf7fd397;
      507: out3 <= 32'hbf7fe129;
      508: out3 <= 32'hbf7fec43;
      509: out3 <= 32'hbf7ff4e6;
      510: out3 <= 32'hbf7ffb11;
      511: out3 <= 32'hbf7ffec4;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 24
// Gap: 1
module codeBlock91663(clk, reset, next_in, next_out,
   i3_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [8:0] i3_in;
   reg [8:0] i3;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(23, 1) shiftFIFO_110221(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a173;
   wire signed [31:0] a162;
   wire signed [31:0] a176;
   wire signed [31:0] a166;
   wire signed [31:0] a177;
   wire signed [31:0] a178;
   reg signed [31:0] tm782;
   reg signed [31:0] tm786;
   reg signed [31:0] tm798;
   reg signed [31:0] tm821;
   reg signed [31:0] tm783;
   reg signed [31:0] tm787;
   reg signed [31:0] tm799;
   reg signed [31:0] tm822;
   wire signed [31:0] tm34;
   wire signed [31:0] a167;
   wire signed [31:0] tm35;
   wire signed [31:0] a169;
   reg signed [31:0] tm784;
   reg signed [31:0] tm788;
   reg signed [31:0] tm800;
   reg signed [31:0] tm823;
   reg signed [31:0] tm112;
   reg signed [31:0] tm113;
   reg signed [31:0] tm785;
   reg signed [31:0] tm789;
   reg signed [31:0] tm801;
   reg signed [31:0] tm824;
   reg signed [31:0] tm802;
   reg signed [31:0] tm825;
   reg signed [31:0] tm803;
   reg signed [31:0] tm826;
   reg signed [31:0] tm804;
   reg signed [31:0] tm827;
   reg signed [31:0] tm805;
   reg signed [31:0] tm828;
   reg signed [31:0] tm806;
   reg signed [31:0] tm829;
   reg signed [31:0] tm807;
   reg signed [31:0] tm830;
   reg signed [31:0] tm808;
   reg signed [31:0] tm831;
   wire  [31:0] a168;
   wire  [31:0] a170;
   wire  [31:0] a171;
   wire  [31:0] a172;
   reg signed [31:0] tm809;
   reg signed [31:0] tm832;
   reg signed [31:0] tm810;
   reg signed [31:0] tm833;
   reg signed [31:0] tm811;
   reg signed [31:0] tm834;
   reg signed [31:0] tm812;
   reg signed [31:0] tm835;
   reg signed [31:0] tm813;
   reg signed [31:0] tm836;
   reg signed [31:0] tm814;
   reg signed [31:0] tm837;
   reg signed [31:0] tm815;
   reg signed [31:0] tm838;
   reg signed [31:0] tm816;
   reg signed [31:0] tm839;
   reg signed [31:0] tm817;
   reg signed [31:0] tm840;
   reg signed [31:0] tm818;
   reg signed [31:0] tm841;
   reg signed [31:0] tm819;
   reg signed [31:0] tm842;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire  [31:0] Y2;
   wire  [31:0] Y3;
   reg signed [31:0] tm820;
   reg signed [31:0] tm843;


   assign a173 = X0;
   assign a162 = a173;
   assign a176 = X1;
   assign a166 = a176;
   assign a177 = X2;
   assign a178 = X3;
   assign a167 = tm34;
   assign a169 = tm35;
   assign Y0 = tm820;
   assign Y1 = tm843;

   D12_92337 instD12inst0_92337(.addr(i3[8:0]), .out(tm35), .clk(clk));

   D10_92851 instD10inst0_92851(.addr(i3[8:0]), .out(tm34), .clk(clk));

    multfp32fp32 m91762(.a(tm112), .b(tm785), .clk(clk), .out(a168), .enable(1'b1), .rst(reset));
    multfp32fp32 m91784(.a(tm113), .b(tm789), .clk(clk), .out(a170), .enable(1'b1), .rst(reset));
    multfp32fp32 m91802(.a(tm113), .b(tm785), .clk(clk), .out(a171), .enable(1'b1), .rst(reset));
    multfp32fp32 m91813(.a(tm112), .b(tm789), .clk(clk), .out(a172), .enable(1'b1), .rst(reset));
    subfp32 sub91791(.a(a168), .b(a170), .clk(clk), .out(Y2), .enable(1'b1), .rst(reset));
    addfp32 add91820(.a(a171), .b(a172), .clk(clk), .out(Y3), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
         tm112 <= 0;
         tm785 <= 0;
         tm113 <= 0;
         tm789 <= 0;
         tm113 <= 0;
         tm785 <= 0;
         tm112 <= 0;
         tm789 <= 0;
      end
      else begin
         i3 <= i3_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
         tm782 <= a177;
         tm786 <= a178;
         tm798 <= a162;
         tm821 <= a166;
         tm783 <= tm782;
         tm787 <= tm786;
         tm799 <= tm798;
         tm822 <= tm821;
         tm784 <= tm783;
         tm788 <= tm787;
         tm800 <= tm799;
         tm823 <= tm822;
         tm112 <= a167;
         tm113 <= a169;
         tm785 <= tm784;
         tm789 <= tm788;
         tm801 <= tm800;
         tm824 <= tm823;
         tm802 <= tm801;
         tm825 <= tm824;
         tm803 <= tm802;
         tm826 <= tm825;
         tm804 <= tm803;
         tm827 <= tm826;
         tm805 <= tm804;
         tm828 <= tm827;
         tm806 <= tm805;
         tm829 <= tm828;
         tm807 <= tm806;
         tm830 <= tm829;
         tm808 <= tm807;
         tm831 <= tm830;
         tm809 <= tm808;
         tm832 <= tm831;
         tm810 <= tm809;
         tm833 <= tm832;
         tm811 <= tm810;
         tm834 <= tm833;
         tm812 <= tm811;
         tm835 <= tm834;
         tm813 <= tm812;
         tm836 <= tm835;
         tm814 <= tm813;
         tm837 <= tm836;
         tm815 <= tm814;
         tm838 <= tm837;
         tm816 <= tm815;
         tm839 <= tm838;
         tm817 <= tm816;
         tm840 <= tm839;
         tm818 <= tm817;
         tm841 <= tm840;
         tm819 <= tm818;
         tm842 <= tm841;
         tm820 <= tm819;
         tm843 <= tm842;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock93884(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(11, 1) shiftFIFO_110224(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a129;
   wire signed [31:0] a130;
   wire signed [31:0] a131;
   wire signed [31:0] a132;
   wire  [31:0] t69;
   wire  [31:0] t70;
   wire  [31:0] t71;
   wire  [31:0] t72;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a129 = X0;
   assign a130 = X2;
   assign a131 = X1;
   assign a132 = X3;
   assign Y0 = t69;
   assign Y1 = t70;
   assign Y2 = t71;
   assign Y3 = t72;

    addfp32 add93896(.a(a129), .b(a130), .clk(clk), .out(t69), .enable(1'b1), .rst(reset));
    addfp32 add93911(.a(a131), .b(a132), .clk(clk), .out(t70), .enable(1'b1), .rst(reset));
    subfp32 sub93926(.a(a129), .b(a130), .clk(clk), .out(t71), .enable(1'b1), .rst(reset));
    subfp32 sub93941(.a(a131), .b(a132), .clk(clk), .out(t72), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 515
// Gap: 1024
module rc93965(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm93963 instPerm110225(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 515
// Gap: 1024
module perm93963(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 1024;
   parameter logDepth = 10;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[10] ^ addr0[0];
   assign inAddr0[0] = addr0[1];
   assign inAddr0[1] = addr0[2];
   assign inAddr0[2] = addr0[3];
   assign inAddr0[3] = addr0[4];
   assign inAddr0[4] = addr0[5];
   assign inAddr0[5] = addr0[6];
   assign inAddr0[6] = addr0[7];
   assign inAddr0[7] = addr0[8];
   assign inAddr0[8] = addr0[9];
   assign inAddr0[9] = addr0[0];
   assign outBank0[0] = addr0b[10] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outAddr0[3] = addr0b[4];
   assign outAddr0[4] = addr0b[5];
   assign outAddr0[5] = addr0b[6];
   assign outAddr0[6] = addr0b[7];
   assign outAddr0[7] = addr0b[8];
   assign outAddr0[8] = addr0b[9];
   assign outAddr0[9] = addr0b[10];
   assign outBank_a0[0] = addr0c[10] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];
   assign outAddr_a0[3] = addr0c[4];
   assign outAddr_a0[4] = addr0c[5];
   assign outAddr_a0[5] = addr0c[6];
   assign outAddr_a0[6] = addr0c[7];
   assign outAddr_a0[7] = addr0c[8];
   assign outAddr_a0[8] = addr0c[9];
   assign outAddr_a0[9] = addr0c[10];

   assign inBank1[0] = addr1[10] ^ addr1[0];
   assign inAddr1[0] = addr1[1];
   assign inAddr1[1] = addr1[2];
   assign inAddr1[2] = addr1[3];
   assign inAddr1[3] = addr1[4];
   assign inAddr1[4] = addr1[5];
   assign inAddr1[5] = addr1[6];
   assign inAddr1[6] = addr1[7];
   assign inAddr1[7] = addr1[8];
   assign inAddr1[8] = addr1[9];
   assign inAddr1[9] = addr1[0];
   assign outBank1[0] = addr1b[10] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outAddr1[3] = addr1b[4];
   assign outAddr1[4] = addr1b[5];
   assign outAddr1[5] = addr1b[6];
   assign outAddr1[6] = addr1b[7];
   assign outAddr1[7] = addr1b[8];
   assign outAddr1[8] = addr1b[9];
   assign outAddr1[9] = addr1b[10];
   assign outBank_a1[0] = addr1c[10] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];
   assign outAddr_a1[3] = addr1c[4];
   assign outAddr_a1[4] = addr1c[5];
   assign outAddr_a1[5] = addr1c[6];
   assign outAddr_a1[6] = addr1c[7];
   assign outAddr_a1[7] = addr1c[8];
   assign outAddr_a1[8] = addr1c[9];
   assign outAddr_a1[9] = addr1c[10];

   nextReg #(513, 10) nextReg_110230(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110233(.X(next0), .Y(next_out), .clk(clk));


   memArray2048_93963 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 512)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 514)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 512) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 1023) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 512)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[9];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[9];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[9];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray2048_93963(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 1024;
   parameter logDepth = 10;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   nextReg #(1024, 10) nextReg_110238(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 24
// Gap: 1024
module DirSum_98234(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   input clk, reset, next;

   reg [9:0] i2;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 1023)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock93968 codeBlockIsnt110243(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3));

endmodule

module D8_95154(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [9:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbb490fc6;
      2: out3 <= 32'hbbc90f88;
      3: out3 <= 32'hbc16cb58;
      4: out3 <= 32'hbc490e90;
      5: out3 <= 32'hbc7b514b;
      6: out3 <= 32'hbc96c9b6;
      7: out3 <= 32'hbcafea69;
      8: out3 <= 32'hbcc90ab0;
      9: out3 <= 32'hbce22a7a;
      10: out3 <= 32'hbcfb49ba;
      11: out3 <= 32'hbd0a342f;
      12: out3 <= 32'hbd16c32c;
      13: out3 <= 32'hbd2351cb;
      14: out3 <= 32'hbd2fe007;
      15: out3 <= 32'hbd3c6dd5;
      16: out3 <= 32'hbd48fb30;
      17: out3 <= 32'hbd55880e;
      18: out3 <= 32'hbd621469;
      19: out3 <= 32'hbd6ea038;
      20: out3 <= 32'hbd7b2b74;
      21: out3 <= 32'hbd83db0a;
      22: out3 <= 32'hbd8a200a;
      23: out3 <= 32'hbd9064b4;
      24: out3 <= 32'hbd96a905;
      25: out3 <= 32'hbd9cecf9;
      26: out3 <= 32'hbda3308c;
      27: out3 <= 32'hbda973ba;
      28: out3 <= 32'hbdafb680;
      29: out3 <= 32'hbdb5f8da;
      30: out3 <= 32'hbdbc3ac3;
      31: out3 <= 32'hbdc27c39;
      32: out3 <= 32'hbdc8bd36;
      33: out3 <= 32'hbdcefdb7;
      34: out3 <= 32'hbdd53db9;
      35: out3 <= 32'hbddb7d37;
      36: out3 <= 32'hbde1bc2e;
      37: out3 <= 32'hbde7fa9a;
      38: out3 <= 32'hbdee3876;
      39: out3 <= 32'hbdf475c0;
      40: out3 <= 32'hbdfab273;
      41: out3 <= 32'hbe007745;
      42: out3 <= 32'hbe039502;
      43: out3 <= 32'hbe06b26e;
      44: out3 <= 32'hbe09cf86;
      45: out3 <= 32'hbe0cec4a;
      46: out3 <= 32'hbe1008b7;
      47: out3 <= 32'hbe1324ca;
      48: out3 <= 32'hbe164083;
      49: out3 <= 32'hbe195be0;
      50: out3 <= 32'hbe1c76de;
      51: out3 <= 32'hbe1f917b;
      52: out3 <= 32'hbe22abb6;
      53: out3 <= 32'hbe25c58c;
      54: out3 <= 32'hbe28defc;
      55: out3 <= 32'hbe2bf804;
      56: out3 <= 32'hbe2f10a2;
      57: out3 <= 32'hbe3228d4;
      58: out3 <= 32'hbe354098;
      59: out3 <= 32'hbe3857ec;
      60: out3 <= 32'hbe3b6ecf;
      61: out3 <= 32'hbe3e853e;
      62: out3 <= 32'hbe419b37;
      63: out3 <= 32'hbe44b0b9;
      64: out3 <= 32'hbe47c5c2;
      65: out3 <= 32'hbe4ada4f;
      66: out3 <= 32'hbe4dee60;
      67: out3 <= 32'hbe5101f1;
      68: out3 <= 32'hbe541501;
      69: out3 <= 32'hbe57278f;
      70: out3 <= 32'hbe5a3997;
      71: out3 <= 32'hbe5d4b1a;
      72: out3 <= 32'hbe605c13;
      73: out3 <= 32'hbe636c83;
      74: out3 <= 32'hbe667c66;
      75: out3 <= 32'hbe698bba;
      76: out3 <= 32'hbe6c9a7f;
      77: out3 <= 32'hbe6fa8b2;
      78: out3 <= 32'hbe72b651;
      79: out3 <= 32'hbe75c35a;
      80: out3 <= 32'hbe78cfcc;
      81: out3 <= 32'hbe7bdba4;
      82: out3 <= 32'hbe7ee6e1;
      83: out3 <= 32'hbe80f8c0;
      84: out3 <= 32'hbe827dc0;
      85: out3 <= 32'hbe840270;
      86: out3 <= 32'hbe8586ce;
      87: out3 <= 32'hbe870ada;
      88: out3 <= 32'hbe888e93;
      89: out3 <= 32'hbe8a11f7;
      90: out3 <= 32'hbe8b9507;
      91: out3 <= 32'hbe8d17c0;
      92: out3 <= 32'hbe8e9a22;
      93: out3 <= 32'hbe901c2c;
      94: out3 <= 32'hbe919ddd;
      95: out3 <= 32'hbe931f35;
      96: out3 <= 32'hbe94a031;
      97: out3 <= 32'hbe9620d2;
      98: out3 <= 32'hbe97a117;
      99: out3 <= 32'hbe9920fe;
      100: out3 <= 32'hbe9aa086;
      101: out3 <= 32'hbe9c1faf;
      102: out3 <= 32'hbe9d9e78;
      103: out3 <= 32'hbe9f1cdf;
      104: out3 <= 32'hbea09ae5;
      105: out3 <= 32'hbea21887;
      106: out3 <= 32'hbea395c5;
      107: out3 <= 32'hbea5129f;
      108: out3 <= 32'hbea68f12;
      109: out3 <= 32'hbea80b1f;
      110: out3 <= 32'hbea986c4;
      111: out3 <= 32'hbeab0201;
      112: out3 <= 32'hbeac7cd4;
      113: out3 <= 32'hbeadf73c;
      114: out3 <= 32'hbeaf713a;
      115: out3 <= 32'hbeb0eacb;
      116: out3 <= 32'hbeb263ef;
      117: out3 <= 32'hbeb3dca5;
      118: out3 <= 32'hbeb554ec;
      119: out3 <= 32'hbeb6ccc3;
      120: out3 <= 32'hbeb8442a;
      121: out3 <= 32'hbeb9bb1e;
      122: out3 <= 32'hbebb31a0;
      123: out3 <= 32'hbebca7af;
      124: out3 <= 32'hbebe1d4a;
      125: out3 <= 32'hbebf926f;
      126: out3 <= 32'hbec1071e;
      127: out3 <= 32'hbec27b55;
      128: out3 <= 32'hbec3ef15;
      129: out3 <= 32'hbec5625c;
      130: out3 <= 32'hbec6d529;
      131: out3 <= 32'hbec8477c;
      132: out3 <= 32'hbec9b953;
      133: out3 <= 32'hbecb2aae;
      134: out3 <= 32'hbecc9b8b;
      135: out3 <= 32'hbece0bea;
      136: out3 <= 32'hbecf7bca;
      137: out3 <= 32'hbed0eb2a;
      138: out3 <= 32'hbed25a09;
      139: out3 <= 32'hbed3c867;
      140: out3 <= 32'hbed53641;
      141: out3 <= 32'hbed6a399;
      142: out3 <= 32'hbed8106b;
      143: out3 <= 32'hbed97cb9;
      144: out3 <= 32'hbedae880;
      145: out3 <= 32'hbedc53c1;
      146: out3 <= 32'hbeddbe79;
      147: out3 <= 32'hbedf28a9;
      148: out3 <= 32'hbee0924f;
      149: out3 <= 32'hbee1fb6a;
      150: out3 <= 32'hbee363fa;
      151: out3 <= 32'hbee4cbfe;
      152: out3 <= 32'hbee63375;
      153: out3 <= 32'hbee79a5d;
      154: out3 <= 32'hbee900b7;
      155: out3 <= 32'hbeea6681;
      156: out3 <= 32'hbeebcbbb;
      157: out3 <= 32'hbeed3063;
      158: out3 <= 32'hbeee9479;
      159: out3 <= 32'hbeeff7fb;
      160: out3 <= 32'hbef15aea;
      161: out3 <= 32'hbef2bd43;
      162: out3 <= 32'hbef41f07;
      163: out3 <= 32'hbef58035;
      164: out3 <= 32'hbef6e0cb;
      165: out3 <= 32'hbef840c8;
      166: out3 <= 32'hbef9a02d;
      167: out3 <= 32'hbefafef7;
      168: out3 <= 32'hbefc5d27;
      169: out3 <= 32'hbefdbabb;
      170: out3 <= 32'hbeff17b2;
      171: out3 <= 32'hbf003a06;
      172: out3 <= 32'hbf00e7e4;
      173: out3 <= 32'hbf019573;
      174: out3 <= 32'hbf0242b1;
      175: out3 <= 32'hbf02ef9f;
      176: out3 <= 32'hbf039c3d;
      177: out3 <= 32'hbf044889;
      178: out3 <= 32'hbf04f484;
      179: out3 <= 32'hbf05a02c;
      180: out3 <= 32'hbf064b82;
      181: out3 <= 32'hbf06f686;
      182: out3 <= 32'hbf07a136;
      183: out3 <= 32'hbf084b92;
      184: out3 <= 32'hbf08f59b;
      185: out3 <= 32'hbf099f4e;
      186: out3 <= 32'hbf0a48ad;
      187: out3 <= 32'hbf0af1b7;
      188: out3 <= 32'hbf0b9a6b;
      189: out3 <= 32'hbf0c42c9;
      190: out3 <= 32'hbf0cead0;
      191: out3 <= 32'hbf0d9281;
      192: out3 <= 32'hbf0e39da;
      193: out3 <= 32'hbf0ee0db;
      194: out3 <= 32'hbf0f8784;
      195: out3 <= 32'hbf102dd5;
      196: out3 <= 32'hbf10d3cd;
      197: out3 <= 32'hbf11796b;
      198: out3 <= 32'hbf121eb0;
      199: out3 <= 32'hbf12c39a;
      200: out3 <= 32'hbf13682a;
      201: out3 <= 32'hbf140c5f;
      202: out3 <= 32'hbf14b039;
      203: out3 <= 32'hbf1553b7;
      204: out3 <= 32'hbf15f6d9;
      205: out3 <= 32'hbf16999f;
      206: out3 <= 32'hbf173c07;
      207: out3 <= 32'hbf17de12;
      208: out3 <= 32'hbf187fc0;
      209: out3 <= 32'hbf19210f;
      210: out3 <= 32'hbf19c200;
      211: out3 <= 32'hbf1a6293;
      212: out3 <= 32'hbf1b02c6;
      213: out3 <= 32'hbf1ba299;
      214: out3 <= 32'hbf1c420c;
      215: out3 <= 32'hbf1ce11f;
      216: out3 <= 32'hbf1d7fd1;
      217: out3 <= 32'hbf1e1e22;
      218: out3 <= 32'hbf1ebc12;
      219: out3 <= 32'hbf1f599f;
      220: out3 <= 32'hbf1ff6cb;
      221: out3 <= 32'hbf209393;
      222: out3 <= 32'hbf212ff9;
      223: out3 <= 32'hbf21cbfb;
      224: out3 <= 32'hbf226799;
      225: out3 <= 32'hbf2302d3;
      226: out3 <= 32'hbf239da9;
      227: out3 <= 32'hbf24381a;
      228: out3 <= 32'hbf24d225;
      229: out3 <= 32'hbf256bcb;
      230: out3 <= 32'hbf26050a;
      231: out3 <= 32'hbf269de3;
      232: out3 <= 32'hbf273656;
      233: out3 <= 32'hbf27ce61;
      234: out3 <= 32'hbf286605;
      235: out3 <= 32'hbf28fd41;
      236: out3 <= 32'hbf299415;
      237: out3 <= 32'hbf2a2a80;
      238: out3 <= 32'hbf2ac082;
      239: out3 <= 32'hbf2b561b;
      240: out3 <= 32'hbf2beb4a;
      241: out3 <= 32'hbf2c800f;
      242: out3 <= 32'hbf2d1469;
      243: out3 <= 32'hbf2da859;
      244: out3 <= 32'hbf2e3bde;
      245: out3 <= 32'hbf2ecef7;
      246: out3 <= 32'hbf2f61a5;
      247: out3 <= 32'hbf2ff3e6;
      248: out3 <= 32'hbf3085bb;
      249: out3 <= 32'hbf311722;
      250: out3 <= 32'hbf31a81d;
      251: out3 <= 32'hbf3238aa;
      252: out3 <= 32'hbf32c8c9;
      253: out3 <= 32'hbf33587a;
      254: out3 <= 32'hbf33e7bc;
      255: out3 <= 32'hbf34768f;
      256: out3 <= 32'hbf3504f3;
      257: out3 <= 32'hbf3592e7;
      258: out3 <= 32'hbf36206c;
      259: out3 <= 32'hbf36ad7f;
      260: out3 <= 32'hbf373a23;
      261: out3 <= 32'hbf37c655;
      262: out3 <= 32'hbf385216;
      263: out3 <= 32'hbf38dd65;
      264: out3 <= 32'hbf396842;
      265: out3 <= 32'hbf39f2ac;
      266: out3 <= 32'hbf3a7ca4;
      267: out3 <= 32'hbf3b0629;
      268: out3 <= 32'hbf3b8f3b;
      269: out3 <= 32'hbf3c17d9;
      270: out3 <= 32'hbf3ca003;
      271: out3 <= 32'hbf3d27b8;
      272: out3 <= 32'hbf3daef9;
      273: out3 <= 32'hbf3e35c5;
      274: out3 <= 32'hbf3ebc1b;
      275: out3 <= 32'hbf3f41fc;
      276: out3 <= 32'hbf3fc767;
      277: out3 <= 32'hbf404c5c;
      278: out3 <= 32'hbf40d0da;
      279: out3 <= 32'hbf4154e1;
      280: out3 <= 32'hbf41d870;
      281: out3 <= 32'hbf425b89;
      282: out3 <= 32'hbf42de29;
      283: out3 <= 32'hbf436051;
      284: out3 <= 32'hbf43e200;
      285: out3 <= 32'hbf446337;
      286: out3 <= 32'hbf44e3f5;
      287: out3 <= 32'hbf456439;
      288: out3 <= 32'hbf45e403;
      289: out3 <= 32'hbf466354;
      290: out3 <= 32'hbf46e22a;
      291: out3 <= 32'hbf476085;
      292: out3 <= 32'hbf47de65;
      293: out3 <= 32'hbf485bca;
      294: out3 <= 32'hbf48d8b3;
      295: out3 <= 32'hbf495521;
      296: out3 <= 32'hbf49d112;
      297: out3 <= 32'hbf4a4c87;
      298: out3 <= 32'hbf4ac77f;
      299: out3 <= 32'hbf4b41fa;
      300: out3 <= 32'hbf4bbbf8;
      301: out3 <= 32'hbf4c3578;
      302: out3 <= 32'hbf4cae79;
      303: out3 <= 32'hbf4d26fd;
      304: out3 <= 32'hbf4d9f02;
      305: out3 <= 32'hbf4e1689;
      306: out3 <= 32'hbf4e8d90;
      307: out3 <= 32'hbf4f0417;
      308: out3 <= 32'hbf4f7a1f;
      309: out3 <= 32'hbf4fefa8;
      310: out3 <= 32'hbf5064af;
      311: out3 <= 32'hbf50d937;
      312: out3 <= 32'hbf514d3d;
      313: out3 <= 32'hbf51c0c2;
      314: out3 <= 32'hbf5233c6;
      315: out3 <= 32'hbf52a649;
      316: out3 <= 32'hbf531849;
      317: out3 <= 32'hbf5389c7;
      318: out3 <= 32'hbf53fac3;
      319: out3 <= 32'hbf546b3b;
      320: out3 <= 32'hbf54db31;
      321: out3 <= 32'hbf554aa4;
      322: out3 <= 32'hbf55b993;
      323: out3 <= 32'hbf5627fe;
      324: out3 <= 32'hbf5695e5;
      325: out3 <= 32'hbf570348;
      326: out3 <= 32'hbf577026;
      327: out3 <= 32'hbf57dc7f;
      328: out3 <= 32'hbf584853;
      329: out3 <= 32'hbf58b3a1;
      330: out3 <= 32'hbf591e6a;
      331: out3 <= 32'hbf5988ad;
      332: out3 <= 32'hbf59f26a;
      333: out3 <= 32'hbf5a5ba0;
      334: out3 <= 32'hbf5ac450;
      335: out3 <= 32'hbf5b2c79;
      336: out3 <= 32'hbf5b941a;
      337: out3 <= 32'hbf5bfb34;
      338: out3 <= 32'hbf5c61c7;
      339: out3 <= 32'hbf5cc7d1;
      340: out3 <= 32'hbf5d2d53;
      341: out3 <= 32'hbf5d924d;
      342: out3 <= 32'hbf5df6be;
      343: out3 <= 32'hbf5e5aa6;
      344: out3 <= 32'hbf5ebe05;
      345: out3 <= 32'hbf5f20db;
      346: out3 <= 32'hbf5f8327;
      347: out3 <= 32'hbf5fe4e9;
      348: out3 <= 32'hbf604621;
      349: out3 <= 32'hbf60a6cf;
      350: out3 <= 32'hbf6106f2;
      351: out3 <= 32'hbf61668a;
      352: out3 <= 32'hbf61c598;
      353: out3 <= 32'hbf62241a;
      354: out3 <= 32'hbf628210;
      355: out3 <= 32'hbf62df7b;
      356: out3 <= 32'hbf633c5a;
      357: out3 <= 32'hbf6398ac;
      358: out3 <= 32'hbf63f473;
      359: out3 <= 32'hbf644fac;
      360: out3 <= 32'hbf64aa59;
      361: out3 <= 32'hbf650479;
      362: out3 <= 32'hbf655e0b;
      363: out3 <= 32'hbf65b710;
      364: out3 <= 32'hbf660f88;
      365: out3 <= 32'hbf666771;
      366: out3 <= 32'hbf66becc;
      367: out3 <= 32'hbf671599;
      368: out3 <= 32'hbf676bd8;
      369: out3 <= 32'hbf67c187;
      370: out3 <= 32'hbf6816a8;
      371: out3 <= 32'hbf686b39;
      372: out3 <= 32'hbf68bf3c;
      373: out3 <= 32'hbf6912ae;
      374: out3 <= 32'hbf696591;
      375: out3 <= 32'hbf69b7e4;
      376: out3 <= 32'hbf6a09a7;
      377: out3 <= 32'hbf6a5ad9;
      378: out3 <= 32'hbf6aab7b;
      379: out3 <= 32'hbf6afb8c;
      380: out3 <= 32'hbf6b4b0c;
      381: out3 <= 32'hbf6b99fb;
      382: out3 <= 32'hbf6be858;
      383: out3 <= 32'hbf6c3624;
      384: out3 <= 32'hbf6c835e;
      385: out3 <= 32'hbf6cd007;
      386: out3 <= 32'hbf6d1c1d;
      387: out3 <= 32'hbf6d67a1;
      388: out3 <= 32'hbf6db293;
      389: out3 <= 32'hbf6dfcf2;
      390: out3 <= 32'hbf6e46be;
      391: out3 <= 32'hbf6e8ff8;
      392: out3 <= 32'hbf6ed89e;
      393: out3 <= 32'hbf6f20b0;
      394: out3 <= 32'hbf6f6830;
      395: out3 <= 32'hbf6faf1b;
      396: out3 <= 32'hbf6ff573;
      397: out3 <= 32'hbf703b37;
      398: out3 <= 32'hbf708066;
      399: out3 <= 32'hbf70c501;
      400: out3 <= 32'hbf710908;
      401: out3 <= 32'hbf714c7a;
      402: out3 <= 32'hbf718f57;
      403: out3 <= 32'hbf71d19f;
      404: out3 <= 32'hbf721352;
      405: out3 <= 32'hbf725470;
      406: out3 <= 32'hbf7294f8;
      407: out3 <= 32'hbf72d4eb;
      408: out3 <= 32'hbf731447;
      409: out3 <= 32'hbf73530e;
      410: out3 <= 32'hbf73913f;
      411: out3 <= 32'hbf73ced9;
      412: out3 <= 32'hbf740bdd;
      413: out3 <= 32'hbf74484b;
      414: out3 <= 32'hbf748422;
      415: out3 <= 32'hbf74bf62;
      416: out3 <= 32'hbf74fa0b;
      417: out3 <= 32'hbf75341d;
      418: out3 <= 32'hbf756d97;
      419: out3 <= 32'hbf75a67b;
      420: out3 <= 32'hbf75dec6;
      421: out3 <= 32'hbf76167a;
      422: out3 <= 32'hbf764d97;
      423: out3 <= 32'hbf76841b;
      424: out3 <= 32'hbf76ba07;
      425: out3 <= 32'hbf76ef5b;
      426: out3 <= 32'hbf772417;
      427: out3 <= 32'hbf77583a;
      428: out3 <= 32'hbf778bc5;
      429: out3 <= 32'hbf77beb7;
      430: out3 <= 32'hbf77f110;
      431: out3 <= 32'hbf7822d1;
      432: out3 <= 32'hbf7853f8;
      433: out3 <= 32'hbf788486;
      434: out3 <= 32'hbf78b47b;
      435: out3 <= 32'hbf78e3d6;
      436: out3 <= 32'hbf791298;
      437: out3 <= 32'hbf7940c0;
      438: out3 <= 32'hbf796e4e;
      439: out3 <= 32'hbf799b43;
      440: out3 <= 32'hbf79c79d;
      441: out3 <= 32'hbf79f35e;
      442: out3 <= 32'hbf7a1e84;
      443: out3 <= 32'hbf7a4910;
      444: out3 <= 32'hbf7a7302;
      445: out3 <= 32'hbf7a9c59;
      446: out3 <= 32'hbf7ac516;
      447: out3 <= 32'hbf7aed37;
      448: out3 <= 32'hbf7b14be;
      449: out3 <= 32'hbf7b3bab;
      450: out3 <= 32'hbf7b61fc;
      451: out3 <= 32'hbf7b87b2;
      452: out3 <= 32'hbf7baccd;
      453: out3 <= 32'hbf7bd14d;
      454: out3 <= 32'hbf7bf531;
      455: out3 <= 32'hbf7c187a;
      456: out3 <= 32'hbf7c3b28;
      457: out3 <= 32'hbf7c5d3a;
      458: out3 <= 32'hbf7c7eb0;
      459: out3 <= 32'hbf7c9f8a;
      460: out3 <= 32'hbf7cbfc9;
      461: out3 <= 32'hbf7cdf6c;
      462: out3 <= 32'hbf7cfe73;
      463: out3 <= 32'hbf7d1cdd;
      464: out3 <= 32'hbf7d3aac;
      465: out3 <= 32'hbf7d57de;
      466: out3 <= 32'hbf7d7474;
      467: out3 <= 32'hbf7d906e;
      468: out3 <= 32'hbf7dabcc;
      469: out3 <= 32'hbf7dc68c;
      470: out3 <= 32'hbf7de0b1;
      471: out3 <= 32'hbf7dfa38;
      472: out3 <= 32'hbf7e1324;
      473: out3 <= 32'hbf7e2b72;
      474: out3 <= 32'hbf7e4323;
      475: out3 <= 32'hbf7e5a38;
      476: out3 <= 32'hbf7e70b0;
      477: out3 <= 32'hbf7e868b;
      478: out3 <= 32'hbf7e9bc9;
      479: out3 <= 32'hbf7eb069;
      480: out3 <= 32'hbf7ec46d;
      481: out3 <= 32'hbf7ed7d4;
      482: out3 <= 32'hbf7eea9d;
      483: out3 <= 32'hbf7efcc9;
      484: out3 <= 32'hbf7f0e58;
      485: out3 <= 32'hbf7f1f49;
      486: out3 <= 32'hbf7f2f9d;
      487: out3 <= 32'hbf7f3f54;
      488: out3 <= 32'hbf7f4e6d;
      489: out3 <= 32'hbf7f5ce9;
      490: out3 <= 32'hbf7f6ac7;
      491: out3 <= 32'hbf7f7808;
      492: out3 <= 32'hbf7f84ab;
      493: out3 <= 32'hbf7f90b1;
      494: out3 <= 32'hbf7f9c18;
      495: out3 <= 32'hbf7fa6e3;
      496: out3 <= 32'hbf7fb10f;
      497: out3 <= 32'hbf7fba9e;
      498: out3 <= 32'hbf7fc38f;
      499: out3 <= 32'hbf7fcbe2;
      500: out3 <= 32'hbf7fd397;
      501: out3 <= 32'hbf7fdaaf;
      502: out3 <= 32'hbf7fe129;
      503: out3 <= 32'hbf7fe705;
      504: out3 <= 32'hbf7fec43;
      505: out3 <= 32'hbf7ff0e3;
      506: out3 <= 32'hbf7ff4e6;
      507: out3 <= 32'hbf7ff84a;
      508: out3 <= 32'hbf7ffb11;
      509: out3 <= 32'hbf7ffd39;
      510: out3 <= 32'hbf7ffec4;
      511: out3 <= 32'hbf7fffb1;
      512: out3 <= 32'hbf800000;
      513: out3 <= 32'hbf7fffb1;
      514: out3 <= 32'hbf7ffec4;
      515: out3 <= 32'hbf7ffd39;
      516: out3 <= 32'hbf7ffb11;
      517: out3 <= 32'hbf7ff84a;
      518: out3 <= 32'hbf7ff4e6;
      519: out3 <= 32'hbf7ff0e3;
      520: out3 <= 32'hbf7fec43;
      521: out3 <= 32'hbf7fe705;
      522: out3 <= 32'hbf7fe129;
      523: out3 <= 32'hbf7fdaaf;
      524: out3 <= 32'hbf7fd397;
      525: out3 <= 32'hbf7fcbe2;
      526: out3 <= 32'hbf7fc38f;
      527: out3 <= 32'hbf7fba9e;
      528: out3 <= 32'hbf7fb10f;
      529: out3 <= 32'hbf7fa6e3;
      530: out3 <= 32'hbf7f9c18;
      531: out3 <= 32'hbf7f90b1;
      532: out3 <= 32'hbf7f84ab;
      533: out3 <= 32'hbf7f7808;
      534: out3 <= 32'hbf7f6ac7;
      535: out3 <= 32'hbf7f5ce9;
      536: out3 <= 32'hbf7f4e6d;
      537: out3 <= 32'hbf7f3f54;
      538: out3 <= 32'hbf7f2f9d;
      539: out3 <= 32'hbf7f1f49;
      540: out3 <= 32'hbf7f0e58;
      541: out3 <= 32'hbf7efcc9;
      542: out3 <= 32'hbf7eea9d;
      543: out3 <= 32'hbf7ed7d4;
      544: out3 <= 32'hbf7ec46d;
      545: out3 <= 32'hbf7eb069;
      546: out3 <= 32'hbf7e9bc9;
      547: out3 <= 32'hbf7e868b;
      548: out3 <= 32'hbf7e70b0;
      549: out3 <= 32'hbf7e5a38;
      550: out3 <= 32'hbf7e4323;
      551: out3 <= 32'hbf7e2b72;
      552: out3 <= 32'hbf7e1324;
      553: out3 <= 32'hbf7dfa38;
      554: out3 <= 32'hbf7de0b1;
      555: out3 <= 32'hbf7dc68c;
      556: out3 <= 32'hbf7dabcc;
      557: out3 <= 32'hbf7d906e;
      558: out3 <= 32'hbf7d7474;
      559: out3 <= 32'hbf7d57de;
      560: out3 <= 32'hbf7d3aac;
      561: out3 <= 32'hbf7d1cdd;
      562: out3 <= 32'hbf7cfe73;
      563: out3 <= 32'hbf7cdf6c;
      564: out3 <= 32'hbf7cbfc9;
      565: out3 <= 32'hbf7c9f8a;
      566: out3 <= 32'hbf7c7eb0;
      567: out3 <= 32'hbf7c5d3a;
      568: out3 <= 32'hbf7c3b28;
      569: out3 <= 32'hbf7c187a;
      570: out3 <= 32'hbf7bf531;
      571: out3 <= 32'hbf7bd14d;
      572: out3 <= 32'hbf7baccd;
      573: out3 <= 32'hbf7b87b2;
      574: out3 <= 32'hbf7b61fc;
      575: out3 <= 32'hbf7b3bab;
      576: out3 <= 32'hbf7b14be;
      577: out3 <= 32'hbf7aed37;
      578: out3 <= 32'hbf7ac516;
      579: out3 <= 32'hbf7a9c59;
      580: out3 <= 32'hbf7a7302;
      581: out3 <= 32'hbf7a4910;
      582: out3 <= 32'hbf7a1e84;
      583: out3 <= 32'hbf79f35e;
      584: out3 <= 32'hbf79c79d;
      585: out3 <= 32'hbf799b43;
      586: out3 <= 32'hbf796e4e;
      587: out3 <= 32'hbf7940c0;
      588: out3 <= 32'hbf791298;
      589: out3 <= 32'hbf78e3d6;
      590: out3 <= 32'hbf78b47b;
      591: out3 <= 32'hbf788486;
      592: out3 <= 32'hbf7853f8;
      593: out3 <= 32'hbf7822d1;
      594: out3 <= 32'hbf77f110;
      595: out3 <= 32'hbf77beb7;
      596: out3 <= 32'hbf778bc5;
      597: out3 <= 32'hbf77583a;
      598: out3 <= 32'hbf772417;
      599: out3 <= 32'hbf76ef5b;
      600: out3 <= 32'hbf76ba07;
      601: out3 <= 32'hbf76841b;
      602: out3 <= 32'hbf764d97;
      603: out3 <= 32'hbf76167a;
      604: out3 <= 32'hbf75dec6;
      605: out3 <= 32'hbf75a67b;
      606: out3 <= 32'hbf756d97;
      607: out3 <= 32'hbf75341d;
      608: out3 <= 32'hbf74fa0b;
      609: out3 <= 32'hbf74bf62;
      610: out3 <= 32'hbf748422;
      611: out3 <= 32'hbf74484b;
      612: out3 <= 32'hbf740bdd;
      613: out3 <= 32'hbf73ced9;
      614: out3 <= 32'hbf73913f;
      615: out3 <= 32'hbf73530e;
      616: out3 <= 32'hbf731447;
      617: out3 <= 32'hbf72d4eb;
      618: out3 <= 32'hbf7294f8;
      619: out3 <= 32'hbf725470;
      620: out3 <= 32'hbf721352;
      621: out3 <= 32'hbf71d19f;
      622: out3 <= 32'hbf718f57;
      623: out3 <= 32'hbf714c7a;
      624: out3 <= 32'hbf710908;
      625: out3 <= 32'hbf70c501;
      626: out3 <= 32'hbf708066;
      627: out3 <= 32'hbf703b37;
      628: out3 <= 32'hbf6ff573;
      629: out3 <= 32'hbf6faf1b;
      630: out3 <= 32'hbf6f6830;
      631: out3 <= 32'hbf6f20b0;
      632: out3 <= 32'hbf6ed89e;
      633: out3 <= 32'hbf6e8ff8;
      634: out3 <= 32'hbf6e46be;
      635: out3 <= 32'hbf6dfcf2;
      636: out3 <= 32'hbf6db293;
      637: out3 <= 32'hbf6d67a1;
      638: out3 <= 32'hbf6d1c1d;
      639: out3 <= 32'hbf6cd007;
      640: out3 <= 32'hbf6c835e;
      641: out3 <= 32'hbf6c3624;
      642: out3 <= 32'hbf6be858;
      643: out3 <= 32'hbf6b99fb;
      644: out3 <= 32'hbf6b4b0c;
      645: out3 <= 32'hbf6afb8c;
      646: out3 <= 32'hbf6aab7b;
      647: out3 <= 32'hbf6a5ad9;
      648: out3 <= 32'hbf6a09a7;
      649: out3 <= 32'hbf69b7e4;
      650: out3 <= 32'hbf696591;
      651: out3 <= 32'hbf6912ae;
      652: out3 <= 32'hbf68bf3c;
      653: out3 <= 32'hbf686b39;
      654: out3 <= 32'hbf6816a8;
      655: out3 <= 32'hbf67c187;
      656: out3 <= 32'hbf676bd8;
      657: out3 <= 32'hbf671599;
      658: out3 <= 32'hbf66becc;
      659: out3 <= 32'hbf666771;
      660: out3 <= 32'hbf660f88;
      661: out3 <= 32'hbf65b710;
      662: out3 <= 32'hbf655e0b;
      663: out3 <= 32'hbf650479;
      664: out3 <= 32'hbf64aa59;
      665: out3 <= 32'hbf644fac;
      666: out3 <= 32'hbf63f473;
      667: out3 <= 32'hbf6398ac;
      668: out3 <= 32'hbf633c5a;
      669: out3 <= 32'hbf62df7b;
      670: out3 <= 32'hbf628210;
      671: out3 <= 32'hbf62241a;
      672: out3 <= 32'hbf61c598;
      673: out3 <= 32'hbf61668a;
      674: out3 <= 32'hbf6106f2;
      675: out3 <= 32'hbf60a6cf;
      676: out3 <= 32'hbf604621;
      677: out3 <= 32'hbf5fe4e9;
      678: out3 <= 32'hbf5f8327;
      679: out3 <= 32'hbf5f20db;
      680: out3 <= 32'hbf5ebe05;
      681: out3 <= 32'hbf5e5aa6;
      682: out3 <= 32'hbf5df6be;
      683: out3 <= 32'hbf5d924d;
      684: out3 <= 32'hbf5d2d53;
      685: out3 <= 32'hbf5cc7d1;
      686: out3 <= 32'hbf5c61c7;
      687: out3 <= 32'hbf5bfb34;
      688: out3 <= 32'hbf5b941a;
      689: out3 <= 32'hbf5b2c79;
      690: out3 <= 32'hbf5ac450;
      691: out3 <= 32'hbf5a5ba0;
      692: out3 <= 32'hbf59f26a;
      693: out3 <= 32'hbf5988ad;
      694: out3 <= 32'hbf591e6a;
      695: out3 <= 32'hbf58b3a1;
      696: out3 <= 32'hbf584853;
      697: out3 <= 32'hbf57dc7f;
      698: out3 <= 32'hbf577026;
      699: out3 <= 32'hbf570348;
      700: out3 <= 32'hbf5695e5;
      701: out3 <= 32'hbf5627fe;
      702: out3 <= 32'hbf55b993;
      703: out3 <= 32'hbf554aa4;
      704: out3 <= 32'hbf54db31;
      705: out3 <= 32'hbf546b3b;
      706: out3 <= 32'hbf53fac3;
      707: out3 <= 32'hbf5389c7;
      708: out3 <= 32'hbf531849;
      709: out3 <= 32'hbf52a649;
      710: out3 <= 32'hbf5233c6;
      711: out3 <= 32'hbf51c0c2;
      712: out3 <= 32'hbf514d3d;
      713: out3 <= 32'hbf50d937;
      714: out3 <= 32'hbf5064af;
      715: out3 <= 32'hbf4fefa8;
      716: out3 <= 32'hbf4f7a1f;
      717: out3 <= 32'hbf4f0417;
      718: out3 <= 32'hbf4e8d90;
      719: out3 <= 32'hbf4e1689;
      720: out3 <= 32'hbf4d9f02;
      721: out3 <= 32'hbf4d26fd;
      722: out3 <= 32'hbf4cae79;
      723: out3 <= 32'hbf4c3578;
      724: out3 <= 32'hbf4bbbf8;
      725: out3 <= 32'hbf4b41fa;
      726: out3 <= 32'hbf4ac77f;
      727: out3 <= 32'hbf4a4c87;
      728: out3 <= 32'hbf49d112;
      729: out3 <= 32'hbf495521;
      730: out3 <= 32'hbf48d8b3;
      731: out3 <= 32'hbf485bca;
      732: out3 <= 32'hbf47de65;
      733: out3 <= 32'hbf476085;
      734: out3 <= 32'hbf46e22a;
      735: out3 <= 32'hbf466354;
      736: out3 <= 32'hbf45e403;
      737: out3 <= 32'hbf456439;
      738: out3 <= 32'hbf44e3f5;
      739: out3 <= 32'hbf446337;
      740: out3 <= 32'hbf43e200;
      741: out3 <= 32'hbf436051;
      742: out3 <= 32'hbf42de29;
      743: out3 <= 32'hbf425b89;
      744: out3 <= 32'hbf41d870;
      745: out3 <= 32'hbf4154e1;
      746: out3 <= 32'hbf40d0da;
      747: out3 <= 32'hbf404c5c;
      748: out3 <= 32'hbf3fc767;
      749: out3 <= 32'hbf3f41fc;
      750: out3 <= 32'hbf3ebc1b;
      751: out3 <= 32'hbf3e35c5;
      752: out3 <= 32'hbf3daef9;
      753: out3 <= 32'hbf3d27b8;
      754: out3 <= 32'hbf3ca003;
      755: out3 <= 32'hbf3c17d9;
      756: out3 <= 32'hbf3b8f3b;
      757: out3 <= 32'hbf3b0629;
      758: out3 <= 32'hbf3a7ca4;
      759: out3 <= 32'hbf39f2ac;
      760: out3 <= 32'hbf396842;
      761: out3 <= 32'hbf38dd65;
      762: out3 <= 32'hbf385216;
      763: out3 <= 32'hbf37c655;
      764: out3 <= 32'hbf373a23;
      765: out3 <= 32'hbf36ad7f;
      766: out3 <= 32'hbf36206c;
      767: out3 <= 32'hbf3592e7;
      768: out3 <= 32'hbf3504f3;
      769: out3 <= 32'hbf34768f;
      770: out3 <= 32'hbf33e7bc;
      771: out3 <= 32'hbf33587a;
      772: out3 <= 32'hbf32c8c9;
      773: out3 <= 32'hbf3238aa;
      774: out3 <= 32'hbf31a81d;
      775: out3 <= 32'hbf311722;
      776: out3 <= 32'hbf3085bb;
      777: out3 <= 32'hbf2ff3e6;
      778: out3 <= 32'hbf2f61a5;
      779: out3 <= 32'hbf2ecef7;
      780: out3 <= 32'hbf2e3bde;
      781: out3 <= 32'hbf2da859;
      782: out3 <= 32'hbf2d1469;
      783: out3 <= 32'hbf2c800f;
      784: out3 <= 32'hbf2beb4a;
      785: out3 <= 32'hbf2b561b;
      786: out3 <= 32'hbf2ac082;
      787: out3 <= 32'hbf2a2a80;
      788: out3 <= 32'hbf299415;
      789: out3 <= 32'hbf28fd41;
      790: out3 <= 32'hbf286605;
      791: out3 <= 32'hbf27ce61;
      792: out3 <= 32'hbf273656;
      793: out3 <= 32'hbf269de3;
      794: out3 <= 32'hbf26050a;
      795: out3 <= 32'hbf256bcb;
      796: out3 <= 32'hbf24d225;
      797: out3 <= 32'hbf24381a;
      798: out3 <= 32'hbf239da9;
      799: out3 <= 32'hbf2302d3;
      800: out3 <= 32'hbf226799;
      801: out3 <= 32'hbf21cbfb;
      802: out3 <= 32'hbf212ff9;
      803: out3 <= 32'hbf209393;
      804: out3 <= 32'hbf1ff6cb;
      805: out3 <= 32'hbf1f599f;
      806: out3 <= 32'hbf1ebc12;
      807: out3 <= 32'hbf1e1e22;
      808: out3 <= 32'hbf1d7fd1;
      809: out3 <= 32'hbf1ce11f;
      810: out3 <= 32'hbf1c420c;
      811: out3 <= 32'hbf1ba299;
      812: out3 <= 32'hbf1b02c6;
      813: out3 <= 32'hbf1a6293;
      814: out3 <= 32'hbf19c200;
      815: out3 <= 32'hbf19210f;
      816: out3 <= 32'hbf187fc0;
      817: out3 <= 32'hbf17de12;
      818: out3 <= 32'hbf173c07;
      819: out3 <= 32'hbf16999f;
      820: out3 <= 32'hbf15f6d9;
      821: out3 <= 32'hbf1553b7;
      822: out3 <= 32'hbf14b039;
      823: out3 <= 32'hbf140c5f;
      824: out3 <= 32'hbf13682a;
      825: out3 <= 32'hbf12c39a;
      826: out3 <= 32'hbf121eb0;
      827: out3 <= 32'hbf11796b;
      828: out3 <= 32'hbf10d3cd;
      829: out3 <= 32'hbf102dd5;
      830: out3 <= 32'hbf0f8784;
      831: out3 <= 32'hbf0ee0db;
      832: out3 <= 32'hbf0e39da;
      833: out3 <= 32'hbf0d9281;
      834: out3 <= 32'hbf0cead0;
      835: out3 <= 32'hbf0c42c9;
      836: out3 <= 32'hbf0b9a6b;
      837: out3 <= 32'hbf0af1b7;
      838: out3 <= 32'hbf0a48ad;
      839: out3 <= 32'hbf099f4e;
      840: out3 <= 32'hbf08f59b;
      841: out3 <= 32'hbf084b92;
      842: out3 <= 32'hbf07a136;
      843: out3 <= 32'hbf06f686;
      844: out3 <= 32'hbf064b82;
      845: out3 <= 32'hbf05a02c;
      846: out3 <= 32'hbf04f484;
      847: out3 <= 32'hbf044889;
      848: out3 <= 32'hbf039c3d;
      849: out3 <= 32'hbf02ef9f;
      850: out3 <= 32'hbf0242b1;
      851: out3 <= 32'hbf019573;
      852: out3 <= 32'hbf00e7e4;
      853: out3 <= 32'hbf003a06;
      854: out3 <= 32'hbeff17b2;
      855: out3 <= 32'hbefdbabb;
      856: out3 <= 32'hbefc5d27;
      857: out3 <= 32'hbefafef7;
      858: out3 <= 32'hbef9a02d;
      859: out3 <= 32'hbef840c8;
      860: out3 <= 32'hbef6e0cb;
      861: out3 <= 32'hbef58035;
      862: out3 <= 32'hbef41f07;
      863: out3 <= 32'hbef2bd43;
      864: out3 <= 32'hbef15aea;
      865: out3 <= 32'hbeeff7fb;
      866: out3 <= 32'hbeee9479;
      867: out3 <= 32'hbeed3063;
      868: out3 <= 32'hbeebcbbb;
      869: out3 <= 32'hbeea6681;
      870: out3 <= 32'hbee900b7;
      871: out3 <= 32'hbee79a5d;
      872: out3 <= 32'hbee63375;
      873: out3 <= 32'hbee4cbfe;
      874: out3 <= 32'hbee363fa;
      875: out3 <= 32'hbee1fb6a;
      876: out3 <= 32'hbee0924f;
      877: out3 <= 32'hbedf28a9;
      878: out3 <= 32'hbeddbe79;
      879: out3 <= 32'hbedc53c1;
      880: out3 <= 32'hbedae880;
      881: out3 <= 32'hbed97cb9;
      882: out3 <= 32'hbed8106b;
      883: out3 <= 32'hbed6a399;
      884: out3 <= 32'hbed53641;
      885: out3 <= 32'hbed3c867;
      886: out3 <= 32'hbed25a09;
      887: out3 <= 32'hbed0eb2a;
      888: out3 <= 32'hbecf7bca;
      889: out3 <= 32'hbece0bea;
      890: out3 <= 32'hbecc9b8b;
      891: out3 <= 32'hbecb2aae;
      892: out3 <= 32'hbec9b953;
      893: out3 <= 32'hbec8477c;
      894: out3 <= 32'hbec6d529;
      895: out3 <= 32'hbec5625c;
      896: out3 <= 32'hbec3ef15;
      897: out3 <= 32'hbec27b55;
      898: out3 <= 32'hbec1071e;
      899: out3 <= 32'hbebf926f;
      900: out3 <= 32'hbebe1d4a;
      901: out3 <= 32'hbebca7af;
      902: out3 <= 32'hbebb31a0;
      903: out3 <= 32'hbeb9bb1e;
      904: out3 <= 32'hbeb8442a;
      905: out3 <= 32'hbeb6ccc3;
      906: out3 <= 32'hbeb554ec;
      907: out3 <= 32'hbeb3dca5;
      908: out3 <= 32'hbeb263ef;
      909: out3 <= 32'hbeb0eacb;
      910: out3 <= 32'hbeaf713a;
      911: out3 <= 32'hbeadf73c;
      912: out3 <= 32'hbeac7cd4;
      913: out3 <= 32'hbeab0201;
      914: out3 <= 32'hbea986c4;
      915: out3 <= 32'hbea80b1f;
      916: out3 <= 32'hbea68f12;
      917: out3 <= 32'hbea5129f;
      918: out3 <= 32'hbea395c5;
      919: out3 <= 32'hbea21887;
      920: out3 <= 32'hbea09ae5;
      921: out3 <= 32'hbe9f1cdf;
      922: out3 <= 32'hbe9d9e78;
      923: out3 <= 32'hbe9c1faf;
      924: out3 <= 32'hbe9aa086;
      925: out3 <= 32'hbe9920fe;
      926: out3 <= 32'hbe97a117;
      927: out3 <= 32'hbe9620d2;
      928: out3 <= 32'hbe94a031;
      929: out3 <= 32'hbe931f35;
      930: out3 <= 32'hbe919ddd;
      931: out3 <= 32'hbe901c2c;
      932: out3 <= 32'hbe8e9a22;
      933: out3 <= 32'hbe8d17c0;
      934: out3 <= 32'hbe8b9507;
      935: out3 <= 32'hbe8a11f7;
      936: out3 <= 32'hbe888e93;
      937: out3 <= 32'hbe870ada;
      938: out3 <= 32'hbe8586ce;
      939: out3 <= 32'hbe840270;
      940: out3 <= 32'hbe827dc0;
      941: out3 <= 32'hbe80f8c0;
      942: out3 <= 32'hbe7ee6e1;
      943: out3 <= 32'hbe7bdba4;
      944: out3 <= 32'hbe78cfcc;
      945: out3 <= 32'hbe75c35a;
      946: out3 <= 32'hbe72b651;
      947: out3 <= 32'hbe6fa8b2;
      948: out3 <= 32'hbe6c9a7f;
      949: out3 <= 32'hbe698bba;
      950: out3 <= 32'hbe667c66;
      951: out3 <= 32'hbe636c83;
      952: out3 <= 32'hbe605c13;
      953: out3 <= 32'hbe5d4b1a;
      954: out3 <= 32'hbe5a3997;
      955: out3 <= 32'hbe57278f;
      956: out3 <= 32'hbe541501;
      957: out3 <= 32'hbe5101f1;
      958: out3 <= 32'hbe4dee60;
      959: out3 <= 32'hbe4ada4f;
      960: out3 <= 32'hbe47c5c2;
      961: out3 <= 32'hbe44b0b9;
      962: out3 <= 32'hbe419b37;
      963: out3 <= 32'hbe3e853e;
      964: out3 <= 32'hbe3b6ecf;
      965: out3 <= 32'hbe3857ec;
      966: out3 <= 32'hbe354098;
      967: out3 <= 32'hbe3228d4;
      968: out3 <= 32'hbe2f10a2;
      969: out3 <= 32'hbe2bf804;
      970: out3 <= 32'hbe28defc;
      971: out3 <= 32'hbe25c58c;
      972: out3 <= 32'hbe22abb6;
      973: out3 <= 32'hbe1f917b;
      974: out3 <= 32'hbe1c76de;
      975: out3 <= 32'hbe195be0;
      976: out3 <= 32'hbe164083;
      977: out3 <= 32'hbe1324ca;
      978: out3 <= 32'hbe1008b7;
      979: out3 <= 32'hbe0cec4a;
      980: out3 <= 32'hbe09cf86;
      981: out3 <= 32'hbe06b26e;
      982: out3 <= 32'hbe039502;
      983: out3 <= 32'hbe007745;
      984: out3 <= 32'hbdfab273;
      985: out3 <= 32'hbdf475c0;
      986: out3 <= 32'hbdee3876;
      987: out3 <= 32'hbde7fa9a;
      988: out3 <= 32'hbde1bc2e;
      989: out3 <= 32'hbddb7d37;
      990: out3 <= 32'hbdd53db9;
      991: out3 <= 32'hbdcefdb7;
      992: out3 <= 32'hbdc8bd36;
      993: out3 <= 32'hbdc27c39;
      994: out3 <= 32'hbdbc3ac3;
      995: out3 <= 32'hbdb5f8da;
      996: out3 <= 32'hbdafb680;
      997: out3 <= 32'hbda973ba;
      998: out3 <= 32'hbda3308c;
      999: out3 <= 32'hbd9cecf9;
      1000: out3 <= 32'hbd96a905;
      1001: out3 <= 32'hbd9064b4;
      1002: out3 <= 32'hbd8a200a;
      1003: out3 <= 32'hbd83db0a;
      1004: out3 <= 32'hbd7b2b74;
      1005: out3 <= 32'hbd6ea038;
      1006: out3 <= 32'hbd621469;
      1007: out3 <= 32'hbd55880e;
      1008: out3 <= 32'hbd48fb30;
      1009: out3 <= 32'hbd3c6dd5;
      1010: out3 <= 32'hbd2fe007;
      1011: out3 <= 32'hbd2351cb;
      1012: out3 <= 32'hbd16c32c;
      1013: out3 <= 32'hbd0a342f;
      1014: out3 <= 32'hbcfb49ba;
      1015: out3 <= 32'hbce22a7a;
      1016: out3 <= 32'hbcc90ab0;
      1017: out3 <= 32'hbcafea69;
      1018: out3 <= 32'hbc96c9b6;
      1019: out3 <= 32'hbc7b514b;
      1020: out3 <= 32'hbc490e90;
      1021: out3 <= 32'hbc16cb58;
      1022: out3 <= 32'hbbc90f88;
      1023: out3 <= 32'hbb490fc6;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D6_96180(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [9:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h3f7fffb1;
      2: out3 <= 32'h3f7ffec4;
      3: out3 <= 32'h3f7ffd39;
      4: out3 <= 32'h3f7ffb11;
      5: out3 <= 32'h3f7ff84a;
      6: out3 <= 32'h3f7ff4e6;
      7: out3 <= 32'h3f7ff0e3;
      8: out3 <= 32'h3f7fec43;
      9: out3 <= 32'h3f7fe705;
      10: out3 <= 32'h3f7fe129;
      11: out3 <= 32'h3f7fdaaf;
      12: out3 <= 32'h3f7fd397;
      13: out3 <= 32'h3f7fcbe2;
      14: out3 <= 32'h3f7fc38f;
      15: out3 <= 32'h3f7fba9e;
      16: out3 <= 32'h3f7fb10f;
      17: out3 <= 32'h3f7fa6e3;
      18: out3 <= 32'h3f7f9c18;
      19: out3 <= 32'h3f7f90b1;
      20: out3 <= 32'h3f7f84ab;
      21: out3 <= 32'h3f7f7808;
      22: out3 <= 32'h3f7f6ac7;
      23: out3 <= 32'h3f7f5ce9;
      24: out3 <= 32'h3f7f4e6d;
      25: out3 <= 32'h3f7f3f54;
      26: out3 <= 32'h3f7f2f9d;
      27: out3 <= 32'h3f7f1f49;
      28: out3 <= 32'h3f7f0e58;
      29: out3 <= 32'h3f7efcc9;
      30: out3 <= 32'h3f7eea9d;
      31: out3 <= 32'h3f7ed7d4;
      32: out3 <= 32'h3f7ec46d;
      33: out3 <= 32'h3f7eb069;
      34: out3 <= 32'h3f7e9bc9;
      35: out3 <= 32'h3f7e868b;
      36: out3 <= 32'h3f7e70b0;
      37: out3 <= 32'h3f7e5a38;
      38: out3 <= 32'h3f7e4323;
      39: out3 <= 32'h3f7e2b72;
      40: out3 <= 32'h3f7e1324;
      41: out3 <= 32'h3f7dfa38;
      42: out3 <= 32'h3f7de0b1;
      43: out3 <= 32'h3f7dc68c;
      44: out3 <= 32'h3f7dabcc;
      45: out3 <= 32'h3f7d906e;
      46: out3 <= 32'h3f7d7474;
      47: out3 <= 32'h3f7d57de;
      48: out3 <= 32'h3f7d3aac;
      49: out3 <= 32'h3f7d1cdd;
      50: out3 <= 32'h3f7cfe73;
      51: out3 <= 32'h3f7cdf6c;
      52: out3 <= 32'h3f7cbfc9;
      53: out3 <= 32'h3f7c9f8a;
      54: out3 <= 32'h3f7c7eb0;
      55: out3 <= 32'h3f7c5d3a;
      56: out3 <= 32'h3f7c3b28;
      57: out3 <= 32'h3f7c187a;
      58: out3 <= 32'h3f7bf531;
      59: out3 <= 32'h3f7bd14d;
      60: out3 <= 32'h3f7baccd;
      61: out3 <= 32'h3f7b87b2;
      62: out3 <= 32'h3f7b61fc;
      63: out3 <= 32'h3f7b3bab;
      64: out3 <= 32'h3f7b14be;
      65: out3 <= 32'h3f7aed37;
      66: out3 <= 32'h3f7ac516;
      67: out3 <= 32'h3f7a9c59;
      68: out3 <= 32'h3f7a7302;
      69: out3 <= 32'h3f7a4910;
      70: out3 <= 32'h3f7a1e84;
      71: out3 <= 32'h3f79f35e;
      72: out3 <= 32'h3f79c79d;
      73: out3 <= 32'h3f799b43;
      74: out3 <= 32'h3f796e4e;
      75: out3 <= 32'h3f7940c0;
      76: out3 <= 32'h3f791298;
      77: out3 <= 32'h3f78e3d6;
      78: out3 <= 32'h3f78b47b;
      79: out3 <= 32'h3f788486;
      80: out3 <= 32'h3f7853f8;
      81: out3 <= 32'h3f7822d1;
      82: out3 <= 32'h3f77f110;
      83: out3 <= 32'h3f77beb7;
      84: out3 <= 32'h3f778bc5;
      85: out3 <= 32'h3f77583a;
      86: out3 <= 32'h3f772417;
      87: out3 <= 32'h3f76ef5b;
      88: out3 <= 32'h3f76ba07;
      89: out3 <= 32'h3f76841b;
      90: out3 <= 32'h3f764d97;
      91: out3 <= 32'h3f76167a;
      92: out3 <= 32'h3f75dec6;
      93: out3 <= 32'h3f75a67b;
      94: out3 <= 32'h3f756d97;
      95: out3 <= 32'h3f75341d;
      96: out3 <= 32'h3f74fa0b;
      97: out3 <= 32'h3f74bf62;
      98: out3 <= 32'h3f748422;
      99: out3 <= 32'h3f74484b;
      100: out3 <= 32'h3f740bdd;
      101: out3 <= 32'h3f73ced9;
      102: out3 <= 32'h3f73913f;
      103: out3 <= 32'h3f73530e;
      104: out3 <= 32'h3f731447;
      105: out3 <= 32'h3f72d4eb;
      106: out3 <= 32'h3f7294f8;
      107: out3 <= 32'h3f725470;
      108: out3 <= 32'h3f721352;
      109: out3 <= 32'h3f71d19f;
      110: out3 <= 32'h3f718f57;
      111: out3 <= 32'h3f714c7a;
      112: out3 <= 32'h3f710908;
      113: out3 <= 32'h3f70c501;
      114: out3 <= 32'h3f708066;
      115: out3 <= 32'h3f703b37;
      116: out3 <= 32'h3f6ff573;
      117: out3 <= 32'h3f6faf1b;
      118: out3 <= 32'h3f6f6830;
      119: out3 <= 32'h3f6f20b0;
      120: out3 <= 32'h3f6ed89e;
      121: out3 <= 32'h3f6e8ff8;
      122: out3 <= 32'h3f6e46be;
      123: out3 <= 32'h3f6dfcf2;
      124: out3 <= 32'h3f6db293;
      125: out3 <= 32'h3f6d67a1;
      126: out3 <= 32'h3f6d1c1d;
      127: out3 <= 32'h3f6cd007;
      128: out3 <= 32'h3f6c835e;
      129: out3 <= 32'h3f6c3624;
      130: out3 <= 32'h3f6be858;
      131: out3 <= 32'h3f6b99fb;
      132: out3 <= 32'h3f6b4b0c;
      133: out3 <= 32'h3f6afb8c;
      134: out3 <= 32'h3f6aab7b;
      135: out3 <= 32'h3f6a5ad9;
      136: out3 <= 32'h3f6a09a7;
      137: out3 <= 32'h3f69b7e4;
      138: out3 <= 32'h3f696591;
      139: out3 <= 32'h3f6912ae;
      140: out3 <= 32'h3f68bf3c;
      141: out3 <= 32'h3f686b39;
      142: out3 <= 32'h3f6816a8;
      143: out3 <= 32'h3f67c187;
      144: out3 <= 32'h3f676bd8;
      145: out3 <= 32'h3f671599;
      146: out3 <= 32'h3f66becc;
      147: out3 <= 32'h3f666771;
      148: out3 <= 32'h3f660f88;
      149: out3 <= 32'h3f65b710;
      150: out3 <= 32'h3f655e0b;
      151: out3 <= 32'h3f650479;
      152: out3 <= 32'h3f64aa59;
      153: out3 <= 32'h3f644fac;
      154: out3 <= 32'h3f63f473;
      155: out3 <= 32'h3f6398ac;
      156: out3 <= 32'h3f633c5a;
      157: out3 <= 32'h3f62df7b;
      158: out3 <= 32'h3f628210;
      159: out3 <= 32'h3f62241a;
      160: out3 <= 32'h3f61c598;
      161: out3 <= 32'h3f61668a;
      162: out3 <= 32'h3f6106f2;
      163: out3 <= 32'h3f60a6cf;
      164: out3 <= 32'h3f604621;
      165: out3 <= 32'h3f5fe4e9;
      166: out3 <= 32'h3f5f8327;
      167: out3 <= 32'h3f5f20db;
      168: out3 <= 32'h3f5ebe05;
      169: out3 <= 32'h3f5e5aa6;
      170: out3 <= 32'h3f5df6be;
      171: out3 <= 32'h3f5d924d;
      172: out3 <= 32'h3f5d2d53;
      173: out3 <= 32'h3f5cc7d1;
      174: out3 <= 32'h3f5c61c7;
      175: out3 <= 32'h3f5bfb34;
      176: out3 <= 32'h3f5b941a;
      177: out3 <= 32'h3f5b2c79;
      178: out3 <= 32'h3f5ac450;
      179: out3 <= 32'h3f5a5ba0;
      180: out3 <= 32'h3f59f26a;
      181: out3 <= 32'h3f5988ad;
      182: out3 <= 32'h3f591e6a;
      183: out3 <= 32'h3f58b3a1;
      184: out3 <= 32'h3f584853;
      185: out3 <= 32'h3f57dc7f;
      186: out3 <= 32'h3f577026;
      187: out3 <= 32'h3f570348;
      188: out3 <= 32'h3f5695e5;
      189: out3 <= 32'h3f5627fe;
      190: out3 <= 32'h3f55b993;
      191: out3 <= 32'h3f554aa4;
      192: out3 <= 32'h3f54db31;
      193: out3 <= 32'h3f546b3b;
      194: out3 <= 32'h3f53fac3;
      195: out3 <= 32'h3f5389c7;
      196: out3 <= 32'h3f531849;
      197: out3 <= 32'h3f52a649;
      198: out3 <= 32'h3f5233c6;
      199: out3 <= 32'h3f51c0c2;
      200: out3 <= 32'h3f514d3d;
      201: out3 <= 32'h3f50d937;
      202: out3 <= 32'h3f5064af;
      203: out3 <= 32'h3f4fefa8;
      204: out3 <= 32'h3f4f7a1f;
      205: out3 <= 32'h3f4f0417;
      206: out3 <= 32'h3f4e8d90;
      207: out3 <= 32'h3f4e1689;
      208: out3 <= 32'h3f4d9f02;
      209: out3 <= 32'h3f4d26fd;
      210: out3 <= 32'h3f4cae79;
      211: out3 <= 32'h3f4c3578;
      212: out3 <= 32'h3f4bbbf8;
      213: out3 <= 32'h3f4b41fa;
      214: out3 <= 32'h3f4ac77f;
      215: out3 <= 32'h3f4a4c87;
      216: out3 <= 32'h3f49d112;
      217: out3 <= 32'h3f495521;
      218: out3 <= 32'h3f48d8b3;
      219: out3 <= 32'h3f485bca;
      220: out3 <= 32'h3f47de65;
      221: out3 <= 32'h3f476085;
      222: out3 <= 32'h3f46e22a;
      223: out3 <= 32'h3f466354;
      224: out3 <= 32'h3f45e403;
      225: out3 <= 32'h3f456439;
      226: out3 <= 32'h3f44e3f5;
      227: out3 <= 32'h3f446337;
      228: out3 <= 32'h3f43e200;
      229: out3 <= 32'h3f436051;
      230: out3 <= 32'h3f42de29;
      231: out3 <= 32'h3f425b89;
      232: out3 <= 32'h3f41d870;
      233: out3 <= 32'h3f4154e1;
      234: out3 <= 32'h3f40d0da;
      235: out3 <= 32'h3f404c5c;
      236: out3 <= 32'h3f3fc767;
      237: out3 <= 32'h3f3f41fc;
      238: out3 <= 32'h3f3ebc1b;
      239: out3 <= 32'h3f3e35c5;
      240: out3 <= 32'h3f3daef9;
      241: out3 <= 32'h3f3d27b8;
      242: out3 <= 32'h3f3ca003;
      243: out3 <= 32'h3f3c17d9;
      244: out3 <= 32'h3f3b8f3b;
      245: out3 <= 32'h3f3b0629;
      246: out3 <= 32'h3f3a7ca4;
      247: out3 <= 32'h3f39f2ac;
      248: out3 <= 32'h3f396842;
      249: out3 <= 32'h3f38dd65;
      250: out3 <= 32'h3f385216;
      251: out3 <= 32'h3f37c655;
      252: out3 <= 32'h3f373a23;
      253: out3 <= 32'h3f36ad7f;
      254: out3 <= 32'h3f36206c;
      255: out3 <= 32'h3f3592e7;
      256: out3 <= 32'h3f3504f3;
      257: out3 <= 32'h3f34768f;
      258: out3 <= 32'h3f33e7bc;
      259: out3 <= 32'h3f33587a;
      260: out3 <= 32'h3f32c8c9;
      261: out3 <= 32'h3f3238aa;
      262: out3 <= 32'h3f31a81d;
      263: out3 <= 32'h3f311722;
      264: out3 <= 32'h3f3085bb;
      265: out3 <= 32'h3f2ff3e6;
      266: out3 <= 32'h3f2f61a5;
      267: out3 <= 32'h3f2ecef7;
      268: out3 <= 32'h3f2e3bde;
      269: out3 <= 32'h3f2da859;
      270: out3 <= 32'h3f2d1469;
      271: out3 <= 32'h3f2c800f;
      272: out3 <= 32'h3f2beb4a;
      273: out3 <= 32'h3f2b561b;
      274: out3 <= 32'h3f2ac082;
      275: out3 <= 32'h3f2a2a80;
      276: out3 <= 32'h3f299415;
      277: out3 <= 32'h3f28fd41;
      278: out3 <= 32'h3f286605;
      279: out3 <= 32'h3f27ce61;
      280: out3 <= 32'h3f273656;
      281: out3 <= 32'h3f269de3;
      282: out3 <= 32'h3f26050a;
      283: out3 <= 32'h3f256bcb;
      284: out3 <= 32'h3f24d225;
      285: out3 <= 32'h3f24381a;
      286: out3 <= 32'h3f239da9;
      287: out3 <= 32'h3f2302d3;
      288: out3 <= 32'h3f226799;
      289: out3 <= 32'h3f21cbfb;
      290: out3 <= 32'h3f212ff9;
      291: out3 <= 32'h3f209393;
      292: out3 <= 32'h3f1ff6cb;
      293: out3 <= 32'h3f1f599f;
      294: out3 <= 32'h3f1ebc12;
      295: out3 <= 32'h3f1e1e22;
      296: out3 <= 32'h3f1d7fd1;
      297: out3 <= 32'h3f1ce11f;
      298: out3 <= 32'h3f1c420c;
      299: out3 <= 32'h3f1ba299;
      300: out3 <= 32'h3f1b02c6;
      301: out3 <= 32'h3f1a6293;
      302: out3 <= 32'h3f19c200;
      303: out3 <= 32'h3f19210f;
      304: out3 <= 32'h3f187fc0;
      305: out3 <= 32'h3f17de12;
      306: out3 <= 32'h3f173c07;
      307: out3 <= 32'h3f16999f;
      308: out3 <= 32'h3f15f6d9;
      309: out3 <= 32'h3f1553b7;
      310: out3 <= 32'h3f14b039;
      311: out3 <= 32'h3f140c5f;
      312: out3 <= 32'h3f13682a;
      313: out3 <= 32'h3f12c39a;
      314: out3 <= 32'h3f121eb0;
      315: out3 <= 32'h3f11796b;
      316: out3 <= 32'h3f10d3cd;
      317: out3 <= 32'h3f102dd5;
      318: out3 <= 32'h3f0f8784;
      319: out3 <= 32'h3f0ee0db;
      320: out3 <= 32'h3f0e39da;
      321: out3 <= 32'h3f0d9281;
      322: out3 <= 32'h3f0cead0;
      323: out3 <= 32'h3f0c42c9;
      324: out3 <= 32'h3f0b9a6b;
      325: out3 <= 32'h3f0af1b7;
      326: out3 <= 32'h3f0a48ad;
      327: out3 <= 32'h3f099f4e;
      328: out3 <= 32'h3f08f59b;
      329: out3 <= 32'h3f084b92;
      330: out3 <= 32'h3f07a136;
      331: out3 <= 32'h3f06f686;
      332: out3 <= 32'h3f064b82;
      333: out3 <= 32'h3f05a02c;
      334: out3 <= 32'h3f04f484;
      335: out3 <= 32'h3f044889;
      336: out3 <= 32'h3f039c3d;
      337: out3 <= 32'h3f02ef9f;
      338: out3 <= 32'h3f0242b1;
      339: out3 <= 32'h3f019573;
      340: out3 <= 32'h3f00e7e4;
      341: out3 <= 32'h3f003a06;
      342: out3 <= 32'h3eff17b2;
      343: out3 <= 32'h3efdbabb;
      344: out3 <= 32'h3efc5d27;
      345: out3 <= 32'h3efafef7;
      346: out3 <= 32'h3ef9a02d;
      347: out3 <= 32'h3ef840c8;
      348: out3 <= 32'h3ef6e0cb;
      349: out3 <= 32'h3ef58035;
      350: out3 <= 32'h3ef41f07;
      351: out3 <= 32'h3ef2bd43;
      352: out3 <= 32'h3ef15aea;
      353: out3 <= 32'h3eeff7fb;
      354: out3 <= 32'h3eee9479;
      355: out3 <= 32'h3eed3063;
      356: out3 <= 32'h3eebcbbb;
      357: out3 <= 32'h3eea6681;
      358: out3 <= 32'h3ee900b7;
      359: out3 <= 32'h3ee79a5d;
      360: out3 <= 32'h3ee63375;
      361: out3 <= 32'h3ee4cbfe;
      362: out3 <= 32'h3ee363fa;
      363: out3 <= 32'h3ee1fb6a;
      364: out3 <= 32'h3ee0924f;
      365: out3 <= 32'h3edf28a9;
      366: out3 <= 32'h3eddbe79;
      367: out3 <= 32'h3edc53c1;
      368: out3 <= 32'h3edae880;
      369: out3 <= 32'h3ed97cb9;
      370: out3 <= 32'h3ed8106b;
      371: out3 <= 32'h3ed6a399;
      372: out3 <= 32'h3ed53641;
      373: out3 <= 32'h3ed3c867;
      374: out3 <= 32'h3ed25a09;
      375: out3 <= 32'h3ed0eb2a;
      376: out3 <= 32'h3ecf7bca;
      377: out3 <= 32'h3ece0bea;
      378: out3 <= 32'h3ecc9b8b;
      379: out3 <= 32'h3ecb2aae;
      380: out3 <= 32'h3ec9b953;
      381: out3 <= 32'h3ec8477c;
      382: out3 <= 32'h3ec6d529;
      383: out3 <= 32'h3ec5625c;
      384: out3 <= 32'h3ec3ef15;
      385: out3 <= 32'h3ec27b55;
      386: out3 <= 32'h3ec1071e;
      387: out3 <= 32'h3ebf926f;
      388: out3 <= 32'h3ebe1d4a;
      389: out3 <= 32'h3ebca7af;
      390: out3 <= 32'h3ebb31a0;
      391: out3 <= 32'h3eb9bb1e;
      392: out3 <= 32'h3eb8442a;
      393: out3 <= 32'h3eb6ccc3;
      394: out3 <= 32'h3eb554ec;
      395: out3 <= 32'h3eb3dca5;
      396: out3 <= 32'h3eb263ef;
      397: out3 <= 32'h3eb0eacb;
      398: out3 <= 32'h3eaf713a;
      399: out3 <= 32'h3eadf73c;
      400: out3 <= 32'h3eac7cd4;
      401: out3 <= 32'h3eab0201;
      402: out3 <= 32'h3ea986c4;
      403: out3 <= 32'h3ea80b1f;
      404: out3 <= 32'h3ea68f12;
      405: out3 <= 32'h3ea5129f;
      406: out3 <= 32'h3ea395c5;
      407: out3 <= 32'h3ea21887;
      408: out3 <= 32'h3ea09ae5;
      409: out3 <= 32'h3e9f1cdf;
      410: out3 <= 32'h3e9d9e78;
      411: out3 <= 32'h3e9c1faf;
      412: out3 <= 32'h3e9aa086;
      413: out3 <= 32'h3e9920fe;
      414: out3 <= 32'h3e97a117;
      415: out3 <= 32'h3e9620d2;
      416: out3 <= 32'h3e94a031;
      417: out3 <= 32'h3e931f35;
      418: out3 <= 32'h3e919ddd;
      419: out3 <= 32'h3e901c2c;
      420: out3 <= 32'h3e8e9a22;
      421: out3 <= 32'h3e8d17c0;
      422: out3 <= 32'h3e8b9507;
      423: out3 <= 32'h3e8a11f7;
      424: out3 <= 32'h3e888e93;
      425: out3 <= 32'h3e870ada;
      426: out3 <= 32'h3e8586ce;
      427: out3 <= 32'h3e840270;
      428: out3 <= 32'h3e827dc0;
      429: out3 <= 32'h3e80f8c0;
      430: out3 <= 32'h3e7ee6e1;
      431: out3 <= 32'h3e7bdba4;
      432: out3 <= 32'h3e78cfcc;
      433: out3 <= 32'h3e75c35a;
      434: out3 <= 32'h3e72b651;
      435: out3 <= 32'h3e6fa8b2;
      436: out3 <= 32'h3e6c9a7f;
      437: out3 <= 32'h3e698bba;
      438: out3 <= 32'h3e667c66;
      439: out3 <= 32'h3e636c83;
      440: out3 <= 32'h3e605c13;
      441: out3 <= 32'h3e5d4b1a;
      442: out3 <= 32'h3e5a3997;
      443: out3 <= 32'h3e57278f;
      444: out3 <= 32'h3e541501;
      445: out3 <= 32'h3e5101f1;
      446: out3 <= 32'h3e4dee60;
      447: out3 <= 32'h3e4ada4f;
      448: out3 <= 32'h3e47c5c2;
      449: out3 <= 32'h3e44b0b9;
      450: out3 <= 32'h3e419b37;
      451: out3 <= 32'h3e3e853e;
      452: out3 <= 32'h3e3b6ecf;
      453: out3 <= 32'h3e3857ec;
      454: out3 <= 32'h3e354098;
      455: out3 <= 32'h3e3228d4;
      456: out3 <= 32'h3e2f10a2;
      457: out3 <= 32'h3e2bf804;
      458: out3 <= 32'h3e28defc;
      459: out3 <= 32'h3e25c58c;
      460: out3 <= 32'h3e22abb6;
      461: out3 <= 32'h3e1f917b;
      462: out3 <= 32'h3e1c76de;
      463: out3 <= 32'h3e195be0;
      464: out3 <= 32'h3e164083;
      465: out3 <= 32'h3e1324ca;
      466: out3 <= 32'h3e1008b7;
      467: out3 <= 32'h3e0cec4a;
      468: out3 <= 32'h3e09cf86;
      469: out3 <= 32'h3e06b26e;
      470: out3 <= 32'h3e039502;
      471: out3 <= 32'h3e007745;
      472: out3 <= 32'h3dfab273;
      473: out3 <= 32'h3df475c0;
      474: out3 <= 32'h3dee3876;
      475: out3 <= 32'h3de7fa9a;
      476: out3 <= 32'h3de1bc2e;
      477: out3 <= 32'h3ddb7d37;
      478: out3 <= 32'h3dd53db9;
      479: out3 <= 32'h3dcefdb7;
      480: out3 <= 32'h3dc8bd36;
      481: out3 <= 32'h3dc27c39;
      482: out3 <= 32'h3dbc3ac3;
      483: out3 <= 32'h3db5f8da;
      484: out3 <= 32'h3dafb680;
      485: out3 <= 32'h3da973ba;
      486: out3 <= 32'h3da3308c;
      487: out3 <= 32'h3d9cecf9;
      488: out3 <= 32'h3d96a905;
      489: out3 <= 32'h3d9064b4;
      490: out3 <= 32'h3d8a200a;
      491: out3 <= 32'h3d83db0a;
      492: out3 <= 32'h3d7b2b74;
      493: out3 <= 32'h3d6ea038;
      494: out3 <= 32'h3d621469;
      495: out3 <= 32'h3d55880e;
      496: out3 <= 32'h3d48fb30;
      497: out3 <= 32'h3d3c6dd5;
      498: out3 <= 32'h3d2fe007;
      499: out3 <= 32'h3d2351cb;
      500: out3 <= 32'h3d16c32c;
      501: out3 <= 32'h3d0a342f;
      502: out3 <= 32'h3cfb49ba;
      503: out3 <= 32'h3ce22a7a;
      504: out3 <= 32'h3cc90ab0;
      505: out3 <= 32'h3cafea69;
      506: out3 <= 32'h3c96c9b6;
      507: out3 <= 32'h3c7b514b;
      508: out3 <= 32'h3c490e90;
      509: out3 <= 32'h3c16cb58;
      510: out3 <= 32'h3bc90f88;
      511: out3 <= 32'h3b490fc6;
      512: out3 <= 32'h0;
      513: out3 <= 32'hbb490fc6;
      514: out3 <= 32'hbbc90f88;
      515: out3 <= 32'hbc16cb58;
      516: out3 <= 32'hbc490e90;
      517: out3 <= 32'hbc7b514b;
      518: out3 <= 32'hbc96c9b6;
      519: out3 <= 32'hbcafea69;
      520: out3 <= 32'hbcc90ab0;
      521: out3 <= 32'hbce22a7a;
      522: out3 <= 32'hbcfb49ba;
      523: out3 <= 32'hbd0a342f;
      524: out3 <= 32'hbd16c32c;
      525: out3 <= 32'hbd2351cb;
      526: out3 <= 32'hbd2fe007;
      527: out3 <= 32'hbd3c6dd5;
      528: out3 <= 32'hbd48fb30;
      529: out3 <= 32'hbd55880e;
      530: out3 <= 32'hbd621469;
      531: out3 <= 32'hbd6ea038;
      532: out3 <= 32'hbd7b2b74;
      533: out3 <= 32'hbd83db0a;
      534: out3 <= 32'hbd8a200a;
      535: out3 <= 32'hbd9064b4;
      536: out3 <= 32'hbd96a905;
      537: out3 <= 32'hbd9cecf9;
      538: out3 <= 32'hbda3308c;
      539: out3 <= 32'hbda973ba;
      540: out3 <= 32'hbdafb680;
      541: out3 <= 32'hbdb5f8da;
      542: out3 <= 32'hbdbc3ac3;
      543: out3 <= 32'hbdc27c39;
      544: out3 <= 32'hbdc8bd36;
      545: out3 <= 32'hbdcefdb7;
      546: out3 <= 32'hbdd53db9;
      547: out3 <= 32'hbddb7d37;
      548: out3 <= 32'hbde1bc2e;
      549: out3 <= 32'hbde7fa9a;
      550: out3 <= 32'hbdee3876;
      551: out3 <= 32'hbdf475c0;
      552: out3 <= 32'hbdfab273;
      553: out3 <= 32'hbe007745;
      554: out3 <= 32'hbe039502;
      555: out3 <= 32'hbe06b26e;
      556: out3 <= 32'hbe09cf86;
      557: out3 <= 32'hbe0cec4a;
      558: out3 <= 32'hbe1008b7;
      559: out3 <= 32'hbe1324ca;
      560: out3 <= 32'hbe164083;
      561: out3 <= 32'hbe195be0;
      562: out3 <= 32'hbe1c76de;
      563: out3 <= 32'hbe1f917b;
      564: out3 <= 32'hbe22abb6;
      565: out3 <= 32'hbe25c58c;
      566: out3 <= 32'hbe28defc;
      567: out3 <= 32'hbe2bf804;
      568: out3 <= 32'hbe2f10a2;
      569: out3 <= 32'hbe3228d4;
      570: out3 <= 32'hbe354098;
      571: out3 <= 32'hbe3857ec;
      572: out3 <= 32'hbe3b6ecf;
      573: out3 <= 32'hbe3e853e;
      574: out3 <= 32'hbe419b37;
      575: out3 <= 32'hbe44b0b9;
      576: out3 <= 32'hbe47c5c2;
      577: out3 <= 32'hbe4ada4f;
      578: out3 <= 32'hbe4dee60;
      579: out3 <= 32'hbe5101f1;
      580: out3 <= 32'hbe541501;
      581: out3 <= 32'hbe57278f;
      582: out3 <= 32'hbe5a3997;
      583: out3 <= 32'hbe5d4b1a;
      584: out3 <= 32'hbe605c13;
      585: out3 <= 32'hbe636c83;
      586: out3 <= 32'hbe667c66;
      587: out3 <= 32'hbe698bba;
      588: out3 <= 32'hbe6c9a7f;
      589: out3 <= 32'hbe6fa8b2;
      590: out3 <= 32'hbe72b651;
      591: out3 <= 32'hbe75c35a;
      592: out3 <= 32'hbe78cfcc;
      593: out3 <= 32'hbe7bdba4;
      594: out3 <= 32'hbe7ee6e1;
      595: out3 <= 32'hbe80f8c0;
      596: out3 <= 32'hbe827dc0;
      597: out3 <= 32'hbe840270;
      598: out3 <= 32'hbe8586ce;
      599: out3 <= 32'hbe870ada;
      600: out3 <= 32'hbe888e93;
      601: out3 <= 32'hbe8a11f7;
      602: out3 <= 32'hbe8b9507;
      603: out3 <= 32'hbe8d17c0;
      604: out3 <= 32'hbe8e9a22;
      605: out3 <= 32'hbe901c2c;
      606: out3 <= 32'hbe919ddd;
      607: out3 <= 32'hbe931f35;
      608: out3 <= 32'hbe94a031;
      609: out3 <= 32'hbe9620d2;
      610: out3 <= 32'hbe97a117;
      611: out3 <= 32'hbe9920fe;
      612: out3 <= 32'hbe9aa086;
      613: out3 <= 32'hbe9c1faf;
      614: out3 <= 32'hbe9d9e78;
      615: out3 <= 32'hbe9f1cdf;
      616: out3 <= 32'hbea09ae5;
      617: out3 <= 32'hbea21887;
      618: out3 <= 32'hbea395c5;
      619: out3 <= 32'hbea5129f;
      620: out3 <= 32'hbea68f12;
      621: out3 <= 32'hbea80b1f;
      622: out3 <= 32'hbea986c4;
      623: out3 <= 32'hbeab0201;
      624: out3 <= 32'hbeac7cd4;
      625: out3 <= 32'hbeadf73c;
      626: out3 <= 32'hbeaf713a;
      627: out3 <= 32'hbeb0eacb;
      628: out3 <= 32'hbeb263ef;
      629: out3 <= 32'hbeb3dca5;
      630: out3 <= 32'hbeb554ec;
      631: out3 <= 32'hbeb6ccc3;
      632: out3 <= 32'hbeb8442a;
      633: out3 <= 32'hbeb9bb1e;
      634: out3 <= 32'hbebb31a0;
      635: out3 <= 32'hbebca7af;
      636: out3 <= 32'hbebe1d4a;
      637: out3 <= 32'hbebf926f;
      638: out3 <= 32'hbec1071e;
      639: out3 <= 32'hbec27b55;
      640: out3 <= 32'hbec3ef15;
      641: out3 <= 32'hbec5625c;
      642: out3 <= 32'hbec6d529;
      643: out3 <= 32'hbec8477c;
      644: out3 <= 32'hbec9b953;
      645: out3 <= 32'hbecb2aae;
      646: out3 <= 32'hbecc9b8b;
      647: out3 <= 32'hbece0bea;
      648: out3 <= 32'hbecf7bca;
      649: out3 <= 32'hbed0eb2a;
      650: out3 <= 32'hbed25a09;
      651: out3 <= 32'hbed3c867;
      652: out3 <= 32'hbed53641;
      653: out3 <= 32'hbed6a399;
      654: out3 <= 32'hbed8106b;
      655: out3 <= 32'hbed97cb9;
      656: out3 <= 32'hbedae880;
      657: out3 <= 32'hbedc53c1;
      658: out3 <= 32'hbeddbe79;
      659: out3 <= 32'hbedf28a9;
      660: out3 <= 32'hbee0924f;
      661: out3 <= 32'hbee1fb6a;
      662: out3 <= 32'hbee363fa;
      663: out3 <= 32'hbee4cbfe;
      664: out3 <= 32'hbee63375;
      665: out3 <= 32'hbee79a5d;
      666: out3 <= 32'hbee900b7;
      667: out3 <= 32'hbeea6681;
      668: out3 <= 32'hbeebcbbb;
      669: out3 <= 32'hbeed3063;
      670: out3 <= 32'hbeee9479;
      671: out3 <= 32'hbeeff7fb;
      672: out3 <= 32'hbef15aea;
      673: out3 <= 32'hbef2bd43;
      674: out3 <= 32'hbef41f07;
      675: out3 <= 32'hbef58035;
      676: out3 <= 32'hbef6e0cb;
      677: out3 <= 32'hbef840c8;
      678: out3 <= 32'hbef9a02d;
      679: out3 <= 32'hbefafef7;
      680: out3 <= 32'hbefc5d27;
      681: out3 <= 32'hbefdbabb;
      682: out3 <= 32'hbeff17b2;
      683: out3 <= 32'hbf003a06;
      684: out3 <= 32'hbf00e7e4;
      685: out3 <= 32'hbf019573;
      686: out3 <= 32'hbf0242b1;
      687: out3 <= 32'hbf02ef9f;
      688: out3 <= 32'hbf039c3d;
      689: out3 <= 32'hbf044889;
      690: out3 <= 32'hbf04f484;
      691: out3 <= 32'hbf05a02c;
      692: out3 <= 32'hbf064b82;
      693: out3 <= 32'hbf06f686;
      694: out3 <= 32'hbf07a136;
      695: out3 <= 32'hbf084b92;
      696: out3 <= 32'hbf08f59b;
      697: out3 <= 32'hbf099f4e;
      698: out3 <= 32'hbf0a48ad;
      699: out3 <= 32'hbf0af1b7;
      700: out3 <= 32'hbf0b9a6b;
      701: out3 <= 32'hbf0c42c9;
      702: out3 <= 32'hbf0cead0;
      703: out3 <= 32'hbf0d9281;
      704: out3 <= 32'hbf0e39da;
      705: out3 <= 32'hbf0ee0db;
      706: out3 <= 32'hbf0f8784;
      707: out3 <= 32'hbf102dd5;
      708: out3 <= 32'hbf10d3cd;
      709: out3 <= 32'hbf11796b;
      710: out3 <= 32'hbf121eb0;
      711: out3 <= 32'hbf12c39a;
      712: out3 <= 32'hbf13682a;
      713: out3 <= 32'hbf140c5f;
      714: out3 <= 32'hbf14b039;
      715: out3 <= 32'hbf1553b7;
      716: out3 <= 32'hbf15f6d9;
      717: out3 <= 32'hbf16999f;
      718: out3 <= 32'hbf173c07;
      719: out3 <= 32'hbf17de12;
      720: out3 <= 32'hbf187fc0;
      721: out3 <= 32'hbf19210f;
      722: out3 <= 32'hbf19c200;
      723: out3 <= 32'hbf1a6293;
      724: out3 <= 32'hbf1b02c6;
      725: out3 <= 32'hbf1ba299;
      726: out3 <= 32'hbf1c420c;
      727: out3 <= 32'hbf1ce11f;
      728: out3 <= 32'hbf1d7fd1;
      729: out3 <= 32'hbf1e1e22;
      730: out3 <= 32'hbf1ebc12;
      731: out3 <= 32'hbf1f599f;
      732: out3 <= 32'hbf1ff6cb;
      733: out3 <= 32'hbf209393;
      734: out3 <= 32'hbf212ff9;
      735: out3 <= 32'hbf21cbfb;
      736: out3 <= 32'hbf226799;
      737: out3 <= 32'hbf2302d3;
      738: out3 <= 32'hbf239da9;
      739: out3 <= 32'hbf24381a;
      740: out3 <= 32'hbf24d225;
      741: out3 <= 32'hbf256bcb;
      742: out3 <= 32'hbf26050a;
      743: out3 <= 32'hbf269de3;
      744: out3 <= 32'hbf273656;
      745: out3 <= 32'hbf27ce61;
      746: out3 <= 32'hbf286605;
      747: out3 <= 32'hbf28fd41;
      748: out3 <= 32'hbf299415;
      749: out3 <= 32'hbf2a2a80;
      750: out3 <= 32'hbf2ac082;
      751: out3 <= 32'hbf2b561b;
      752: out3 <= 32'hbf2beb4a;
      753: out3 <= 32'hbf2c800f;
      754: out3 <= 32'hbf2d1469;
      755: out3 <= 32'hbf2da859;
      756: out3 <= 32'hbf2e3bde;
      757: out3 <= 32'hbf2ecef7;
      758: out3 <= 32'hbf2f61a5;
      759: out3 <= 32'hbf2ff3e6;
      760: out3 <= 32'hbf3085bb;
      761: out3 <= 32'hbf311722;
      762: out3 <= 32'hbf31a81d;
      763: out3 <= 32'hbf3238aa;
      764: out3 <= 32'hbf32c8c9;
      765: out3 <= 32'hbf33587a;
      766: out3 <= 32'hbf33e7bc;
      767: out3 <= 32'hbf34768f;
      768: out3 <= 32'hbf3504f3;
      769: out3 <= 32'hbf3592e7;
      770: out3 <= 32'hbf36206c;
      771: out3 <= 32'hbf36ad7f;
      772: out3 <= 32'hbf373a23;
      773: out3 <= 32'hbf37c655;
      774: out3 <= 32'hbf385216;
      775: out3 <= 32'hbf38dd65;
      776: out3 <= 32'hbf396842;
      777: out3 <= 32'hbf39f2ac;
      778: out3 <= 32'hbf3a7ca4;
      779: out3 <= 32'hbf3b0629;
      780: out3 <= 32'hbf3b8f3b;
      781: out3 <= 32'hbf3c17d9;
      782: out3 <= 32'hbf3ca003;
      783: out3 <= 32'hbf3d27b8;
      784: out3 <= 32'hbf3daef9;
      785: out3 <= 32'hbf3e35c5;
      786: out3 <= 32'hbf3ebc1b;
      787: out3 <= 32'hbf3f41fc;
      788: out3 <= 32'hbf3fc767;
      789: out3 <= 32'hbf404c5c;
      790: out3 <= 32'hbf40d0da;
      791: out3 <= 32'hbf4154e1;
      792: out3 <= 32'hbf41d870;
      793: out3 <= 32'hbf425b89;
      794: out3 <= 32'hbf42de29;
      795: out3 <= 32'hbf436051;
      796: out3 <= 32'hbf43e200;
      797: out3 <= 32'hbf446337;
      798: out3 <= 32'hbf44e3f5;
      799: out3 <= 32'hbf456439;
      800: out3 <= 32'hbf45e403;
      801: out3 <= 32'hbf466354;
      802: out3 <= 32'hbf46e22a;
      803: out3 <= 32'hbf476085;
      804: out3 <= 32'hbf47de65;
      805: out3 <= 32'hbf485bca;
      806: out3 <= 32'hbf48d8b3;
      807: out3 <= 32'hbf495521;
      808: out3 <= 32'hbf49d112;
      809: out3 <= 32'hbf4a4c87;
      810: out3 <= 32'hbf4ac77f;
      811: out3 <= 32'hbf4b41fa;
      812: out3 <= 32'hbf4bbbf8;
      813: out3 <= 32'hbf4c3578;
      814: out3 <= 32'hbf4cae79;
      815: out3 <= 32'hbf4d26fd;
      816: out3 <= 32'hbf4d9f02;
      817: out3 <= 32'hbf4e1689;
      818: out3 <= 32'hbf4e8d90;
      819: out3 <= 32'hbf4f0417;
      820: out3 <= 32'hbf4f7a1f;
      821: out3 <= 32'hbf4fefa8;
      822: out3 <= 32'hbf5064af;
      823: out3 <= 32'hbf50d937;
      824: out3 <= 32'hbf514d3d;
      825: out3 <= 32'hbf51c0c2;
      826: out3 <= 32'hbf5233c6;
      827: out3 <= 32'hbf52a649;
      828: out3 <= 32'hbf531849;
      829: out3 <= 32'hbf5389c7;
      830: out3 <= 32'hbf53fac3;
      831: out3 <= 32'hbf546b3b;
      832: out3 <= 32'hbf54db31;
      833: out3 <= 32'hbf554aa4;
      834: out3 <= 32'hbf55b993;
      835: out3 <= 32'hbf5627fe;
      836: out3 <= 32'hbf5695e5;
      837: out3 <= 32'hbf570348;
      838: out3 <= 32'hbf577026;
      839: out3 <= 32'hbf57dc7f;
      840: out3 <= 32'hbf584853;
      841: out3 <= 32'hbf58b3a1;
      842: out3 <= 32'hbf591e6a;
      843: out3 <= 32'hbf5988ad;
      844: out3 <= 32'hbf59f26a;
      845: out3 <= 32'hbf5a5ba0;
      846: out3 <= 32'hbf5ac450;
      847: out3 <= 32'hbf5b2c79;
      848: out3 <= 32'hbf5b941a;
      849: out3 <= 32'hbf5bfb34;
      850: out3 <= 32'hbf5c61c7;
      851: out3 <= 32'hbf5cc7d1;
      852: out3 <= 32'hbf5d2d53;
      853: out3 <= 32'hbf5d924d;
      854: out3 <= 32'hbf5df6be;
      855: out3 <= 32'hbf5e5aa6;
      856: out3 <= 32'hbf5ebe05;
      857: out3 <= 32'hbf5f20db;
      858: out3 <= 32'hbf5f8327;
      859: out3 <= 32'hbf5fe4e9;
      860: out3 <= 32'hbf604621;
      861: out3 <= 32'hbf60a6cf;
      862: out3 <= 32'hbf6106f2;
      863: out3 <= 32'hbf61668a;
      864: out3 <= 32'hbf61c598;
      865: out3 <= 32'hbf62241a;
      866: out3 <= 32'hbf628210;
      867: out3 <= 32'hbf62df7b;
      868: out3 <= 32'hbf633c5a;
      869: out3 <= 32'hbf6398ac;
      870: out3 <= 32'hbf63f473;
      871: out3 <= 32'hbf644fac;
      872: out3 <= 32'hbf64aa59;
      873: out3 <= 32'hbf650479;
      874: out3 <= 32'hbf655e0b;
      875: out3 <= 32'hbf65b710;
      876: out3 <= 32'hbf660f88;
      877: out3 <= 32'hbf666771;
      878: out3 <= 32'hbf66becc;
      879: out3 <= 32'hbf671599;
      880: out3 <= 32'hbf676bd8;
      881: out3 <= 32'hbf67c187;
      882: out3 <= 32'hbf6816a8;
      883: out3 <= 32'hbf686b39;
      884: out3 <= 32'hbf68bf3c;
      885: out3 <= 32'hbf6912ae;
      886: out3 <= 32'hbf696591;
      887: out3 <= 32'hbf69b7e4;
      888: out3 <= 32'hbf6a09a7;
      889: out3 <= 32'hbf6a5ad9;
      890: out3 <= 32'hbf6aab7b;
      891: out3 <= 32'hbf6afb8c;
      892: out3 <= 32'hbf6b4b0c;
      893: out3 <= 32'hbf6b99fb;
      894: out3 <= 32'hbf6be858;
      895: out3 <= 32'hbf6c3624;
      896: out3 <= 32'hbf6c835e;
      897: out3 <= 32'hbf6cd007;
      898: out3 <= 32'hbf6d1c1d;
      899: out3 <= 32'hbf6d67a1;
      900: out3 <= 32'hbf6db293;
      901: out3 <= 32'hbf6dfcf2;
      902: out3 <= 32'hbf6e46be;
      903: out3 <= 32'hbf6e8ff8;
      904: out3 <= 32'hbf6ed89e;
      905: out3 <= 32'hbf6f20b0;
      906: out3 <= 32'hbf6f6830;
      907: out3 <= 32'hbf6faf1b;
      908: out3 <= 32'hbf6ff573;
      909: out3 <= 32'hbf703b37;
      910: out3 <= 32'hbf708066;
      911: out3 <= 32'hbf70c501;
      912: out3 <= 32'hbf710908;
      913: out3 <= 32'hbf714c7a;
      914: out3 <= 32'hbf718f57;
      915: out3 <= 32'hbf71d19f;
      916: out3 <= 32'hbf721352;
      917: out3 <= 32'hbf725470;
      918: out3 <= 32'hbf7294f8;
      919: out3 <= 32'hbf72d4eb;
      920: out3 <= 32'hbf731447;
      921: out3 <= 32'hbf73530e;
      922: out3 <= 32'hbf73913f;
      923: out3 <= 32'hbf73ced9;
      924: out3 <= 32'hbf740bdd;
      925: out3 <= 32'hbf74484b;
      926: out3 <= 32'hbf748422;
      927: out3 <= 32'hbf74bf62;
      928: out3 <= 32'hbf74fa0b;
      929: out3 <= 32'hbf75341d;
      930: out3 <= 32'hbf756d97;
      931: out3 <= 32'hbf75a67b;
      932: out3 <= 32'hbf75dec6;
      933: out3 <= 32'hbf76167a;
      934: out3 <= 32'hbf764d97;
      935: out3 <= 32'hbf76841b;
      936: out3 <= 32'hbf76ba07;
      937: out3 <= 32'hbf76ef5b;
      938: out3 <= 32'hbf772417;
      939: out3 <= 32'hbf77583a;
      940: out3 <= 32'hbf778bc5;
      941: out3 <= 32'hbf77beb7;
      942: out3 <= 32'hbf77f110;
      943: out3 <= 32'hbf7822d1;
      944: out3 <= 32'hbf7853f8;
      945: out3 <= 32'hbf788486;
      946: out3 <= 32'hbf78b47b;
      947: out3 <= 32'hbf78e3d6;
      948: out3 <= 32'hbf791298;
      949: out3 <= 32'hbf7940c0;
      950: out3 <= 32'hbf796e4e;
      951: out3 <= 32'hbf799b43;
      952: out3 <= 32'hbf79c79d;
      953: out3 <= 32'hbf79f35e;
      954: out3 <= 32'hbf7a1e84;
      955: out3 <= 32'hbf7a4910;
      956: out3 <= 32'hbf7a7302;
      957: out3 <= 32'hbf7a9c59;
      958: out3 <= 32'hbf7ac516;
      959: out3 <= 32'hbf7aed37;
      960: out3 <= 32'hbf7b14be;
      961: out3 <= 32'hbf7b3bab;
      962: out3 <= 32'hbf7b61fc;
      963: out3 <= 32'hbf7b87b2;
      964: out3 <= 32'hbf7baccd;
      965: out3 <= 32'hbf7bd14d;
      966: out3 <= 32'hbf7bf531;
      967: out3 <= 32'hbf7c187a;
      968: out3 <= 32'hbf7c3b28;
      969: out3 <= 32'hbf7c5d3a;
      970: out3 <= 32'hbf7c7eb0;
      971: out3 <= 32'hbf7c9f8a;
      972: out3 <= 32'hbf7cbfc9;
      973: out3 <= 32'hbf7cdf6c;
      974: out3 <= 32'hbf7cfe73;
      975: out3 <= 32'hbf7d1cdd;
      976: out3 <= 32'hbf7d3aac;
      977: out3 <= 32'hbf7d57de;
      978: out3 <= 32'hbf7d7474;
      979: out3 <= 32'hbf7d906e;
      980: out3 <= 32'hbf7dabcc;
      981: out3 <= 32'hbf7dc68c;
      982: out3 <= 32'hbf7de0b1;
      983: out3 <= 32'hbf7dfa38;
      984: out3 <= 32'hbf7e1324;
      985: out3 <= 32'hbf7e2b72;
      986: out3 <= 32'hbf7e4323;
      987: out3 <= 32'hbf7e5a38;
      988: out3 <= 32'hbf7e70b0;
      989: out3 <= 32'hbf7e868b;
      990: out3 <= 32'hbf7e9bc9;
      991: out3 <= 32'hbf7eb069;
      992: out3 <= 32'hbf7ec46d;
      993: out3 <= 32'hbf7ed7d4;
      994: out3 <= 32'hbf7eea9d;
      995: out3 <= 32'hbf7efcc9;
      996: out3 <= 32'hbf7f0e58;
      997: out3 <= 32'hbf7f1f49;
      998: out3 <= 32'hbf7f2f9d;
      999: out3 <= 32'hbf7f3f54;
      1000: out3 <= 32'hbf7f4e6d;
      1001: out3 <= 32'hbf7f5ce9;
      1002: out3 <= 32'hbf7f6ac7;
      1003: out3 <= 32'hbf7f7808;
      1004: out3 <= 32'hbf7f84ab;
      1005: out3 <= 32'hbf7f90b1;
      1006: out3 <= 32'hbf7f9c18;
      1007: out3 <= 32'hbf7fa6e3;
      1008: out3 <= 32'hbf7fb10f;
      1009: out3 <= 32'hbf7fba9e;
      1010: out3 <= 32'hbf7fc38f;
      1011: out3 <= 32'hbf7fcbe2;
      1012: out3 <= 32'hbf7fd397;
      1013: out3 <= 32'hbf7fdaaf;
      1014: out3 <= 32'hbf7fe129;
      1015: out3 <= 32'hbf7fe705;
      1016: out3 <= 32'hbf7fec43;
      1017: out3 <= 32'hbf7ff0e3;
      1018: out3 <= 32'hbf7ff4e6;
      1019: out3 <= 32'hbf7ff84a;
      1020: out3 <= 32'hbf7ffb11;
      1021: out3 <= 32'hbf7ffd39;
      1022: out3 <= 32'hbf7ffec4;
      1023: out3 <= 32'hbf7fffb1;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 24
// Gap: 1
module codeBlock93968(clk, reset, next_in, next_out,
   i2_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [9:0] i2_in;
   reg [9:0] i2;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(23, 1) shiftFIFO_110246(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a113;
   wire signed [31:0] a102;
   wire signed [31:0] a116;
   wire signed [31:0] a106;
   wire signed [31:0] a117;
   wire signed [31:0] a118;
   reg signed [31:0] tm844;
   reg signed [31:0] tm848;
   reg signed [31:0] tm860;
   reg signed [31:0] tm883;
   reg signed [31:0] tm845;
   reg signed [31:0] tm849;
   reg signed [31:0] tm861;
   reg signed [31:0] tm884;
   wire signed [31:0] tm38;
   wire signed [31:0] a107;
   wire signed [31:0] tm39;
   wire signed [31:0] a109;
   reg signed [31:0] tm846;
   reg signed [31:0] tm850;
   reg signed [31:0] tm862;
   reg signed [31:0] tm885;
   reg signed [31:0] tm120;
   reg signed [31:0] tm121;
   reg signed [31:0] tm847;
   reg signed [31:0] tm851;
   reg signed [31:0] tm863;
   reg signed [31:0] tm886;
   reg signed [31:0] tm864;
   reg signed [31:0] tm887;
   reg signed [31:0] tm865;
   reg signed [31:0] tm888;
   reg signed [31:0] tm866;
   reg signed [31:0] tm889;
   reg signed [31:0] tm867;
   reg signed [31:0] tm890;
   reg signed [31:0] tm868;
   reg signed [31:0] tm891;
   reg signed [31:0] tm869;
   reg signed [31:0] tm892;
   reg signed [31:0] tm870;
   reg signed [31:0] tm893;
   wire  [31:0] a108;
   wire  [31:0] a110;
   wire  [31:0] a111;
   wire  [31:0] a112;
   reg signed [31:0] tm871;
   reg signed [31:0] tm894;
   reg signed [31:0] tm872;
   reg signed [31:0] tm895;
   reg signed [31:0] tm873;
   reg signed [31:0] tm896;
   reg signed [31:0] tm874;
   reg signed [31:0] tm897;
   reg signed [31:0] tm875;
   reg signed [31:0] tm898;
   reg signed [31:0] tm876;
   reg signed [31:0] tm899;
   reg signed [31:0] tm877;
   reg signed [31:0] tm900;
   reg signed [31:0] tm878;
   reg signed [31:0] tm901;
   reg signed [31:0] tm879;
   reg signed [31:0] tm902;
   reg signed [31:0] tm880;
   reg signed [31:0] tm903;
   reg signed [31:0] tm881;
   reg signed [31:0] tm904;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire  [31:0] Y2;
   wire  [31:0] Y3;
   reg signed [31:0] tm882;
   reg signed [31:0] tm905;


   assign a113 = X0;
   assign a102 = a113;
   assign a116 = X1;
   assign a106 = a116;
   assign a117 = X2;
   assign a118 = X3;
   assign a107 = tm38;
   assign a109 = tm39;
   assign Y0 = tm882;
   assign Y1 = tm905;

   D8_95154 instD8inst0_95154(.addr(i2[9:0]), .out(tm39), .clk(clk));

   D6_96180 instD6inst0_96180(.addr(i2[9:0]), .out(tm38), .clk(clk));

    multfp32fp32 m94067(.a(tm120), .b(tm847), .clk(clk), .out(a108), .enable(1'b1), .rst(reset));
    multfp32fp32 m94089(.a(tm121), .b(tm851), .clk(clk), .out(a110), .enable(1'b1), .rst(reset));
    multfp32fp32 m94107(.a(tm121), .b(tm847), .clk(clk), .out(a111), .enable(1'b1), .rst(reset));
    multfp32fp32 m94118(.a(tm120), .b(tm851), .clk(clk), .out(a112), .enable(1'b1), .rst(reset));
    subfp32 sub94096(.a(a108), .b(a110), .clk(clk), .out(Y2), .enable(1'b1), .rst(reset));
    addfp32 add94125(.a(a111), .b(a112), .clk(clk), .out(Y3), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
         tm120 <= 0;
         tm847 <= 0;
         tm121 <= 0;
         tm851 <= 0;
         tm121 <= 0;
         tm847 <= 0;
         tm120 <= 0;
         tm851 <= 0;
      end
      else begin
         i2 <= i2_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
         tm844 <= a117;
         tm848 <= a118;
         tm860 <= a102;
         tm883 <= a106;
         tm845 <= tm844;
         tm849 <= tm848;
         tm861 <= tm860;
         tm884 <= tm883;
         tm846 <= tm845;
         tm850 <= tm849;
         tm862 <= tm861;
         tm885 <= tm884;
         tm120 <= a107;
         tm121 <= a109;
         tm847 <= tm846;
         tm851 <= tm850;
         tm863 <= tm862;
         tm886 <= tm885;
         tm864 <= tm863;
         tm887 <= tm886;
         tm865 <= tm864;
         tm888 <= tm887;
         tm866 <= tm865;
         tm889 <= tm888;
         tm867 <= tm866;
         tm890 <= tm889;
         tm868 <= tm867;
         tm891 <= tm890;
         tm869 <= tm868;
         tm892 <= tm891;
         tm870 <= tm869;
         tm893 <= tm892;
         tm871 <= tm870;
         tm894 <= tm893;
         tm872 <= tm871;
         tm895 <= tm894;
         tm873 <= tm872;
         tm896 <= tm895;
         tm874 <= tm873;
         tm897 <= tm896;
         tm875 <= tm874;
         tm898 <= tm897;
         tm876 <= tm875;
         tm899 <= tm898;
         tm877 <= tm876;
         tm900 <= tm899;
         tm878 <= tm877;
         tm901 <= tm900;
         tm879 <= tm878;
         tm902 <= tm901;
         tm880 <= tm879;
         tm903 <= tm902;
         tm881 <= tm880;
         tm904 <= tm903;
         tm882 <= tm881;
         tm905 <= tm904;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock98237(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(11, 1) shiftFIFO_110249(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a69;
   wire signed [31:0] a70;
   wire signed [31:0] a71;
   wire signed [31:0] a72;
   wire  [31:0] t45;
   wire  [31:0] t46;
   wire  [31:0] t47;
   wire  [31:0] t48;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a69 = X0;
   assign a70 = X2;
   assign a71 = X1;
   assign a72 = X3;
   assign Y0 = t45;
   assign Y1 = t46;
   assign Y2 = t47;
   assign Y3 = t48;

    addfp32 add98249(.a(a69), .b(a70), .clk(clk), .out(t45), .enable(1'b1), .rst(reset));
    addfp32 add98264(.a(a71), .b(a72), .clk(clk), .out(t46), .enable(1'b1), .rst(reset));
    subfp32 sub98279(.a(a69), .b(a70), .clk(clk), .out(t47), .enable(1'b1), .rst(reset));
    subfp32 sub98294(.a(a71), .b(a72), .clk(clk), .out(t48), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 1027
// Gap: 2048
module rc98318(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm98316 instPerm110250(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 1027
// Gap: 2048
module perm98316(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 2048;
   parameter logDepth = 11;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[11] ^ addr0[0];
   assign inAddr0[0] = addr0[1];
   assign inAddr0[1] = addr0[2];
   assign inAddr0[2] = addr0[3];
   assign inAddr0[3] = addr0[4];
   assign inAddr0[4] = addr0[5];
   assign inAddr0[5] = addr0[6];
   assign inAddr0[6] = addr0[7];
   assign inAddr0[7] = addr0[8];
   assign inAddr0[8] = addr0[9];
   assign inAddr0[9] = addr0[10];
   assign inAddr0[10] = addr0[0];
   assign outBank0[0] = addr0b[11] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outAddr0[3] = addr0b[4];
   assign outAddr0[4] = addr0b[5];
   assign outAddr0[5] = addr0b[6];
   assign outAddr0[6] = addr0b[7];
   assign outAddr0[7] = addr0b[8];
   assign outAddr0[8] = addr0b[9];
   assign outAddr0[9] = addr0b[10];
   assign outAddr0[10] = addr0b[11];
   assign outBank_a0[0] = addr0c[11] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];
   assign outAddr_a0[3] = addr0c[4];
   assign outAddr_a0[4] = addr0c[5];
   assign outAddr_a0[5] = addr0c[6];
   assign outAddr_a0[6] = addr0c[7];
   assign outAddr_a0[7] = addr0c[8];
   assign outAddr_a0[8] = addr0c[9];
   assign outAddr_a0[9] = addr0c[10];
   assign outAddr_a0[10] = addr0c[11];

   assign inBank1[0] = addr1[11] ^ addr1[0];
   assign inAddr1[0] = addr1[1];
   assign inAddr1[1] = addr1[2];
   assign inAddr1[2] = addr1[3];
   assign inAddr1[3] = addr1[4];
   assign inAddr1[4] = addr1[5];
   assign inAddr1[5] = addr1[6];
   assign inAddr1[6] = addr1[7];
   assign inAddr1[7] = addr1[8];
   assign inAddr1[8] = addr1[9];
   assign inAddr1[9] = addr1[10];
   assign inAddr1[10] = addr1[0];
   assign outBank1[0] = addr1b[11] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outAddr1[3] = addr1b[4];
   assign outAddr1[4] = addr1b[5];
   assign outAddr1[5] = addr1b[6];
   assign outAddr1[6] = addr1b[7];
   assign outAddr1[7] = addr1b[8];
   assign outAddr1[8] = addr1b[9];
   assign outAddr1[9] = addr1b[10];
   assign outAddr1[10] = addr1b[11];
   assign outBank_a1[0] = addr1c[11] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];
   assign outAddr_a1[3] = addr1c[4];
   assign outAddr_a1[4] = addr1c[5];
   assign outAddr_a1[5] = addr1c[6];
   assign outAddr_a1[6] = addr1c[7];
   assign outAddr_a1[7] = addr1c[8];
   assign outAddr_a1[8] = addr1c[9];
   assign outAddr_a1[9] = addr1c[10];
   assign outAddr_a1[10] = addr1c[11];

   nextReg #(1025, 11) nextReg_110255(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110258(.X(next0), .Y(next_out), .clk(clk));


   memArray4096_98316 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 1024)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 1026)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 1024) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 2047) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 1024)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[10];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[10];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[10];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray4096_98316(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 2048;
   parameter logDepth = 11;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   nextReg #(2048, 11) nextReg_110263(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 24
// Gap: 2048
module DirSum_106682(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   input clk, reset, next;

   reg [10:0] i1;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   always @(posedge clk) begin
      if (reset == 1) begin
         i1 <= 0;
      end
      else begin
         if (next == 1)
            i1 <= 0;
         else if (i1 == 2047)
            i1 <= 0;
         else
            i1 <= i1 + 1;
      end
   end

   codeBlock98320 codeBlockIsnt110268(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3));

endmodule

module D2_100530(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [10:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h3f7fffec;
      2: out3 <= 32'h3f7fffb1;
      3: out3 <= 32'h3f7fff4e;
      4: out3 <= 32'h3f7ffec4;
      5: out3 <= 32'h3f7ffe13;
      6: out3 <= 32'h3f7ffd39;
      7: out3 <= 32'h3f7ffc39;
      8: out3 <= 32'h3f7ffb11;
      9: out3 <= 32'h3f7ff9c1;
      10: out3 <= 32'h3f7ff84a;
      11: out3 <= 32'h3f7ff6ac;
      12: out3 <= 32'h3f7ff4e6;
      13: out3 <= 32'h3f7ff2f8;
      14: out3 <= 32'h3f7ff0e3;
      15: out3 <= 32'h3f7feea7;
      16: out3 <= 32'h3f7fec43;
      17: out3 <= 32'h3f7fe9b8;
      18: out3 <= 32'h3f7fe705;
      19: out3 <= 32'h3f7fe42b;
      20: out3 <= 32'h3f7fe129;
      21: out3 <= 32'h3f7fde00;
      22: out3 <= 32'h3f7fdaaf;
      23: out3 <= 32'h3f7fd737;
      24: out3 <= 32'h3f7fd397;
      25: out3 <= 32'h3f7fcfd1;
      26: out3 <= 32'h3f7fcbe2;
      27: out3 <= 32'h3f7fc7cc;
      28: out3 <= 32'h3f7fc38f;
      29: out3 <= 32'h3f7fbf2a;
      30: out3 <= 32'h3f7fba9e;
      31: out3 <= 32'h3f7fb5ea;
      32: out3 <= 32'h3f7fb10f;
      33: out3 <= 32'h3f7fac0d;
      34: out3 <= 32'h3f7fa6e3;
      35: out3 <= 32'h3f7fa191;
      36: out3 <= 32'h3f7f9c18;
      37: out3 <= 32'h3f7f9678;
      38: out3 <= 32'h3f7f90b1;
      39: out3 <= 32'h3f7f8ac2;
      40: out3 <= 32'h3f7f84ab;
      41: out3 <= 32'h3f7f7e6d;
      42: out3 <= 32'h3f7f7808;
      43: out3 <= 32'h3f7f717b;
      44: out3 <= 32'h3f7f6ac7;
      45: out3 <= 32'h3f7f63ec;
      46: out3 <= 32'h3f7f5ce9;
      47: out3 <= 32'h3f7f55bf;
      48: out3 <= 32'h3f7f4e6d;
      49: out3 <= 32'h3f7f46f4;
      50: out3 <= 32'h3f7f3f54;
      51: out3 <= 32'h3f7f378c;
      52: out3 <= 32'h3f7f2f9d;
      53: out3 <= 32'h3f7f2787;
      54: out3 <= 32'h3f7f1f49;
      55: out3 <= 32'h3f7f16e4;
      56: out3 <= 32'h3f7f0e58;
      57: out3 <= 32'h3f7f05a4;
      58: out3 <= 32'h3f7efcc9;
      59: out3 <= 32'h3f7ef3c7;
      60: out3 <= 32'h3f7eea9d;
      61: out3 <= 32'h3f7ee14c;
      62: out3 <= 32'h3f7ed7d4;
      63: out3 <= 32'h3f7ece34;
      64: out3 <= 32'h3f7ec46d;
      65: out3 <= 32'h3f7eba7f;
      66: out3 <= 32'h3f7eb069;
      67: out3 <= 32'h3f7ea62d;
      68: out3 <= 32'h3f7e9bc9;
      69: out3 <= 32'h3f7e913d;
      70: out3 <= 32'h3f7e868b;
      71: out3 <= 32'h3f7e7bb1;
      72: out3 <= 32'h3f7e70b0;
      73: out3 <= 32'h3f7e6588;
      74: out3 <= 32'h3f7e5a38;
      75: out3 <= 32'h3f7e4ec1;
      76: out3 <= 32'h3f7e4323;
      77: out3 <= 32'h3f7e375e;
      78: out3 <= 32'h3f7e2b72;
      79: out3 <= 32'h3f7e1f5e;
      80: out3 <= 32'h3f7e1324;
      81: out3 <= 32'h3f7e06c2;
      82: out3 <= 32'h3f7dfa38;
      83: out3 <= 32'h3f7ded88;
      84: out3 <= 32'h3f7de0b1;
      85: out3 <= 32'h3f7dd3b2;
      86: out3 <= 32'h3f7dc68c;
      87: out3 <= 32'h3f7db940;
      88: out3 <= 32'h3f7dabcc;
      89: out3 <= 32'h3f7d9e30;
      90: out3 <= 32'h3f7d906e;
      91: out3 <= 32'h3f7d8285;
      92: out3 <= 32'h3f7d7474;
      93: out3 <= 32'h3f7d663d;
      94: out3 <= 32'h3f7d57de;
      95: out3 <= 32'h3f7d4959;
      96: out3 <= 32'h3f7d3aac;
      97: out3 <= 32'h3f7d2bd8;
      98: out3 <= 32'h3f7d1cdd;
      99: out3 <= 32'h3f7d0dbc;
      100: out3 <= 32'h3f7cfe73;
      101: out3 <= 32'h3f7cef03;
      102: out3 <= 32'h3f7cdf6c;
      103: out3 <= 32'h3f7ccfae;
      104: out3 <= 32'h3f7cbfc9;
      105: out3 <= 32'h3f7cafbd;
      106: out3 <= 32'h3f7c9f8a;
      107: out3 <= 32'h3f7c8f31;
      108: out3 <= 32'h3f7c7eb0;
      109: out3 <= 32'h3f7c6e08;
      110: out3 <= 32'h3f7c5d3a;
      111: out3 <= 32'h3f7c4c44;
      112: out3 <= 32'h3f7c3b28;
      113: out3 <= 32'h3f7c29e5;
      114: out3 <= 32'h3f7c187a;
      115: out3 <= 32'h3f7c06e9;
      116: out3 <= 32'h3f7bf531;
      117: out3 <= 32'h3f7be353;
      118: out3 <= 32'h3f7bd14d;
      119: out3 <= 32'h3f7bbf20;
      120: out3 <= 32'h3f7baccd;
      121: out3 <= 32'h3f7b9a53;
      122: out3 <= 32'h3f7b87b2;
      123: out3 <= 32'h3f7b74ea;
      124: out3 <= 32'h3f7b61fc;
      125: out3 <= 32'h3f7b4ee7;
      126: out3 <= 32'h3f7b3bab;
      127: out3 <= 32'h3f7b2848;
      128: out3 <= 32'h3f7b14be;
      129: out3 <= 32'h3f7b010e;
      130: out3 <= 32'h3f7aed37;
      131: out3 <= 32'h3f7ad93a;
      132: out3 <= 32'h3f7ac516;
      133: out3 <= 32'h3f7ab0cb;
      134: out3 <= 32'h3f7a9c59;
      135: out3 <= 32'h3f7a87c1;
      136: out3 <= 32'h3f7a7302;
      137: out3 <= 32'h3f7a5e1c;
      138: out3 <= 32'h3f7a4910;
      139: out3 <= 32'h3f7a33dd;
      140: out3 <= 32'h3f7a1e84;
      141: out3 <= 32'h3f7a0904;
      142: out3 <= 32'h3f79f35e;
      143: out3 <= 32'h3f79dd91;
      144: out3 <= 32'h3f79c79d;
      145: out3 <= 32'h3f79b183;
      146: out3 <= 32'h3f799b43;
      147: out3 <= 32'h3f7984dc;
      148: out3 <= 32'h3f796e4e;
      149: out3 <= 32'h3f79579a;
      150: out3 <= 32'h3f7940c0;
      151: out3 <= 32'h3f7929bf;
      152: out3 <= 32'h3f791298;
      153: out3 <= 32'h3f78fb4a;
      154: out3 <= 32'h3f78e3d6;
      155: out3 <= 32'h3f78cc3b;
      156: out3 <= 32'h3f78b47b;
      157: out3 <= 32'h3f789c93;
      158: out3 <= 32'h3f788486;
      159: out3 <= 32'h3f786c52;
      160: out3 <= 32'h3f7853f8;
      161: out3 <= 32'h3f783b77;
      162: out3 <= 32'h3f7822d1;
      163: out3 <= 32'h3f780a04;
      164: out3 <= 32'h3f77f110;
      165: out3 <= 32'h3f77d7f7;
      166: out3 <= 32'h3f77beb7;
      167: out3 <= 32'h3f77a551;
      168: out3 <= 32'h3f778bc5;
      169: out3 <= 32'h3f777213;
      170: out3 <= 32'h3f77583a;
      171: out3 <= 32'h3f773e3c;
      172: out3 <= 32'h3f772417;
      173: out3 <= 32'h3f7709cc;
      174: out3 <= 32'h3f76ef5b;
      175: out3 <= 32'h3f76d4c4;
      176: out3 <= 32'h3f76ba07;
      177: out3 <= 32'h3f769f24;
      178: out3 <= 32'h3f76841b;
      179: out3 <= 32'h3f7668ec;
      180: out3 <= 32'h3f764d97;
      181: out3 <= 32'h3f76321b;
      182: out3 <= 32'h3f76167a;
      183: out3 <= 32'h3f75fab3;
      184: out3 <= 32'h3f75dec6;
      185: out3 <= 32'h3f75c2b3;
      186: out3 <= 32'h3f75a67b;
      187: out3 <= 32'h3f758a1c;
      188: out3 <= 32'h3f756d97;
      189: out3 <= 32'h3f7550ed;
      190: out3 <= 32'h3f75341d;
      191: out3 <= 32'h3f751727;
      192: out3 <= 32'h3f74fa0b;
      193: out3 <= 32'h3f74dcc9;
      194: out3 <= 32'h3f74bf62;
      195: out3 <= 32'h3f74a1d5;
      196: out3 <= 32'h3f748422;
      197: out3 <= 32'h3f746649;
      198: out3 <= 32'h3f74484b;
      199: out3 <= 32'h3f742a27;
      200: out3 <= 32'h3f740bdd;
      201: out3 <= 32'h3f73ed6e;
      202: out3 <= 32'h3f73ced9;
      203: out3 <= 32'h3f73b01f;
      204: out3 <= 32'h3f73913f;
      205: out3 <= 32'h3f737239;
      206: out3 <= 32'h3f73530e;
      207: out3 <= 32'h3f7333be;
      208: out3 <= 32'h3f731447;
      209: out3 <= 32'h3f72f4ac;
      210: out3 <= 32'h3f72d4eb;
      211: out3 <= 32'h3f72b504;
      212: out3 <= 32'h3f7294f8;
      213: out3 <= 32'h3f7274c7;
      214: out3 <= 32'h3f725470;
      215: out3 <= 32'h3f7233f4;
      216: out3 <= 32'h3f721352;
      217: out3 <= 32'h3f71f28c;
      218: out3 <= 32'h3f71d19f;
      219: out3 <= 32'h3f71b08e;
      220: out3 <= 32'h3f718f57;
      221: out3 <= 32'h3f716dfb;
      222: out3 <= 32'h3f714c7a;
      223: out3 <= 32'h3f712ad4;
      224: out3 <= 32'h3f710908;
      225: out3 <= 32'h3f70e717;
      226: out3 <= 32'h3f70c501;
      227: out3 <= 32'h3f70a2c6;
      228: out3 <= 32'h3f708066;
      229: out3 <= 32'h3f705de1;
      230: out3 <= 32'h3f703b37;
      231: out3 <= 32'h3f701867;
      232: out3 <= 32'h3f6ff573;
      233: out3 <= 32'h3f6fd25a;
      234: out3 <= 32'h3f6faf1b;
      235: out3 <= 32'h3f6f8bb8;
      236: out3 <= 32'h3f6f6830;
      237: out3 <= 32'h3f6f4483;
      238: out3 <= 32'h3f6f20b0;
      239: out3 <= 32'h3f6efcba;
      240: out3 <= 32'h3f6ed89e;
      241: out3 <= 32'h3f6eb45d;
      242: out3 <= 32'h3f6e8ff8;
      243: out3 <= 32'h3f6e6b6d;
      244: out3 <= 32'h3f6e46be;
      245: out3 <= 32'h3f6e21eb;
      246: out3 <= 32'h3f6dfcf2;
      247: out3 <= 32'h3f6dd7d5;
      248: out3 <= 32'h3f6db293;
      249: out3 <= 32'h3f6d8d2d;
      250: out3 <= 32'h3f6d67a1;
      251: out3 <= 32'h3f6d41f2;
      252: out3 <= 32'h3f6d1c1d;
      253: out3 <= 32'h3f6cf624;
      254: out3 <= 32'h3f6cd007;
      255: out3 <= 32'h3f6ca9c5;
      256: out3 <= 32'h3f6c835e;
      257: out3 <= 32'h3f6c5cd4;
      258: out3 <= 32'h3f6c3624;
      259: out3 <= 32'h3f6c0f50;
      260: out3 <= 32'h3f6be858;
      261: out3 <= 32'h3f6bc13b;
      262: out3 <= 32'h3f6b99fb;
      263: out3 <= 32'h3f6b7295;
      264: out3 <= 32'h3f6b4b0c;
      265: out3 <= 32'h3f6b235e;
      266: out3 <= 32'h3f6afb8c;
      267: out3 <= 32'h3f6ad395;
      268: out3 <= 32'h3f6aab7b;
      269: out3 <= 32'h3f6a833c;
      270: out3 <= 32'h3f6a5ad9;
      271: out3 <= 32'h3f6a3252;
      272: out3 <= 32'h3f6a09a7;
      273: out3 <= 32'h3f69e0d7;
      274: out3 <= 32'h3f69b7e4;
      275: out3 <= 32'h3f698ecc;
      276: out3 <= 32'h3f696591;
      277: out3 <= 32'h3f693c32;
      278: out3 <= 32'h3f6912ae;
      279: out3 <= 32'h3f68e907;
      280: out3 <= 32'h3f68bf3c;
      281: out3 <= 32'h3f68954c;
      282: out3 <= 32'h3f686b39;
      283: out3 <= 32'h3f684103;
      284: out3 <= 32'h3f6816a8;
      285: out3 <= 32'h3f67ec29;
      286: out3 <= 32'h3f67c187;
      287: out3 <= 32'h3f6796c1;
      288: out3 <= 32'h3f676bd8;
      289: out3 <= 32'h3f6740ca;
      290: out3 <= 32'h3f671599;
      291: out3 <= 32'h3f66ea45;
      292: out3 <= 32'h3f66becc;
      293: out3 <= 32'h3f669330;
      294: out3 <= 32'h3f666771;
      295: out3 <= 32'h3f663b8e;
      296: out3 <= 32'h3f660f88;
      297: out3 <= 32'h3f65e35e;
      298: out3 <= 32'h3f65b710;
      299: out3 <= 32'h3f658aa0;
      300: out3 <= 32'h3f655e0b;
      301: out3 <= 32'h3f653154;
      302: out3 <= 32'h3f650479;
      303: out3 <= 32'h3f64d77b;
      304: out3 <= 32'h3f64aa59;
      305: out3 <= 32'h3f647d14;
      306: out3 <= 32'h3f644fac;
      307: out3 <= 32'h3f642221;
      308: out3 <= 32'h3f63f473;
      309: out3 <= 32'h3f63c6a1;
      310: out3 <= 32'h3f6398ac;
      311: out3 <= 32'h3f636a95;
      312: out3 <= 32'h3f633c5a;
      313: out3 <= 32'h3f630dfc;
      314: out3 <= 32'h3f62df7b;
      315: out3 <= 32'h3f62b0d7;
      316: out3 <= 32'h3f628210;
      317: out3 <= 32'h3f625326;
      318: out3 <= 32'h3f62241a;
      319: out3 <= 32'h3f61f4ea;
      320: out3 <= 32'h3f61c598;
      321: out3 <= 32'h3f619622;
      322: out3 <= 32'h3f61668a;
      323: out3 <= 32'h3f6136d0;
      324: out3 <= 32'h3f6106f2;
      325: out3 <= 32'h3f60d6f2;
      326: out3 <= 32'h3f60a6cf;
      327: out3 <= 32'h3f607689;
      328: out3 <= 32'h3f604621;
      329: out3 <= 32'h3f601596;
      330: out3 <= 32'h3f5fe4e9;
      331: out3 <= 32'h3f5fb419;
      332: out3 <= 32'h3f5f8327;
      333: out3 <= 32'h3f5f5212;
      334: out3 <= 32'h3f5f20db;
      335: out3 <= 32'h3f5eef81;
      336: out3 <= 32'h3f5ebe05;
      337: out3 <= 32'h3f5e8c67;
      338: out3 <= 32'h3f5e5aa6;
      339: out3 <= 32'h3f5e28c3;
      340: out3 <= 32'h3f5df6be;
      341: out3 <= 32'h3f5dc497;
      342: out3 <= 32'h3f5d924d;
      343: out3 <= 32'h3f5d5fe1;
      344: out3 <= 32'h3f5d2d53;
      345: out3 <= 32'h3f5cfaa3;
      346: out3 <= 32'h3f5cc7d1;
      347: out3 <= 32'h3f5c94dd;
      348: out3 <= 32'h3f5c61c7;
      349: out3 <= 32'h3f5c2e8e;
      350: out3 <= 32'h3f5bfb34;
      351: out3 <= 32'h3f5bc7b8;
      352: out3 <= 32'h3f5b941a;
      353: out3 <= 32'h3f5b605a;
      354: out3 <= 32'h3f5b2c79;
      355: out3 <= 32'h3f5af875;
      356: out3 <= 32'h3f5ac450;
      357: out3 <= 32'h3f5a9009;
      358: out3 <= 32'h3f5a5ba0;
      359: out3 <= 32'h3f5a2716;
      360: out3 <= 32'h3f59f26a;
      361: out3 <= 32'h3f59bd9c;
      362: out3 <= 32'h3f5988ad;
      363: out3 <= 32'h3f59539c;
      364: out3 <= 32'h3f591e6a;
      365: out3 <= 32'h3f58e916;
      366: out3 <= 32'h3f58b3a1;
      367: out3 <= 32'h3f587e0b;
      368: out3 <= 32'h3f584853;
      369: out3 <= 32'h3f581279;
      370: out3 <= 32'h3f57dc7f;
      371: out3 <= 32'h3f57a663;
      372: out3 <= 32'h3f577026;
      373: out3 <= 32'h3f5739c7;
      374: out3 <= 32'h3f570348;
      375: out3 <= 32'h3f56cca7;
      376: out3 <= 32'h3f5695e5;
      377: out3 <= 32'h3f565f02;
      378: out3 <= 32'h3f5627fe;
      379: out3 <= 32'h3f55f0d9;
      380: out3 <= 32'h3f55b993;
      381: out3 <= 32'h3f55822c;
      382: out3 <= 32'h3f554aa4;
      383: out3 <= 32'h3f5512fb;
      384: out3 <= 32'h3f54db31;
      385: out3 <= 32'h3f54a347;
      386: out3 <= 32'h3f546b3b;
      387: out3 <= 32'h3f54330f;
      388: out3 <= 32'h3f53fac3;
      389: out3 <= 32'h3f53c255;
      390: out3 <= 32'h3f5389c7;
      391: out3 <= 32'h3f535118;
      392: out3 <= 32'h3f531849;
      393: out3 <= 32'h3f52df59;
      394: out3 <= 32'h3f52a649;
      395: out3 <= 32'h3f526d18;
      396: out3 <= 32'h3f5233c6;
      397: out3 <= 32'h3f51fa54;
      398: out3 <= 32'h3f51c0c2;
      399: out3 <= 32'h3f518710;
      400: out3 <= 32'h3f514d3d;
      401: out3 <= 32'h3f51134a;
      402: out3 <= 32'h3f50d937;
      403: out3 <= 32'h3f509f03;
      404: out3 <= 32'h3f5064af;
      405: out3 <= 32'h3f502a3b;
      406: out3 <= 32'h3f4fefa8;
      407: out3 <= 32'h3f4fb4f4;
      408: out3 <= 32'h3f4f7a1f;
      409: out3 <= 32'h3f4f3f2b;
      410: out3 <= 32'h3f4f0417;
      411: out3 <= 32'h3f4ec8e4;
      412: out3 <= 32'h3f4e8d90;
      413: out3 <= 32'h3f4e521c;
      414: out3 <= 32'h3f4e1689;
      415: out3 <= 32'h3f4ddad5;
      416: out3 <= 32'h3f4d9f02;
      417: out3 <= 32'h3f4d6310;
      418: out3 <= 32'h3f4d26fd;
      419: out3 <= 32'h3f4ceacb;
      420: out3 <= 32'h3f4cae79;
      421: out3 <= 32'h3f4c7208;
      422: out3 <= 32'h3f4c3578;
      423: out3 <= 32'h3f4bf8c7;
      424: out3 <= 32'h3f4bbbf8;
      425: out3 <= 32'h3f4b7f09;
      426: out3 <= 32'h3f4b41fa;
      427: out3 <= 32'h3f4b04cc;
      428: out3 <= 32'h3f4ac77f;
      429: out3 <= 32'h3f4a8a13;
      430: out3 <= 32'h3f4a4c87;
      431: out3 <= 32'h3f4a0edc;
      432: out3 <= 32'h3f49d112;
      433: out3 <= 32'h3f499329;
      434: out3 <= 32'h3f495521;
      435: out3 <= 32'h3f4916fa;
      436: out3 <= 32'h3f48d8b3;
      437: out3 <= 32'h3f489a4e;
      438: out3 <= 32'h3f485bca;
      439: out3 <= 32'h3f481d27;
      440: out3 <= 32'h3f47de65;
      441: out3 <= 32'h3f479f84;
      442: out3 <= 32'h3f476085;
      443: out3 <= 32'h3f472167;
      444: out3 <= 32'h3f46e22a;
      445: out3 <= 32'h3f46a2ce;
      446: out3 <= 32'h3f466354;
      447: out3 <= 32'h3f4623bb;
      448: out3 <= 32'h3f45e403;
      449: out3 <= 32'h3f45a42d;
      450: out3 <= 32'h3f456439;
      451: out3 <= 32'h3f452426;
      452: out3 <= 32'h3f44e3f5;
      453: out3 <= 32'h3f44a3a5;
      454: out3 <= 32'h3f446337;
      455: out3 <= 32'h3f4422ab;
      456: out3 <= 32'h3f43e200;
      457: out3 <= 32'h3f43a138;
      458: out3 <= 32'h3f436051;
      459: out3 <= 32'h3f431f4c;
      460: out3 <= 32'h3f42de29;
      461: out3 <= 32'h3f429ce8;
      462: out3 <= 32'h3f425b89;
      463: out3 <= 32'h3f421a0b;
      464: out3 <= 32'h3f41d870;
      465: out3 <= 32'h3f4196b7;
      466: out3 <= 32'h3f4154e1;
      467: out3 <= 32'h3f4112ec;
      468: out3 <= 32'h3f40d0da;
      469: out3 <= 32'h3f408ea9;
      470: out3 <= 32'h3f404c5c;
      471: out3 <= 32'h3f4009f0;
      472: out3 <= 32'h3f3fc767;
      473: out3 <= 32'h3f3f84c0;
      474: out3 <= 32'h3f3f41fc;
      475: out3 <= 32'h3f3eff1b;
      476: out3 <= 32'h3f3ebc1b;
      477: out3 <= 32'h3f3e78ff;
      478: out3 <= 32'h3f3e35c5;
      479: out3 <= 32'h3f3df26e;
      480: out3 <= 32'h3f3daef9;
      481: out3 <= 32'h3f3d6b67;
      482: out3 <= 32'h3f3d27b8;
      483: out3 <= 32'h3f3ce3ec;
      484: out3 <= 32'h3f3ca003;
      485: out3 <= 32'h3f3c5bfc;
      486: out3 <= 32'h3f3c17d9;
      487: out3 <= 32'h3f3bd398;
      488: out3 <= 32'h3f3b8f3b;
      489: out3 <= 32'h3f3b4ac1;
      490: out3 <= 32'h3f3b0629;
      491: out3 <= 32'h3f3ac175;
      492: out3 <= 32'h3f3a7ca4;
      493: out3 <= 32'h3f3a37b7;
      494: out3 <= 32'h3f39f2ac;
      495: out3 <= 32'h3f39ad85;
      496: out3 <= 32'h3f396842;
      497: out3 <= 32'h3f3922e1;
      498: out3 <= 32'h3f38dd65;
      499: out3 <= 32'h3f3897cb;
      500: out3 <= 32'h3f385216;
      501: out3 <= 32'h3f380c43;
      502: out3 <= 32'h3f37c655;
      503: out3 <= 32'h3f37804a;
      504: out3 <= 32'h3f373a23;
      505: out3 <= 32'h3f36f3df;
      506: out3 <= 32'h3f36ad7f;
      507: out3 <= 32'h3f366704;
      508: out3 <= 32'h3f36206c;
      509: out3 <= 32'h3f35d9b8;
      510: out3 <= 32'h3f3592e7;
      511: out3 <= 32'h3f354bfb;
      512: out3 <= 32'h3f3504f3;
      513: out3 <= 32'h3f34bdcf;
      514: out3 <= 32'h3f34768f;
      515: out3 <= 32'h3f342f34;
      516: out3 <= 32'h3f33e7bc;
      517: out3 <= 32'h3f33a029;
      518: out3 <= 32'h3f33587a;
      519: out3 <= 32'h3f3310af;
      520: out3 <= 32'h3f32c8c9;
      521: out3 <= 32'h3f3280c7;
      522: out3 <= 32'h3f3238aa;
      523: out3 <= 32'h3f31f071;
      524: out3 <= 32'h3f31a81d;
      525: out3 <= 32'h3f315fad;
      526: out3 <= 32'h3f311722;
      527: out3 <= 32'h3f30ce7c;
      528: out3 <= 32'h3f3085bb;
      529: out3 <= 32'h3f303cde;
      530: out3 <= 32'h3f2ff3e6;
      531: out3 <= 32'h3f2faad3;
      532: out3 <= 32'h3f2f61a5;
      533: out3 <= 32'h3f2f185b;
      534: out3 <= 32'h3f2ecef7;
      535: out3 <= 32'h3f2e8578;
      536: out3 <= 32'h3f2e3bde;
      537: out3 <= 32'h3f2df229;
      538: out3 <= 32'h3f2da859;
      539: out3 <= 32'h3f2d5e6f;
      540: out3 <= 32'h3f2d1469;
      541: out3 <= 32'h3f2cca49;
      542: out3 <= 32'h3f2c800f;
      543: out3 <= 32'h3f2c35b9;
      544: out3 <= 32'h3f2beb4a;
      545: out3 <= 32'h3f2ba0bf;
      546: out3 <= 32'h3f2b561b;
      547: out3 <= 32'h3f2b0b5b;
      548: out3 <= 32'h3f2ac082;
      549: out3 <= 32'h3f2a758e;
      550: out3 <= 32'h3f2a2a80;
      551: out3 <= 32'h3f29df57;
      552: out3 <= 32'h3f299415;
      553: out3 <= 32'h3f2948b8;
      554: out3 <= 32'h3f28fd41;
      555: out3 <= 32'h3f28b1b0;
      556: out3 <= 32'h3f286605;
      557: out3 <= 32'h3f281a40;
      558: out3 <= 32'h3f27ce61;
      559: out3 <= 32'h3f278268;
      560: out3 <= 32'h3f273656;
      561: out3 <= 32'h3f26ea2a;
      562: out3 <= 32'h3f269de3;
      563: out3 <= 32'h3f265184;
      564: out3 <= 32'h3f26050a;
      565: out3 <= 32'h3f25b877;
      566: out3 <= 32'h3f256bcb;
      567: out3 <= 32'h3f251f04;
      568: out3 <= 32'h3f24d225;
      569: out3 <= 32'h3f24852c;
      570: out3 <= 32'h3f24381a;
      571: out3 <= 32'h3f23eaee;
      572: out3 <= 32'h3f239da9;
      573: out3 <= 32'h3f23504b;
      574: out3 <= 32'h3f2302d3;
      575: out3 <= 32'h3f22b543;
      576: out3 <= 32'h3f226799;
      577: out3 <= 32'h3f2219d7;
      578: out3 <= 32'h3f21cbfb;
      579: out3 <= 32'h3f217e06;
      580: out3 <= 32'h3f212ff9;
      581: out3 <= 32'h3f20e1d2;
      582: out3 <= 32'h3f209393;
      583: out3 <= 32'h3f20453b;
      584: out3 <= 32'h3f1ff6cb;
      585: out3 <= 32'h3f1fa841;
      586: out3 <= 32'h3f1f599f;
      587: out3 <= 32'h3f1f0ae5;
      588: out3 <= 32'h3f1ebc12;
      589: out3 <= 32'h3f1e6d26;
      590: out3 <= 32'h3f1e1e22;
      591: out3 <= 32'h3f1dcf06;
      592: out3 <= 32'h3f1d7fd1;
      593: out3 <= 32'h3f1d3084;
      594: out3 <= 32'h3f1ce11f;
      595: out3 <= 32'h3f1c91a2;
      596: out3 <= 32'h3f1c420c;
      597: out3 <= 32'h3f1bf25f;
      598: out3 <= 32'h3f1ba299;
      599: out3 <= 32'h3f1b52bb;
      600: out3 <= 32'h3f1b02c6;
      601: out3 <= 32'h3f1ab2b8;
      602: out3 <= 32'h3f1a6293;
      603: out3 <= 32'h3f1a1255;
      604: out3 <= 32'h3f19c200;
      605: out3 <= 32'h3f197194;
      606: out3 <= 32'h3f19210f;
      607: out3 <= 32'h3f18d073;
      608: out3 <= 32'h3f187fc0;
      609: out3 <= 32'h3f182ef5;
      610: out3 <= 32'h3f17de12;
      611: out3 <= 32'h3f178d18;
      612: out3 <= 32'h3f173c07;
      613: out3 <= 32'h3f16eade;
      614: out3 <= 32'h3f16999f;
      615: out3 <= 32'h3f164847;
      616: out3 <= 32'h3f15f6d9;
      617: out3 <= 32'h3f15a554;
      618: out3 <= 32'h3f1553b7;
      619: out3 <= 32'h3f150204;
      620: out3 <= 32'h3f14b039;
      621: out3 <= 32'h3f145e58;
      622: out3 <= 32'h3f140c5f;
      623: out3 <= 32'h3f13ba50;
      624: out3 <= 32'h3f13682a;
      625: out3 <= 32'h3f1315ee;
      626: out3 <= 32'h3f12c39a;
      627: out3 <= 32'h3f127130;
      628: out3 <= 32'h3f121eb0;
      629: out3 <= 32'h3f11cc19;
      630: out3 <= 32'h3f11796b;
      631: out3 <= 32'h3f1126a7;
      632: out3 <= 32'h3f10d3cd;
      633: out3 <= 32'h3f1080dc;
      634: out3 <= 32'h3f102dd5;
      635: out3 <= 32'h3f0fdab8;
      636: out3 <= 32'h3f0f8784;
      637: out3 <= 32'h3f0f343b;
      638: out3 <= 32'h3f0ee0db;
      639: out3 <= 32'h3f0e8d65;
      640: out3 <= 32'h3f0e39da;
      641: out3 <= 32'h3f0de638;
      642: out3 <= 32'h3f0d9281;
      643: out3 <= 32'h3f0d3eb3;
      644: out3 <= 32'h3f0cead0;
      645: out3 <= 32'h3f0c96d7;
      646: out3 <= 32'h3f0c42c9;
      647: out3 <= 32'h3f0beea5;
      648: out3 <= 32'h3f0b9a6b;
      649: out3 <= 32'h3f0b461c;
      650: out3 <= 32'h3f0af1b7;
      651: out3 <= 32'h3f0a9d3d;
      652: out3 <= 32'h3f0a48ad;
      653: out3 <= 32'h3f09f409;
      654: out3 <= 32'h3f099f4e;
      655: out3 <= 32'h3f094a7f;
      656: out3 <= 32'h3f08f59b;
      657: out3 <= 32'h3f08a0a1;
      658: out3 <= 32'h3f084b92;
      659: out3 <= 32'h3f07f66f;
      660: out3 <= 32'h3f07a136;
      661: out3 <= 32'h3f074be8;
      662: out3 <= 32'h3f06f686;
      663: out3 <= 32'h3f06a10e;
      664: out3 <= 32'h3f064b82;
      665: out3 <= 32'h3f05f5e2;
      666: out3 <= 32'h3f05a02c;
      667: out3 <= 32'h3f054a62;
      668: out3 <= 32'h3f04f484;
      669: out3 <= 32'h3f049e91;
      670: out3 <= 32'h3f044889;
      671: out3 <= 32'h3f03f26d;
      672: out3 <= 32'h3f039c3d;
      673: out3 <= 32'h3f0345f8;
      674: out3 <= 32'h3f02ef9f;
      675: out3 <= 32'h3f029932;
      676: out3 <= 32'h3f0242b1;
      677: out3 <= 32'h3f01ec1c;
      678: out3 <= 32'h3f019573;
      679: out3 <= 32'h3f013eb5;
      680: out3 <= 32'h3f00e7e4;
      681: out3 <= 32'h3f0090ff;
      682: out3 <= 32'h3f003a06;
      683: out3 <= 32'h3effc5f3;
      684: out3 <= 32'h3eff17b2;
      685: out3 <= 32'h3efe694a;
      686: out3 <= 32'h3efdbabb;
      687: out3 <= 32'h3efd0c04;
      688: out3 <= 32'h3efc5d27;
      689: out3 <= 32'h3efbae22;
      690: out3 <= 32'h3efafef7;
      691: out3 <= 32'h3efa4fa5;
      692: out3 <= 32'h3ef9a02d;
      693: out3 <= 32'h3ef8f08e;
      694: out3 <= 32'h3ef840c8;
      695: out3 <= 32'h3ef790dc;
      696: out3 <= 32'h3ef6e0cb;
      697: out3 <= 32'h3ef63093;
      698: out3 <= 32'h3ef58035;
      699: out3 <= 32'h3ef4cfb1;
      700: out3 <= 32'h3ef41f07;
      701: out3 <= 32'h3ef36e38;
      702: out3 <= 32'h3ef2bd43;
      703: out3 <= 32'h3ef20c29;
      704: out3 <= 32'h3ef15aea;
      705: out3 <= 32'h3ef0a985;
      706: out3 <= 32'h3eeff7fb;
      707: out3 <= 32'h3eef464c;
      708: out3 <= 32'h3eee9479;
      709: out3 <= 32'h3eede280;
      710: out3 <= 32'h3eed3063;
      711: out3 <= 32'h3eec7e21;
      712: out3 <= 32'h3eebcbbb;
      713: out3 <= 32'h3eeb1930;
      714: out3 <= 32'h3eea6681;
      715: out3 <= 32'h3ee9b3ae;
      716: out3 <= 32'h3ee900b7;
      717: out3 <= 32'h3ee84d9c;
      718: out3 <= 32'h3ee79a5d;
      719: out3 <= 32'h3ee6e6fb;
      720: out3 <= 32'h3ee63375;
      721: out3 <= 32'h3ee57fcb;
      722: out3 <= 32'h3ee4cbfe;
      723: out3 <= 32'h3ee4180e;
      724: out3 <= 32'h3ee363fa;
      725: out3 <= 32'h3ee2afc4;
      726: out3 <= 32'h3ee1fb6a;
      727: out3 <= 32'h3ee146ee;
      728: out3 <= 32'h3ee0924f;
      729: out3 <= 32'h3edfdd8d;
      730: out3 <= 32'h3edf28a9;
      731: out3 <= 32'h3ede73a2;
      732: out3 <= 32'h3eddbe79;
      733: out3 <= 32'h3edd092e;
      734: out3 <= 32'h3edc53c1;
      735: out3 <= 32'h3edb9e31;
      736: out3 <= 32'h3edae880;
      737: out3 <= 32'h3eda32ad;
      738: out3 <= 32'h3ed97cb9;
      739: out3 <= 32'h3ed8c6a3;
      740: out3 <= 32'h3ed8106b;
      741: out3 <= 32'h3ed75a13;
      742: out3 <= 32'h3ed6a399;
      743: out3 <= 32'h3ed5ecfd;
      744: out3 <= 32'h3ed53641;
      745: out3 <= 32'h3ed47f64;
      746: out3 <= 32'h3ed3c867;
      747: out3 <= 32'h3ed31148;
      748: out3 <= 32'h3ed25a09;
      749: out3 <= 32'h3ed1a2aa;
      750: out3 <= 32'h3ed0eb2a;
      751: out3 <= 32'h3ed0338a;
      752: out3 <= 32'h3ecf7bca;
      753: out3 <= 32'h3ecec3ea;
      754: out3 <= 32'h3ece0bea;
      755: out3 <= 32'h3ecd53ca;
      756: out3 <= 32'h3ecc9b8b;
      757: out3 <= 32'h3ecbe32c;
      758: out3 <= 32'h3ecb2aae;
      759: out3 <= 32'h3eca7210;
      760: out3 <= 32'h3ec9b953;
      761: out3 <= 32'h3ec90077;
      762: out3 <= 32'h3ec8477c;
      763: out3 <= 32'h3ec78e62;
      764: out3 <= 32'h3ec6d529;
      765: out3 <= 32'h3ec61bd2;
      766: out3 <= 32'h3ec5625c;
      767: out3 <= 32'h3ec4a8c8;
      768: out3 <= 32'h3ec3ef15;
      769: out3 <= 32'h3ec33544;
      770: out3 <= 32'h3ec27b55;
      771: out3 <= 32'h3ec1c148;
      772: out3 <= 32'h3ec1071e;
      773: out3 <= 32'h3ec04cd5;
      774: out3 <= 32'h3ebf926f;
      775: out3 <= 32'h3ebed7eb;
      776: out3 <= 32'h3ebe1d4a;
      777: out3 <= 32'h3ebd628b;
      778: out3 <= 32'h3ebca7af;
      779: out3 <= 32'h3ebbecb6;
      780: out3 <= 32'h3ebb31a0;
      781: out3 <= 32'h3eba766e;
      782: out3 <= 32'h3eb9bb1e;
      783: out3 <= 32'h3eb8ffb2;
      784: out3 <= 32'h3eb8442a;
      785: out3 <= 32'h3eb78884;
      786: out3 <= 32'h3eb6ccc3;
      787: out3 <= 32'h3eb610e6;
      788: out3 <= 32'h3eb554ec;
      789: out3 <= 32'h3eb498d6;
      790: out3 <= 32'h3eb3dca5;
      791: out3 <= 32'h3eb32058;
      792: out3 <= 32'h3eb263ef;
      793: out3 <= 32'h3eb1a76b;
      794: out3 <= 32'h3eb0eacb;
      795: out3 <= 32'h3eb02e10;
      796: out3 <= 32'h3eaf713a;
      797: out3 <= 32'h3eaeb449;
      798: out3 <= 32'h3eadf73c;
      799: out3 <= 32'h3ead3a15;
      800: out3 <= 32'h3eac7cd4;
      801: out3 <= 32'h3eabbf77;
      802: out3 <= 32'h3eab0201;
      803: out3 <= 32'h3eaa446f;
      804: out3 <= 32'h3ea986c4;
      805: out3 <= 32'h3ea8c8fe;
      806: out3 <= 32'h3ea80b1f;
      807: out3 <= 32'h3ea74d25;
      808: out3 <= 32'h3ea68f12;
      809: out3 <= 32'h3ea5d0e5;
      810: out3 <= 32'h3ea5129f;
      811: out3 <= 32'h3ea4543f;
      812: out3 <= 32'h3ea395c5;
      813: out3 <= 32'h3ea2d733;
      814: out3 <= 32'h3ea21887;
      815: out3 <= 32'h3ea159c2;
      816: out3 <= 32'h3ea09ae5;
      817: out3 <= 32'h3e9fdbee;
      818: out3 <= 32'h3e9f1cdf;
      819: out3 <= 32'h3e9e5db8;
      820: out3 <= 32'h3e9d9e78;
      821: out3 <= 32'h3e9cdf20;
      822: out3 <= 32'h3e9c1faf;
      823: out3 <= 32'h3e9b6027;
      824: out3 <= 32'h3e9aa086;
      825: out3 <= 32'h3e99e0ce;
      826: out3 <= 32'h3e9920fe;
      827: out3 <= 32'h3e986116;
      828: out3 <= 32'h3e97a117;
      829: out3 <= 32'h3e96e100;
      830: out3 <= 32'h3e9620d2;
      831: out3 <= 32'h3e95608d;
      832: out3 <= 32'h3e94a031;
      833: out3 <= 32'h3e93dfbf;
      834: out3 <= 32'h3e931f35;
      835: out3 <= 32'h3e925e94;
      836: out3 <= 32'h3e919ddd;
      837: out3 <= 32'h3e90dd10;
      838: out3 <= 32'h3e901c2c;
      839: out3 <= 32'h3e8f5b32;
      840: out3 <= 32'h3e8e9a22;
      841: out3 <= 32'h3e8dd8fc;
      842: out3 <= 32'h3e8d17c0;
      843: out3 <= 32'h3e8c566e;
      844: out3 <= 32'h3e8b9507;
      845: out3 <= 32'h3e8ad38a;
      846: out3 <= 32'h3e8a11f7;
      847: out3 <= 32'h3e895050;
      848: out3 <= 32'h3e888e93;
      849: out3 <= 32'h3e87ccc1;
      850: out3 <= 32'h3e870ada;
      851: out3 <= 32'h3e8648df;
      852: out3 <= 32'h3e8586ce;
      853: out3 <= 32'h3e84c4aa;
      854: out3 <= 32'h3e840270;
      855: out3 <= 32'h3e834022;
      856: out3 <= 32'h3e827dc0;
      857: out3 <= 32'h3e81bb4a;
      858: out3 <= 32'h3e80f8c0;
      859: out3 <= 32'h3e803622;
      860: out3 <= 32'h3e7ee6e1;
      861: out3 <= 32'h3e7d6156;
      862: out3 <= 32'h3e7bdba4;
      863: out3 <= 32'h3e7a55cb;
      864: out3 <= 32'h3e78cfcc;
      865: out3 <= 32'h3e7749a6;
      866: out3 <= 32'h3e75c35a;
      867: out3 <= 32'h3e743ce8;
      868: out3 <= 32'h3e72b651;
      869: out3 <= 32'h3e712f94;
      870: out3 <= 32'h3e6fa8b2;
      871: out3 <= 32'h3e6e21ab;
      872: out3 <= 32'h3e6c9a7f;
      873: out3 <= 32'h3e6b132f;
      874: out3 <= 32'h3e698bba;
      875: out3 <= 32'h3e680422;
      876: out3 <= 32'h3e667c66;
      877: out3 <= 32'h3e64f486;
      878: out3 <= 32'h3e636c83;
      879: out3 <= 32'h3e61e45c;
      880: out3 <= 32'h3e605c13;
      881: out3 <= 32'h3e5ed3a8;
      882: out3 <= 32'h3e5d4b1a;
      883: out3 <= 32'h3e5bc26a;
      884: out3 <= 32'h3e5a3997;
      885: out3 <= 32'h3e58b0a4;
      886: out3 <= 32'h3e57278f;
      887: out3 <= 32'h3e559e58;
      888: out3 <= 32'h3e541501;
      889: out3 <= 32'h3e528b89;
      890: out3 <= 32'h3e5101f1;
      891: out3 <= 32'h3e4f7838;
      892: out3 <= 32'h3e4dee60;
      893: out3 <= 32'h3e4c6467;
      894: out3 <= 32'h3e4ada4f;
      895: out3 <= 32'h3e495018;
      896: out3 <= 32'h3e47c5c2;
      897: out3 <= 32'h3e463b4d;
      898: out3 <= 32'h3e44b0b9;
      899: out3 <= 32'h3e432607;
      900: out3 <= 32'h3e419b37;
      901: out3 <= 32'h3e401049;
      902: out3 <= 32'h3e3e853e;
      903: out3 <= 32'h3e3cfa15;
      904: out3 <= 32'h3e3b6ecf;
      905: out3 <= 32'h3e39e36c;
      906: out3 <= 32'h3e3857ec;
      907: out3 <= 32'h3e36cc50;
      908: out3 <= 32'h3e354098;
      909: out3 <= 32'h3e33b4c4;
      910: out3 <= 32'h3e3228d4;
      911: out3 <= 32'h3e309cc9;
      912: out3 <= 32'h3e2f10a2;
      913: out3 <= 32'h3e2d8461;
      914: out3 <= 32'h3e2bf804;
      915: out3 <= 32'h3e2a6b8d;
      916: out3 <= 32'h3e28defc;
      917: out3 <= 32'h3e275251;
      918: out3 <= 32'h3e25c58c;
      919: out3 <= 32'h3e2438ad;
      920: out3 <= 32'h3e22abb6;
      921: out3 <= 32'h3e211ea5;
      922: out3 <= 32'h3e1f917b;
      923: out3 <= 32'h3e1e0438;
      924: out3 <= 32'h3e1c76de;
      925: out3 <= 32'h3e1ae96b;
      926: out3 <= 32'h3e195be0;
      927: out3 <= 32'h3e17ce3d;
      928: out3 <= 32'h3e164083;
      929: out3 <= 32'h3e14b2b2;
      930: out3 <= 32'h3e1324ca;
      931: out3 <= 32'h3e1196cc;
      932: out3 <= 32'h3e1008b7;
      933: out3 <= 32'h3e0e7a8b;
      934: out3 <= 32'h3e0cec4a;
      935: out3 <= 32'h3e0b5df3;
      936: out3 <= 32'h3e09cf86;
      937: out3 <= 32'h3e084105;
      938: out3 <= 32'h3e06b26e;
      939: out3 <= 32'h3e0523c2;
      940: out3 <= 32'h3e039502;
      941: out3 <= 32'h3e02062e;
      942: out3 <= 32'h3e007745;
      943: out3 <= 32'h3dfdd092;
      944: out3 <= 32'h3dfab273;
      945: out3 <= 32'h3df7942c;
      946: out3 <= 32'h3df475c0;
      947: out3 <= 32'h3df1572e;
      948: out3 <= 32'h3dee3876;
      949: out3 <= 32'h3deb199a;
      950: out3 <= 32'h3de7fa9a;
      951: out3 <= 32'h3de4db76;
      952: out3 <= 32'h3de1bc2e;
      953: out3 <= 32'h3dde9cc4;
      954: out3 <= 32'h3ddb7d37;
      955: out3 <= 32'h3dd85d89;
      956: out3 <= 32'h3dd53db9;
      957: out3 <= 32'h3dd21dc8;
      958: out3 <= 32'h3dcefdb7;
      959: out3 <= 32'h3dcbdd86;
      960: out3 <= 32'h3dc8bd36;
      961: out3 <= 32'h3dc59cc6;
      962: out3 <= 32'h3dc27c39;
      963: out3 <= 32'h3dbf5b8d;
      964: out3 <= 32'h3dbc3ac3;
      965: out3 <= 32'h3db919dd;
      966: out3 <= 32'h3db5f8da;
      967: out3 <= 32'h3db2d7bb;
      968: out3 <= 32'h3dafb680;
      969: out3 <= 32'h3dac952b;
      970: out3 <= 32'h3da973ba;
      971: out3 <= 32'h3da65230;
      972: out3 <= 32'h3da3308c;
      973: out3 <= 32'h3da00ecf;
      974: out3 <= 32'h3d9cecf9;
      975: out3 <= 32'h3d99cb0a;
      976: out3 <= 32'h3d96a905;
      977: out3 <= 32'h3d9386e7;
      978: out3 <= 32'h3d9064b4;
      979: out3 <= 32'h3d8d426a;
      980: out3 <= 32'h3d8a200a;
      981: out3 <= 32'h3d86fd94;
      982: out3 <= 32'h3d83db0a;
      983: out3 <= 32'h3d80b86c;
      984: out3 <= 32'h3d7b2b74;
      985: out3 <= 32'h3d74e5e9;
      986: out3 <= 32'h3d6ea038;
      987: out3 <= 32'h3d685a62;
      988: out3 <= 32'h3d621469;
      989: out3 <= 32'h3d5bce4c;
      990: out3 <= 32'h3d55880e;
      991: out3 <= 32'h3d4f41af;
      992: out3 <= 32'h3d48fb30;
      993: out3 <= 32'h3d42b491;
      994: out3 <= 32'h3d3c6dd5;
      995: out3 <= 32'h3d3626fc;
      996: out3 <= 32'h3d2fe007;
      997: out3 <= 32'h3d2998f6;
      998: out3 <= 32'h3d2351cb;
      999: out3 <= 32'h3d1d0a88;
      1000: out3 <= 32'h3d16c32c;
      1001: out3 <= 32'h3d107bb8;
      1002: out3 <= 32'h3d0a342f;
      1003: out3 <= 32'h3d03ec90;
      1004: out3 <= 32'h3cfb49ba;
      1005: out3 <= 32'h3ceeba2c;
      1006: out3 <= 32'h3ce22a7a;
      1007: out3 <= 32'h3cd59aa6;
      1008: out3 <= 32'h3cc90ab0;
      1009: out3 <= 32'h3cbc7a9b;
      1010: out3 <= 32'h3cafea69;
      1011: out3 <= 32'h3ca35a1c;
      1012: out3 <= 32'h3c96c9b6;
      1013: out3 <= 32'h3c8a3938;
      1014: out3 <= 32'h3c7b514b;
      1015: out3 <= 32'h3c622fff;
      1016: out3 <= 32'h3c490e90;
      1017: out3 <= 32'h3c2fed02;
      1018: out3 <= 32'h3c16cb58;
      1019: out3 <= 32'h3bfb5330;
      1020: out3 <= 32'h3bc90f88;
      1021: out3 <= 32'h3b96cbc1;
      1022: out3 <= 32'h3b490fc6;
      1023: out3 <= 32'h3ac90fd5;
      1024: out3 <= 32'h0;
      1025: out3 <= 32'hbac90fd5;
      1026: out3 <= 32'hbb490fc6;
      1027: out3 <= 32'hbb96cbc1;
      1028: out3 <= 32'hbbc90f88;
      1029: out3 <= 32'hbbfb5330;
      1030: out3 <= 32'hbc16cb58;
      1031: out3 <= 32'hbc2fed02;
      1032: out3 <= 32'hbc490e90;
      1033: out3 <= 32'hbc622fff;
      1034: out3 <= 32'hbc7b514b;
      1035: out3 <= 32'hbc8a3938;
      1036: out3 <= 32'hbc96c9b6;
      1037: out3 <= 32'hbca35a1c;
      1038: out3 <= 32'hbcafea69;
      1039: out3 <= 32'hbcbc7a9b;
      1040: out3 <= 32'hbcc90ab0;
      1041: out3 <= 32'hbcd59aa6;
      1042: out3 <= 32'hbce22a7a;
      1043: out3 <= 32'hbceeba2c;
      1044: out3 <= 32'hbcfb49ba;
      1045: out3 <= 32'hbd03ec90;
      1046: out3 <= 32'hbd0a342f;
      1047: out3 <= 32'hbd107bb8;
      1048: out3 <= 32'hbd16c32c;
      1049: out3 <= 32'hbd1d0a88;
      1050: out3 <= 32'hbd2351cb;
      1051: out3 <= 32'hbd2998f6;
      1052: out3 <= 32'hbd2fe007;
      1053: out3 <= 32'hbd3626fc;
      1054: out3 <= 32'hbd3c6dd5;
      1055: out3 <= 32'hbd42b491;
      1056: out3 <= 32'hbd48fb30;
      1057: out3 <= 32'hbd4f41af;
      1058: out3 <= 32'hbd55880e;
      1059: out3 <= 32'hbd5bce4c;
      1060: out3 <= 32'hbd621469;
      1061: out3 <= 32'hbd685a62;
      1062: out3 <= 32'hbd6ea038;
      1063: out3 <= 32'hbd74e5e9;
      1064: out3 <= 32'hbd7b2b74;
      1065: out3 <= 32'hbd80b86c;
      1066: out3 <= 32'hbd83db0a;
      1067: out3 <= 32'hbd86fd94;
      1068: out3 <= 32'hbd8a200a;
      1069: out3 <= 32'hbd8d426a;
      1070: out3 <= 32'hbd9064b4;
      1071: out3 <= 32'hbd9386e7;
      1072: out3 <= 32'hbd96a905;
      1073: out3 <= 32'hbd99cb0a;
      1074: out3 <= 32'hbd9cecf9;
      1075: out3 <= 32'hbda00ecf;
      1076: out3 <= 32'hbda3308c;
      1077: out3 <= 32'hbda65230;
      1078: out3 <= 32'hbda973ba;
      1079: out3 <= 32'hbdac952b;
      1080: out3 <= 32'hbdafb680;
      1081: out3 <= 32'hbdb2d7bb;
      1082: out3 <= 32'hbdb5f8da;
      1083: out3 <= 32'hbdb919dd;
      1084: out3 <= 32'hbdbc3ac3;
      1085: out3 <= 32'hbdbf5b8d;
      1086: out3 <= 32'hbdc27c39;
      1087: out3 <= 32'hbdc59cc6;
      1088: out3 <= 32'hbdc8bd36;
      1089: out3 <= 32'hbdcbdd86;
      1090: out3 <= 32'hbdcefdb7;
      1091: out3 <= 32'hbdd21dc8;
      1092: out3 <= 32'hbdd53db9;
      1093: out3 <= 32'hbdd85d89;
      1094: out3 <= 32'hbddb7d37;
      1095: out3 <= 32'hbdde9cc4;
      1096: out3 <= 32'hbde1bc2e;
      1097: out3 <= 32'hbde4db76;
      1098: out3 <= 32'hbde7fa9a;
      1099: out3 <= 32'hbdeb199a;
      1100: out3 <= 32'hbdee3876;
      1101: out3 <= 32'hbdf1572e;
      1102: out3 <= 32'hbdf475c0;
      1103: out3 <= 32'hbdf7942c;
      1104: out3 <= 32'hbdfab273;
      1105: out3 <= 32'hbdfdd092;
      1106: out3 <= 32'hbe007745;
      1107: out3 <= 32'hbe02062e;
      1108: out3 <= 32'hbe039502;
      1109: out3 <= 32'hbe0523c2;
      1110: out3 <= 32'hbe06b26e;
      1111: out3 <= 32'hbe084105;
      1112: out3 <= 32'hbe09cf86;
      1113: out3 <= 32'hbe0b5df3;
      1114: out3 <= 32'hbe0cec4a;
      1115: out3 <= 32'hbe0e7a8b;
      1116: out3 <= 32'hbe1008b7;
      1117: out3 <= 32'hbe1196cc;
      1118: out3 <= 32'hbe1324ca;
      1119: out3 <= 32'hbe14b2b2;
      1120: out3 <= 32'hbe164083;
      1121: out3 <= 32'hbe17ce3d;
      1122: out3 <= 32'hbe195be0;
      1123: out3 <= 32'hbe1ae96b;
      1124: out3 <= 32'hbe1c76de;
      1125: out3 <= 32'hbe1e0438;
      1126: out3 <= 32'hbe1f917b;
      1127: out3 <= 32'hbe211ea5;
      1128: out3 <= 32'hbe22abb6;
      1129: out3 <= 32'hbe2438ad;
      1130: out3 <= 32'hbe25c58c;
      1131: out3 <= 32'hbe275251;
      1132: out3 <= 32'hbe28defc;
      1133: out3 <= 32'hbe2a6b8d;
      1134: out3 <= 32'hbe2bf804;
      1135: out3 <= 32'hbe2d8461;
      1136: out3 <= 32'hbe2f10a2;
      1137: out3 <= 32'hbe309cc9;
      1138: out3 <= 32'hbe3228d4;
      1139: out3 <= 32'hbe33b4c4;
      1140: out3 <= 32'hbe354098;
      1141: out3 <= 32'hbe36cc50;
      1142: out3 <= 32'hbe3857ec;
      1143: out3 <= 32'hbe39e36c;
      1144: out3 <= 32'hbe3b6ecf;
      1145: out3 <= 32'hbe3cfa15;
      1146: out3 <= 32'hbe3e853e;
      1147: out3 <= 32'hbe401049;
      1148: out3 <= 32'hbe419b37;
      1149: out3 <= 32'hbe432607;
      1150: out3 <= 32'hbe44b0b9;
      1151: out3 <= 32'hbe463b4d;
      1152: out3 <= 32'hbe47c5c2;
      1153: out3 <= 32'hbe495018;
      1154: out3 <= 32'hbe4ada4f;
      1155: out3 <= 32'hbe4c6467;
      1156: out3 <= 32'hbe4dee60;
      1157: out3 <= 32'hbe4f7838;
      1158: out3 <= 32'hbe5101f1;
      1159: out3 <= 32'hbe528b89;
      1160: out3 <= 32'hbe541501;
      1161: out3 <= 32'hbe559e58;
      1162: out3 <= 32'hbe57278f;
      1163: out3 <= 32'hbe58b0a4;
      1164: out3 <= 32'hbe5a3997;
      1165: out3 <= 32'hbe5bc26a;
      1166: out3 <= 32'hbe5d4b1a;
      1167: out3 <= 32'hbe5ed3a8;
      1168: out3 <= 32'hbe605c13;
      1169: out3 <= 32'hbe61e45c;
      1170: out3 <= 32'hbe636c83;
      1171: out3 <= 32'hbe64f486;
      1172: out3 <= 32'hbe667c66;
      1173: out3 <= 32'hbe680422;
      1174: out3 <= 32'hbe698bba;
      1175: out3 <= 32'hbe6b132f;
      1176: out3 <= 32'hbe6c9a7f;
      1177: out3 <= 32'hbe6e21ab;
      1178: out3 <= 32'hbe6fa8b2;
      1179: out3 <= 32'hbe712f94;
      1180: out3 <= 32'hbe72b651;
      1181: out3 <= 32'hbe743ce8;
      1182: out3 <= 32'hbe75c35a;
      1183: out3 <= 32'hbe7749a6;
      1184: out3 <= 32'hbe78cfcc;
      1185: out3 <= 32'hbe7a55cb;
      1186: out3 <= 32'hbe7bdba4;
      1187: out3 <= 32'hbe7d6156;
      1188: out3 <= 32'hbe7ee6e1;
      1189: out3 <= 32'hbe803622;
      1190: out3 <= 32'hbe80f8c0;
      1191: out3 <= 32'hbe81bb4a;
      1192: out3 <= 32'hbe827dc0;
      1193: out3 <= 32'hbe834022;
      1194: out3 <= 32'hbe840270;
      1195: out3 <= 32'hbe84c4aa;
      1196: out3 <= 32'hbe8586ce;
      1197: out3 <= 32'hbe8648df;
      1198: out3 <= 32'hbe870ada;
      1199: out3 <= 32'hbe87ccc1;
      1200: out3 <= 32'hbe888e93;
      1201: out3 <= 32'hbe895050;
      1202: out3 <= 32'hbe8a11f7;
      1203: out3 <= 32'hbe8ad38a;
      1204: out3 <= 32'hbe8b9507;
      1205: out3 <= 32'hbe8c566e;
      1206: out3 <= 32'hbe8d17c0;
      1207: out3 <= 32'hbe8dd8fc;
      1208: out3 <= 32'hbe8e9a22;
      1209: out3 <= 32'hbe8f5b32;
      1210: out3 <= 32'hbe901c2c;
      1211: out3 <= 32'hbe90dd10;
      1212: out3 <= 32'hbe919ddd;
      1213: out3 <= 32'hbe925e94;
      1214: out3 <= 32'hbe931f35;
      1215: out3 <= 32'hbe93dfbf;
      1216: out3 <= 32'hbe94a031;
      1217: out3 <= 32'hbe95608d;
      1218: out3 <= 32'hbe9620d2;
      1219: out3 <= 32'hbe96e100;
      1220: out3 <= 32'hbe97a117;
      1221: out3 <= 32'hbe986116;
      1222: out3 <= 32'hbe9920fe;
      1223: out3 <= 32'hbe99e0ce;
      1224: out3 <= 32'hbe9aa086;
      1225: out3 <= 32'hbe9b6027;
      1226: out3 <= 32'hbe9c1faf;
      1227: out3 <= 32'hbe9cdf20;
      1228: out3 <= 32'hbe9d9e78;
      1229: out3 <= 32'hbe9e5db8;
      1230: out3 <= 32'hbe9f1cdf;
      1231: out3 <= 32'hbe9fdbee;
      1232: out3 <= 32'hbea09ae5;
      1233: out3 <= 32'hbea159c2;
      1234: out3 <= 32'hbea21887;
      1235: out3 <= 32'hbea2d733;
      1236: out3 <= 32'hbea395c5;
      1237: out3 <= 32'hbea4543f;
      1238: out3 <= 32'hbea5129f;
      1239: out3 <= 32'hbea5d0e5;
      1240: out3 <= 32'hbea68f12;
      1241: out3 <= 32'hbea74d25;
      1242: out3 <= 32'hbea80b1f;
      1243: out3 <= 32'hbea8c8fe;
      1244: out3 <= 32'hbea986c4;
      1245: out3 <= 32'hbeaa446f;
      1246: out3 <= 32'hbeab0201;
      1247: out3 <= 32'hbeabbf77;
      1248: out3 <= 32'hbeac7cd4;
      1249: out3 <= 32'hbead3a15;
      1250: out3 <= 32'hbeadf73c;
      1251: out3 <= 32'hbeaeb449;
      1252: out3 <= 32'hbeaf713a;
      1253: out3 <= 32'hbeb02e10;
      1254: out3 <= 32'hbeb0eacb;
      1255: out3 <= 32'hbeb1a76b;
      1256: out3 <= 32'hbeb263ef;
      1257: out3 <= 32'hbeb32058;
      1258: out3 <= 32'hbeb3dca5;
      1259: out3 <= 32'hbeb498d6;
      1260: out3 <= 32'hbeb554ec;
      1261: out3 <= 32'hbeb610e6;
      1262: out3 <= 32'hbeb6ccc3;
      1263: out3 <= 32'hbeb78884;
      1264: out3 <= 32'hbeb8442a;
      1265: out3 <= 32'hbeb8ffb2;
      1266: out3 <= 32'hbeb9bb1e;
      1267: out3 <= 32'hbeba766e;
      1268: out3 <= 32'hbebb31a0;
      1269: out3 <= 32'hbebbecb6;
      1270: out3 <= 32'hbebca7af;
      1271: out3 <= 32'hbebd628b;
      1272: out3 <= 32'hbebe1d4a;
      1273: out3 <= 32'hbebed7eb;
      1274: out3 <= 32'hbebf926f;
      1275: out3 <= 32'hbec04cd5;
      1276: out3 <= 32'hbec1071e;
      1277: out3 <= 32'hbec1c148;
      1278: out3 <= 32'hbec27b55;
      1279: out3 <= 32'hbec33544;
      1280: out3 <= 32'hbec3ef15;
      1281: out3 <= 32'hbec4a8c8;
      1282: out3 <= 32'hbec5625c;
      1283: out3 <= 32'hbec61bd2;
      1284: out3 <= 32'hbec6d529;
      1285: out3 <= 32'hbec78e62;
      1286: out3 <= 32'hbec8477c;
      1287: out3 <= 32'hbec90077;
      1288: out3 <= 32'hbec9b953;
      1289: out3 <= 32'hbeca7210;
      1290: out3 <= 32'hbecb2aae;
      1291: out3 <= 32'hbecbe32c;
      1292: out3 <= 32'hbecc9b8b;
      1293: out3 <= 32'hbecd53ca;
      1294: out3 <= 32'hbece0bea;
      1295: out3 <= 32'hbecec3ea;
      1296: out3 <= 32'hbecf7bca;
      1297: out3 <= 32'hbed0338a;
      1298: out3 <= 32'hbed0eb2a;
      1299: out3 <= 32'hbed1a2aa;
      1300: out3 <= 32'hbed25a09;
      1301: out3 <= 32'hbed31148;
      1302: out3 <= 32'hbed3c867;
      1303: out3 <= 32'hbed47f64;
      1304: out3 <= 32'hbed53641;
      1305: out3 <= 32'hbed5ecfd;
      1306: out3 <= 32'hbed6a399;
      1307: out3 <= 32'hbed75a13;
      1308: out3 <= 32'hbed8106b;
      1309: out3 <= 32'hbed8c6a3;
      1310: out3 <= 32'hbed97cb9;
      1311: out3 <= 32'hbeda32ad;
      1312: out3 <= 32'hbedae880;
      1313: out3 <= 32'hbedb9e31;
      1314: out3 <= 32'hbedc53c1;
      1315: out3 <= 32'hbedd092e;
      1316: out3 <= 32'hbeddbe79;
      1317: out3 <= 32'hbede73a2;
      1318: out3 <= 32'hbedf28a9;
      1319: out3 <= 32'hbedfdd8d;
      1320: out3 <= 32'hbee0924f;
      1321: out3 <= 32'hbee146ee;
      1322: out3 <= 32'hbee1fb6a;
      1323: out3 <= 32'hbee2afc4;
      1324: out3 <= 32'hbee363fa;
      1325: out3 <= 32'hbee4180e;
      1326: out3 <= 32'hbee4cbfe;
      1327: out3 <= 32'hbee57fcb;
      1328: out3 <= 32'hbee63375;
      1329: out3 <= 32'hbee6e6fb;
      1330: out3 <= 32'hbee79a5d;
      1331: out3 <= 32'hbee84d9c;
      1332: out3 <= 32'hbee900b7;
      1333: out3 <= 32'hbee9b3ae;
      1334: out3 <= 32'hbeea6681;
      1335: out3 <= 32'hbeeb1930;
      1336: out3 <= 32'hbeebcbbb;
      1337: out3 <= 32'hbeec7e21;
      1338: out3 <= 32'hbeed3063;
      1339: out3 <= 32'hbeede280;
      1340: out3 <= 32'hbeee9479;
      1341: out3 <= 32'hbeef464c;
      1342: out3 <= 32'hbeeff7fb;
      1343: out3 <= 32'hbef0a985;
      1344: out3 <= 32'hbef15aea;
      1345: out3 <= 32'hbef20c29;
      1346: out3 <= 32'hbef2bd43;
      1347: out3 <= 32'hbef36e38;
      1348: out3 <= 32'hbef41f07;
      1349: out3 <= 32'hbef4cfb1;
      1350: out3 <= 32'hbef58035;
      1351: out3 <= 32'hbef63093;
      1352: out3 <= 32'hbef6e0cb;
      1353: out3 <= 32'hbef790dc;
      1354: out3 <= 32'hbef840c8;
      1355: out3 <= 32'hbef8f08e;
      1356: out3 <= 32'hbef9a02d;
      1357: out3 <= 32'hbefa4fa5;
      1358: out3 <= 32'hbefafef7;
      1359: out3 <= 32'hbefbae22;
      1360: out3 <= 32'hbefc5d27;
      1361: out3 <= 32'hbefd0c04;
      1362: out3 <= 32'hbefdbabb;
      1363: out3 <= 32'hbefe694a;
      1364: out3 <= 32'hbeff17b2;
      1365: out3 <= 32'hbeffc5f3;
      1366: out3 <= 32'hbf003a06;
      1367: out3 <= 32'hbf0090ff;
      1368: out3 <= 32'hbf00e7e4;
      1369: out3 <= 32'hbf013eb5;
      1370: out3 <= 32'hbf019573;
      1371: out3 <= 32'hbf01ec1c;
      1372: out3 <= 32'hbf0242b1;
      1373: out3 <= 32'hbf029932;
      1374: out3 <= 32'hbf02ef9f;
      1375: out3 <= 32'hbf0345f8;
      1376: out3 <= 32'hbf039c3d;
      1377: out3 <= 32'hbf03f26d;
      1378: out3 <= 32'hbf044889;
      1379: out3 <= 32'hbf049e91;
      1380: out3 <= 32'hbf04f484;
      1381: out3 <= 32'hbf054a62;
      1382: out3 <= 32'hbf05a02c;
      1383: out3 <= 32'hbf05f5e2;
      1384: out3 <= 32'hbf064b82;
      1385: out3 <= 32'hbf06a10e;
      1386: out3 <= 32'hbf06f686;
      1387: out3 <= 32'hbf074be8;
      1388: out3 <= 32'hbf07a136;
      1389: out3 <= 32'hbf07f66f;
      1390: out3 <= 32'hbf084b92;
      1391: out3 <= 32'hbf08a0a1;
      1392: out3 <= 32'hbf08f59b;
      1393: out3 <= 32'hbf094a7f;
      1394: out3 <= 32'hbf099f4e;
      1395: out3 <= 32'hbf09f409;
      1396: out3 <= 32'hbf0a48ad;
      1397: out3 <= 32'hbf0a9d3d;
      1398: out3 <= 32'hbf0af1b7;
      1399: out3 <= 32'hbf0b461c;
      1400: out3 <= 32'hbf0b9a6b;
      1401: out3 <= 32'hbf0beea5;
      1402: out3 <= 32'hbf0c42c9;
      1403: out3 <= 32'hbf0c96d7;
      1404: out3 <= 32'hbf0cead0;
      1405: out3 <= 32'hbf0d3eb3;
      1406: out3 <= 32'hbf0d9281;
      1407: out3 <= 32'hbf0de638;
      1408: out3 <= 32'hbf0e39da;
      1409: out3 <= 32'hbf0e8d65;
      1410: out3 <= 32'hbf0ee0db;
      1411: out3 <= 32'hbf0f343b;
      1412: out3 <= 32'hbf0f8784;
      1413: out3 <= 32'hbf0fdab8;
      1414: out3 <= 32'hbf102dd5;
      1415: out3 <= 32'hbf1080dc;
      1416: out3 <= 32'hbf10d3cd;
      1417: out3 <= 32'hbf1126a7;
      1418: out3 <= 32'hbf11796b;
      1419: out3 <= 32'hbf11cc19;
      1420: out3 <= 32'hbf121eb0;
      1421: out3 <= 32'hbf127130;
      1422: out3 <= 32'hbf12c39a;
      1423: out3 <= 32'hbf1315ee;
      1424: out3 <= 32'hbf13682a;
      1425: out3 <= 32'hbf13ba50;
      1426: out3 <= 32'hbf140c5f;
      1427: out3 <= 32'hbf145e58;
      1428: out3 <= 32'hbf14b039;
      1429: out3 <= 32'hbf150204;
      1430: out3 <= 32'hbf1553b7;
      1431: out3 <= 32'hbf15a554;
      1432: out3 <= 32'hbf15f6d9;
      1433: out3 <= 32'hbf164847;
      1434: out3 <= 32'hbf16999f;
      1435: out3 <= 32'hbf16eade;
      1436: out3 <= 32'hbf173c07;
      1437: out3 <= 32'hbf178d18;
      1438: out3 <= 32'hbf17de12;
      1439: out3 <= 32'hbf182ef5;
      1440: out3 <= 32'hbf187fc0;
      1441: out3 <= 32'hbf18d073;
      1442: out3 <= 32'hbf19210f;
      1443: out3 <= 32'hbf197194;
      1444: out3 <= 32'hbf19c200;
      1445: out3 <= 32'hbf1a1255;
      1446: out3 <= 32'hbf1a6293;
      1447: out3 <= 32'hbf1ab2b8;
      1448: out3 <= 32'hbf1b02c6;
      1449: out3 <= 32'hbf1b52bb;
      1450: out3 <= 32'hbf1ba299;
      1451: out3 <= 32'hbf1bf25f;
      1452: out3 <= 32'hbf1c420c;
      1453: out3 <= 32'hbf1c91a2;
      1454: out3 <= 32'hbf1ce11f;
      1455: out3 <= 32'hbf1d3084;
      1456: out3 <= 32'hbf1d7fd1;
      1457: out3 <= 32'hbf1dcf06;
      1458: out3 <= 32'hbf1e1e22;
      1459: out3 <= 32'hbf1e6d26;
      1460: out3 <= 32'hbf1ebc12;
      1461: out3 <= 32'hbf1f0ae5;
      1462: out3 <= 32'hbf1f599f;
      1463: out3 <= 32'hbf1fa841;
      1464: out3 <= 32'hbf1ff6cb;
      1465: out3 <= 32'hbf20453b;
      1466: out3 <= 32'hbf209393;
      1467: out3 <= 32'hbf20e1d2;
      1468: out3 <= 32'hbf212ff9;
      1469: out3 <= 32'hbf217e06;
      1470: out3 <= 32'hbf21cbfb;
      1471: out3 <= 32'hbf2219d7;
      1472: out3 <= 32'hbf226799;
      1473: out3 <= 32'hbf22b543;
      1474: out3 <= 32'hbf2302d3;
      1475: out3 <= 32'hbf23504b;
      1476: out3 <= 32'hbf239da9;
      1477: out3 <= 32'hbf23eaee;
      1478: out3 <= 32'hbf24381a;
      1479: out3 <= 32'hbf24852c;
      1480: out3 <= 32'hbf24d225;
      1481: out3 <= 32'hbf251f04;
      1482: out3 <= 32'hbf256bcb;
      1483: out3 <= 32'hbf25b877;
      1484: out3 <= 32'hbf26050a;
      1485: out3 <= 32'hbf265184;
      1486: out3 <= 32'hbf269de3;
      1487: out3 <= 32'hbf26ea2a;
      1488: out3 <= 32'hbf273656;
      1489: out3 <= 32'hbf278268;
      1490: out3 <= 32'hbf27ce61;
      1491: out3 <= 32'hbf281a40;
      1492: out3 <= 32'hbf286605;
      1493: out3 <= 32'hbf28b1b0;
      1494: out3 <= 32'hbf28fd41;
      1495: out3 <= 32'hbf2948b8;
      1496: out3 <= 32'hbf299415;
      1497: out3 <= 32'hbf29df57;
      1498: out3 <= 32'hbf2a2a80;
      1499: out3 <= 32'hbf2a758e;
      1500: out3 <= 32'hbf2ac082;
      1501: out3 <= 32'hbf2b0b5b;
      1502: out3 <= 32'hbf2b561b;
      1503: out3 <= 32'hbf2ba0bf;
      1504: out3 <= 32'hbf2beb4a;
      1505: out3 <= 32'hbf2c35b9;
      1506: out3 <= 32'hbf2c800f;
      1507: out3 <= 32'hbf2cca49;
      1508: out3 <= 32'hbf2d1469;
      1509: out3 <= 32'hbf2d5e6f;
      1510: out3 <= 32'hbf2da859;
      1511: out3 <= 32'hbf2df229;
      1512: out3 <= 32'hbf2e3bde;
      1513: out3 <= 32'hbf2e8578;
      1514: out3 <= 32'hbf2ecef7;
      1515: out3 <= 32'hbf2f185b;
      1516: out3 <= 32'hbf2f61a5;
      1517: out3 <= 32'hbf2faad3;
      1518: out3 <= 32'hbf2ff3e6;
      1519: out3 <= 32'hbf303cde;
      1520: out3 <= 32'hbf3085bb;
      1521: out3 <= 32'hbf30ce7c;
      1522: out3 <= 32'hbf311722;
      1523: out3 <= 32'hbf315fad;
      1524: out3 <= 32'hbf31a81d;
      1525: out3 <= 32'hbf31f071;
      1526: out3 <= 32'hbf3238aa;
      1527: out3 <= 32'hbf3280c7;
      1528: out3 <= 32'hbf32c8c9;
      1529: out3 <= 32'hbf3310af;
      1530: out3 <= 32'hbf33587a;
      1531: out3 <= 32'hbf33a029;
      1532: out3 <= 32'hbf33e7bc;
      1533: out3 <= 32'hbf342f34;
      1534: out3 <= 32'hbf34768f;
      1535: out3 <= 32'hbf34bdcf;
      1536: out3 <= 32'hbf3504f3;
      1537: out3 <= 32'hbf354bfb;
      1538: out3 <= 32'hbf3592e7;
      1539: out3 <= 32'hbf35d9b8;
      1540: out3 <= 32'hbf36206c;
      1541: out3 <= 32'hbf366704;
      1542: out3 <= 32'hbf36ad7f;
      1543: out3 <= 32'hbf36f3df;
      1544: out3 <= 32'hbf373a23;
      1545: out3 <= 32'hbf37804a;
      1546: out3 <= 32'hbf37c655;
      1547: out3 <= 32'hbf380c43;
      1548: out3 <= 32'hbf385216;
      1549: out3 <= 32'hbf3897cb;
      1550: out3 <= 32'hbf38dd65;
      1551: out3 <= 32'hbf3922e1;
      1552: out3 <= 32'hbf396842;
      1553: out3 <= 32'hbf39ad85;
      1554: out3 <= 32'hbf39f2ac;
      1555: out3 <= 32'hbf3a37b7;
      1556: out3 <= 32'hbf3a7ca4;
      1557: out3 <= 32'hbf3ac175;
      1558: out3 <= 32'hbf3b0629;
      1559: out3 <= 32'hbf3b4ac1;
      1560: out3 <= 32'hbf3b8f3b;
      1561: out3 <= 32'hbf3bd398;
      1562: out3 <= 32'hbf3c17d9;
      1563: out3 <= 32'hbf3c5bfc;
      1564: out3 <= 32'hbf3ca003;
      1565: out3 <= 32'hbf3ce3ec;
      1566: out3 <= 32'hbf3d27b8;
      1567: out3 <= 32'hbf3d6b67;
      1568: out3 <= 32'hbf3daef9;
      1569: out3 <= 32'hbf3df26e;
      1570: out3 <= 32'hbf3e35c5;
      1571: out3 <= 32'hbf3e78ff;
      1572: out3 <= 32'hbf3ebc1b;
      1573: out3 <= 32'hbf3eff1b;
      1574: out3 <= 32'hbf3f41fc;
      1575: out3 <= 32'hbf3f84c0;
      1576: out3 <= 32'hbf3fc767;
      1577: out3 <= 32'hbf4009f0;
      1578: out3 <= 32'hbf404c5c;
      1579: out3 <= 32'hbf408ea9;
      1580: out3 <= 32'hbf40d0da;
      1581: out3 <= 32'hbf4112ec;
      1582: out3 <= 32'hbf4154e1;
      1583: out3 <= 32'hbf4196b7;
      1584: out3 <= 32'hbf41d870;
      1585: out3 <= 32'hbf421a0b;
      1586: out3 <= 32'hbf425b89;
      1587: out3 <= 32'hbf429ce8;
      1588: out3 <= 32'hbf42de29;
      1589: out3 <= 32'hbf431f4c;
      1590: out3 <= 32'hbf436051;
      1591: out3 <= 32'hbf43a138;
      1592: out3 <= 32'hbf43e200;
      1593: out3 <= 32'hbf4422ab;
      1594: out3 <= 32'hbf446337;
      1595: out3 <= 32'hbf44a3a5;
      1596: out3 <= 32'hbf44e3f5;
      1597: out3 <= 32'hbf452426;
      1598: out3 <= 32'hbf456439;
      1599: out3 <= 32'hbf45a42d;
      1600: out3 <= 32'hbf45e403;
      1601: out3 <= 32'hbf4623bb;
      1602: out3 <= 32'hbf466354;
      1603: out3 <= 32'hbf46a2ce;
      1604: out3 <= 32'hbf46e22a;
      1605: out3 <= 32'hbf472167;
      1606: out3 <= 32'hbf476085;
      1607: out3 <= 32'hbf479f84;
      1608: out3 <= 32'hbf47de65;
      1609: out3 <= 32'hbf481d27;
      1610: out3 <= 32'hbf485bca;
      1611: out3 <= 32'hbf489a4e;
      1612: out3 <= 32'hbf48d8b3;
      1613: out3 <= 32'hbf4916fa;
      1614: out3 <= 32'hbf495521;
      1615: out3 <= 32'hbf499329;
      1616: out3 <= 32'hbf49d112;
      1617: out3 <= 32'hbf4a0edc;
      1618: out3 <= 32'hbf4a4c87;
      1619: out3 <= 32'hbf4a8a13;
      1620: out3 <= 32'hbf4ac77f;
      1621: out3 <= 32'hbf4b04cc;
      1622: out3 <= 32'hbf4b41fa;
      1623: out3 <= 32'hbf4b7f09;
      1624: out3 <= 32'hbf4bbbf8;
      1625: out3 <= 32'hbf4bf8c7;
      1626: out3 <= 32'hbf4c3578;
      1627: out3 <= 32'hbf4c7208;
      1628: out3 <= 32'hbf4cae79;
      1629: out3 <= 32'hbf4ceacb;
      1630: out3 <= 32'hbf4d26fd;
      1631: out3 <= 32'hbf4d6310;
      1632: out3 <= 32'hbf4d9f02;
      1633: out3 <= 32'hbf4ddad5;
      1634: out3 <= 32'hbf4e1689;
      1635: out3 <= 32'hbf4e521c;
      1636: out3 <= 32'hbf4e8d90;
      1637: out3 <= 32'hbf4ec8e4;
      1638: out3 <= 32'hbf4f0417;
      1639: out3 <= 32'hbf4f3f2b;
      1640: out3 <= 32'hbf4f7a1f;
      1641: out3 <= 32'hbf4fb4f4;
      1642: out3 <= 32'hbf4fefa8;
      1643: out3 <= 32'hbf502a3b;
      1644: out3 <= 32'hbf5064af;
      1645: out3 <= 32'hbf509f03;
      1646: out3 <= 32'hbf50d937;
      1647: out3 <= 32'hbf51134a;
      1648: out3 <= 32'hbf514d3d;
      1649: out3 <= 32'hbf518710;
      1650: out3 <= 32'hbf51c0c2;
      1651: out3 <= 32'hbf51fa54;
      1652: out3 <= 32'hbf5233c6;
      1653: out3 <= 32'hbf526d18;
      1654: out3 <= 32'hbf52a649;
      1655: out3 <= 32'hbf52df59;
      1656: out3 <= 32'hbf531849;
      1657: out3 <= 32'hbf535118;
      1658: out3 <= 32'hbf5389c7;
      1659: out3 <= 32'hbf53c255;
      1660: out3 <= 32'hbf53fac3;
      1661: out3 <= 32'hbf54330f;
      1662: out3 <= 32'hbf546b3b;
      1663: out3 <= 32'hbf54a347;
      1664: out3 <= 32'hbf54db31;
      1665: out3 <= 32'hbf5512fb;
      1666: out3 <= 32'hbf554aa4;
      1667: out3 <= 32'hbf55822c;
      1668: out3 <= 32'hbf55b993;
      1669: out3 <= 32'hbf55f0d9;
      1670: out3 <= 32'hbf5627fe;
      1671: out3 <= 32'hbf565f02;
      1672: out3 <= 32'hbf5695e5;
      1673: out3 <= 32'hbf56cca7;
      1674: out3 <= 32'hbf570348;
      1675: out3 <= 32'hbf5739c7;
      1676: out3 <= 32'hbf577026;
      1677: out3 <= 32'hbf57a663;
      1678: out3 <= 32'hbf57dc7f;
      1679: out3 <= 32'hbf581279;
      1680: out3 <= 32'hbf584853;
      1681: out3 <= 32'hbf587e0b;
      1682: out3 <= 32'hbf58b3a1;
      1683: out3 <= 32'hbf58e916;
      1684: out3 <= 32'hbf591e6a;
      1685: out3 <= 32'hbf59539c;
      1686: out3 <= 32'hbf5988ad;
      1687: out3 <= 32'hbf59bd9c;
      1688: out3 <= 32'hbf59f26a;
      1689: out3 <= 32'hbf5a2716;
      1690: out3 <= 32'hbf5a5ba0;
      1691: out3 <= 32'hbf5a9009;
      1692: out3 <= 32'hbf5ac450;
      1693: out3 <= 32'hbf5af875;
      1694: out3 <= 32'hbf5b2c79;
      1695: out3 <= 32'hbf5b605a;
      1696: out3 <= 32'hbf5b941a;
      1697: out3 <= 32'hbf5bc7b8;
      1698: out3 <= 32'hbf5bfb34;
      1699: out3 <= 32'hbf5c2e8e;
      1700: out3 <= 32'hbf5c61c7;
      1701: out3 <= 32'hbf5c94dd;
      1702: out3 <= 32'hbf5cc7d1;
      1703: out3 <= 32'hbf5cfaa3;
      1704: out3 <= 32'hbf5d2d53;
      1705: out3 <= 32'hbf5d5fe1;
      1706: out3 <= 32'hbf5d924d;
      1707: out3 <= 32'hbf5dc497;
      1708: out3 <= 32'hbf5df6be;
      1709: out3 <= 32'hbf5e28c3;
      1710: out3 <= 32'hbf5e5aa6;
      1711: out3 <= 32'hbf5e8c67;
      1712: out3 <= 32'hbf5ebe05;
      1713: out3 <= 32'hbf5eef81;
      1714: out3 <= 32'hbf5f20db;
      1715: out3 <= 32'hbf5f5212;
      1716: out3 <= 32'hbf5f8327;
      1717: out3 <= 32'hbf5fb419;
      1718: out3 <= 32'hbf5fe4e9;
      1719: out3 <= 32'hbf601596;
      1720: out3 <= 32'hbf604621;
      1721: out3 <= 32'hbf607689;
      1722: out3 <= 32'hbf60a6cf;
      1723: out3 <= 32'hbf60d6f2;
      1724: out3 <= 32'hbf6106f2;
      1725: out3 <= 32'hbf6136d0;
      1726: out3 <= 32'hbf61668a;
      1727: out3 <= 32'hbf619622;
      1728: out3 <= 32'hbf61c598;
      1729: out3 <= 32'hbf61f4ea;
      1730: out3 <= 32'hbf62241a;
      1731: out3 <= 32'hbf625326;
      1732: out3 <= 32'hbf628210;
      1733: out3 <= 32'hbf62b0d7;
      1734: out3 <= 32'hbf62df7b;
      1735: out3 <= 32'hbf630dfc;
      1736: out3 <= 32'hbf633c5a;
      1737: out3 <= 32'hbf636a95;
      1738: out3 <= 32'hbf6398ac;
      1739: out3 <= 32'hbf63c6a1;
      1740: out3 <= 32'hbf63f473;
      1741: out3 <= 32'hbf642221;
      1742: out3 <= 32'hbf644fac;
      1743: out3 <= 32'hbf647d14;
      1744: out3 <= 32'hbf64aa59;
      1745: out3 <= 32'hbf64d77b;
      1746: out3 <= 32'hbf650479;
      1747: out3 <= 32'hbf653154;
      1748: out3 <= 32'hbf655e0b;
      1749: out3 <= 32'hbf658aa0;
      1750: out3 <= 32'hbf65b710;
      1751: out3 <= 32'hbf65e35e;
      1752: out3 <= 32'hbf660f88;
      1753: out3 <= 32'hbf663b8e;
      1754: out3 <= 32'hbf666771;
      1755: out3 <= 32'hbf669330;
      1756: out3 <= 32'hbf66becc;
      1757: out3 <= 32'hbf66ea45;
      1758: out3 <= 32'hbf671599;
      1759: out3 <= 32'hbf6740ca;
      1760: out3 <= 32'hbf676bd8;
      1761: out3 <= 32'hbf6796c1;
      1762: out3 <= 32'hbf67c187;
      1763: out3 <= 32'hbf67ec29;
      1764: out3 <= 32'hbf6816a8;
      1765: out3 <= 32'hbf684103;
      1766: out3 <= 32'hbf686b39;
      1767: out3 <= 32'hbf68954c;
      1768: out3 <= 32'hbf68bf3c;
      1769: out3 <= 32'hbf68e907;
      1770: out3 <= 32'hbf6912ae;
      1771: out3 <= 32'hbf693c32;
      1772: out3 <= 32'hbf696591;
      1773: out3 <= 32'hbf698ecc;
      1774: out3 <= 32'hbf69b7e4;
      1775: out3 <= 32'hbf69e0d7;
      1776: out3 <= 32'hbf6a09a7;
      1777: out3 <= 32'hbf6a3252;
      1778: out3 <= 32'hbf6a5ad9;
      1779: out3 <= 32'hbf6a833c;
      1780: out3 <= 32'hbf6aab7b;
      1781: out3 <= 32'hbf6ad395;
      1782: out3 <= 32'hbf6afb8c;
      1783: out3 <= 32'hbf6b235e;
      1784: out3 <= 32'hbf6b4b0c;
      1785: out3 <= 32'hbf6b7295;
      1786: out3 <= 32'hbf6b99fb;
      1787: out3 <= 32'hbf6bc13b;
      1788: out3 <= 32'hbf6be858;
      1789: out3 <= 32'hbf6c0f50;
      1790: out3 <= 32'hbf6c3624;
      1791: out3 <= 32'hbf6c5cd4;
      1792: out3 <= 32'hbf6c835e;
      1793: out3 <= 32'hbf6ca9c5;
      1794: out3 <= 32'hbf6cd007;
      1795: out3 <= 32'hbf6cf624;
      1796: out3 <= 32'hbf6d1c1d;
      1797: out3 <= 32'hbf6d41f2;
      1798: out3 <= 32'hbf6d67a1;
      1799: out3 <= 32'hbf6d8d2d;
      1800: out3 <= 32'hbf6db293;
      1801: out3 <= 32'hbf6dd7d5;
      1802: out3 <= 32'hbf6dfcf2;
      1803: out3 <= 32'hbf6e21eb;
      1804: out3 <= 32'hbf6e46be;
      1805: out3 <= 32'hbf6e6b6d;
      1806: out3 <= 32'hbf6e8ff8;
      1807: out3 <= 32'hbf6eb45d;
      1808: out3 <= 32'hbf6ed89e;
      1809: out3 <= 32'hbf6efcba;
      1810: out3 <= 32'hbf6f20b0;
      1811: out3 <= 32'hbf6f4483;
      1812: out3 <= 32'hbf6f6830;
      1813: out3 <= 32'hbf6f8bb8;
      1814: out3 <= 32'hbf6faf1b;
      1815: out3 <= 32'hbf6fd25a;
      1816: out3 <= 32'hbf6ff573;
      1817: out3 <= 32'hbf701867;
      1818: out3 <= 32'hbf703b37;
      1819: out3 <= 32'hbf705de1;
      1820: out3 <= 32'hbf708066;
      1821: out3 <= 32'hbf70a2c6;
      1822: out3 <= 32'hbf70c501;
      1823: out3 <= 32'hbf70e717;
      1824: out3 <= 32'hbf710908;
      1825: out3 <= 32'hbf712ad4;
      1826: out3 <= 32'hbf714c7a;
      1827: out3 <= 32'hbf716dfb;
      1828: out3 <= 32'hbf718f57;
      1829: out3 <= 32'hbf71b08e;
      1830: out3 <= 32'hbf71d19f;
      1831: out3 <= 32'hbf71f28c;
      1832: out3 <= 32'hbf721352;
      1833: out3 <= 32'hbf7233f4;
      1834: out3 <= 32'hbf725470;
      1835: out3 <= 32'hbf7274c7;
      1836: out3 <= 32'hbf7294f8;
      1837: out3 <= 32'hbf72b504;
      1838: out3 <= 32'hbf72d4eb;
      1839: out3 <= 32'hbf72f4ac;
      1840: out3 <= 32'hbf731447;
      1841: out3 <= 32'hbf7333be;
      1842: out3 <= 32'hbf73530e;
      1843: out3 <= 32'hbf737239;
      1844: out3 <= 32'hbf73913f;
      1845: out3 <= 32'hbf73b01f;
      1846: out3 <= 32'hbf73ced9;
      1847: out3 <= 32'hbf73ed6e;
      1848: out3 <= 32'hbf740bdd;
      1849: out3 <= 32'hbf742a27;
      1850: out3 <= 32'hbf74484b;
      1851: out3 <= 32'hbf746649;
      1852: out3 <= 32'hbf748422;
      1853: out3 <= 32'hbf74a1d5;
      1854: out3 <= 32'hbf74bf62;
      1855: out3 <= 32'hbf74dcc9;
      1856: out3 <= 32'hbf74fa0b;
      1857: out3 <= 32'hbf751727;
      1858: out3 <= 32'hbf75341d;
      1859: out3 <= 32'hbf7550ed;
      1860: out3 <= 32'hbf756d97;
      1861: out3 <= 32'hbf758a1c;
      1862: out3 <= 32'hbf75a67b;
      1863: out3 <= 32'hbf75c2b3;
      1864: out3 <= 32'hbf75dec6;
      1865: out3 <= 32'hbf75fab3;
      1866: out3 <= 32'hbf76167a;
      1867: out3 <= 32'hbf76321b;
      1868: out3 <= 32'hbf764d97;
      1869: out3 <= 32'hbf7668ec;
      1870: out3 <= 32'hbf76841b;
      1871: out3 <= 32'hbf769f24;
      1872: out3 <= 32'hbf76ba07;
      1873: out3 <= 32'hbf76d4c4;
      1874: out3 <= 32'hbf76ef5b;
      1875: out3 <= 32'hbf7709cc;
      1876: out3 <= 32'hbf772417;
      1877: out3 <= 32'hbf773e3c;
      1878: out3 <= 32'hbf77583a;
      1879: out3 <= 32'hbf777213;
      1880: out3 <= 32'hbf778bc5;
      1881: out3 <= 32'hbf77a551;
      1882: out3 <= 32'hbf77beb7;
      1883: out3 <= 32'hbf77d7f7;
      1884: out3 <= 32'hbf77f110;
      1885: out3 <= 32'hbf780a04;
      1886: out3 <= 32'hbf7822d1;
      1887: out3 <= 32'hbf783b77;
      1888: out3 <= 32'hbf7853f8;
      1889: out3 <= 32'hbf786c52;
      1890: out3 <= 32'hbf788486;
      1891: out3 <= 32'hbf789c93;
      1892: out3 <= 32'hbf78b47b;
      1893: out3 <= 32'hbf78cc3b;
      1894: out3 <= 32'hbf78e3d6;
      1895: out3 <= 32'hbf78fb4a;
      1896: out3 <= 32'hbf791298;
      1897: out3 <= 32'hbf7929bf;
      1898: out3 <= 32'hbf7940c0;
      1899: out3 <= 32'hbf79579a;
      1900: out3 <= 32'hbf796e4e;
      1901: out3 <= 32'hbf7984dc;
      1902: out3 <= 32'hbf799b43;
      1903: out3 <= 32'hbf79b183;
      1904: out3 <= 32'hbf79c79d;
      1905: out3 <= 32'hbf79dd91;
      1906: out3 <= 32'hbf79f35e;
      1907: out3 <= 32'hbf7a0904;
      1908: out3 <= 32'hbf7a1e84;
      1909: out3 <= 32'hbf7a33dd;
      1910: out3 <= 32'hbf7a4910;
      1911: out3 <= 32'hbf7a5e1c;
      1912: out3 <= 32'hbf7a7302;
      1913: out3 <= 32'hbf7a87c1;
      1914: out3 <= 32'hbf7a9c59;
      1915: out3 <= 32'hbf7ab0cb;
      1916: out3 <= 32'hbf7ac516;
      1917: out3 <= 32'hbf7ad93a;
      1918: out3 <= 32'hbf7aed37;
      1919: out3 <= 32'hbf7b010e;
      1920: out3 <= 32'hbf7b14be;
      1921: out3 <= 32'hbf7b2848;
      1922: out3 <= 32'hbf7b3bab;
      1923: out3 <= 32'hbf7b4ee7;
      1924: out3 <= 32'hbf7b61fc;
      1925: out3 <= 32'hbf7b74ea;
      1926: out3 <= 32'hbf7b87b2;
      1927: out3 <= 32'hbf7b9a53;
      1928: out3 <= 32'hbf7baccd;
      1929: out3 <= 32'hbf7bbf20;
      1930: out3 <= 32'hbf7bd14d;
      1931: out3 <= 32'hbf7be353;
      1932: out3 <= 32'hbf7bf531;
      1933: out3 <= 32'hbf7c06e9;
      1934: out3 <= 32'hbf7c187a;
      1935: out3 <= 32'hbf7c29e5;
      1936: out3 <= 32'hbf7c3b28;
      1937: out3 <= 32'hbf7c4c44;
      1938: out3 <= 32'hbf7c5d3a;
      1939: out3 <= 32'hbf7c6e08;
      1940: out3 <= 32'hbf7c7eb0;
      1941: out3 <= 32'hbf7c8f31;
      1942: out3 <= 32'hbf7c9f8a;
      1943: out3 <= 32'hbf7cafbd;
      1944: out3 <= 32'hbf7cbfc9;
      1945: out3 <= 32'hbf7ccfae;
      1946: out3 <= 32'hbf7cdf6c;
      1947: out3 <= 32'hbf7cef03;
      1948: out3 <= 32'hbf7cfe73;
      1949: out3 <= 32'hbf7d0dbc;
      1950: out3 <= 32'hbf7d1cdd;
      1951: out3 <= 32'hbf7d2bd8;
      1952: out3 <= 32'hbf7d3aac;
      1953: out3 <= 32'hbf7d4959;
      1954: out3 <= 32'hbf7d57de;
      1955: out3 <= 32'hbf7d663d;
      1956: out3 <= 32'hbf7d7474;
      1957: out3 <= 32'hbf7d8285;
      1958: out3 <= 32'hbf7d906e;
      1959: out3 <= 32'hbf7d9e30;
      1960: out3 <= 32'hbf7dabcc;
      1961: out3 <= 32'hbf7db940;
      1962: out3 <= 32'hbf7dc68c;
      1963: out3 <= 32'hbf7dd3b2;
      1964: out3 <= 32'hbf7de0b1;
      1965: out3 <= 32'hbf7ded88;
      1966: out3 <= 32'hbf7dfa38;
      1967: out3 <= 32'hbf7e06c2;
      1968: out3 <= 32'hbf7e1324;
      1969: out3 <= 32'hbf7e1f5e;
      1970: out3 <= 32'hbf7e2b72;
      1971: out3 <= 32'hbf7e375e;
      1972: out3 <= 32'hbf7e4323;
      1973: out3 <= 32'hbf7e4ec1;
      1974: out3 <= 32'hbf7e5a38;
      1975: out3 <= 32'hbf7e6588;
      1976: out3 <= 32'hbf7e70b0;
      1977: out3 <= 32'hbf7e7bb1;
      1978: out3 <= 32'hbf7e868b;
      1979: out3 <= 32'hbf7e913d;
      1980: out3 <= 32'hbf7e9bc9;
      1981: out3 <= 32'hbf7ea62d;
      1982: out3 <= 32'hbf7eb069;
      1983: out3 <= 32'hbf7eba7f;
      1984: out3 <= 32'hbf7ec46d;
      1985: out3 <= 32'hbf7ece34;
      1986: out3 <= 32'hbf7ed7d4;
      1987: out3 <= 32'hbf7ee14c;
      1988: out3 <= 32'hbf7eea9d;
      1989: out3 <= 32'hbf7ef3c7;
      1990: out3 <= 32'hbf7efcc9;
      1991: out3 <= 32'hbf7f05a4;
      1992: out3 <= 32'hbf7f0e58;
      1993: out3 <= 32'hbf7f16e4;
      1994: out3 <= 32'hbf7f1f49;
      1995: out3 <= 32'hbf7f2787;
      1996: out3 <= 32'hbf7f2f9d;
      1997: out3 <= 32'hbf7f378c;
      1998: out3 <= 32'hbf7f3f54;
      1999: out3 <= 32'hbf7f46f4;
      2000: out3 <= 32'hbf7f4e6d;
      2001: out3 <= 32'hbf7f55bf;
      2002: out3 <= 32'hbf7f5ce9;
      2003: out3 <= 32'hbf7f63ec;
      2004: out3 <= 32'hbf7f6ac7;
      2005: out3 <= 32'hbf7f717b;
      2006: out3 <= 32'hbf7f7808;
      2007: out3 <= 32'hbf7f7e6d;
      2008: out3 <= 32'hbf7f84ab;
      2009: out3 <= 32'hbf7f8ac2;
      2010: out3 <= 32'hbf7f90b1;
      2011: out3 <= 32'hbf7f9678;
      2012: out3 <= 32'hbf7f9c18;
      2013: out3 <= 32'hbf7fa191;
      2014: out3 <= 32'hbf7fa6e3;
      2015: out3 <= 32'hbf7fac0d;
      2016: out3 <= 32'hbf7fb10f;
      2017: out3 <= 32'hbf7fb5ea;
      2018: out3 <= 32'hbf7fba9e;
      2019: out3 <= 32'hbf7fbf2a;
      2020: out3 <= 32'hbf7fc38f;
      2021: out3 <= 32'hbf7fc7cc;
      2022: out3 <= 32'hbf7fcbe2;
      2023: out3 <= 32'hbf7fcfd1;
      2024: out3 <= 32'hbf7fd397;
      2025: out3 <= 32'hbf7fd737;
      2026: out3 <= 32'hbf7fdaaf;
      2027: out3 <= 32'hbf7fde00;
      2028: out3 <= 32'hbf7fe129;
      2029: out3 <= 32'hbf7fe42b;
      2030: out3 <= 32'hbf7fe705;
      2031: out3 <= 32'hbf7fe9b8;
      2032: out3 <= 32'hbf7fec43;
      2033: out3 <= 32'hbf7feea7;
      2034: out3 <= 32'hbf7ff0e3;
      2035: out3 <= 32'hbf7ff2f8;
      2036: out3 <= 32'hbf7ff4e6;
      2037: out3 <= 32'hbf7ff6ac;
      2038: out3 <= 32'hbf7ff84a;
      2039: out3 <= 32'hbf7ff9c1;
      2040: out3 <= 32'hbf7ffb11;
      2041: out3 <= 32'hbf7ffc39;
      2042: out3 <= 32'hbf7ffd39;
      2043: out3 <= 32'hbf7ffe13;
      2044: out3 <= 32'hbf7ffec4;
      2045: out3 <= 32'hbf7fff4e;
      2046: out3 <= 32'hbf7fffb1;
      2047: out3 <= 32'hbf7fffec;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D4_104630(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [10:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbac90fd5;
      2: out3 <= 32'hbb490fc6;
      3: out3 <= 32'hbb96cbc1;
      4: out3 <= 32'hbbc90f88;
      5: out3 <= 32'hbbfb5330;
      6: out3 <= 32'hbc16cb58;
      7: out3 <= 32'hbc2fed02;
      8: out3 <= 32'hbc490e90;
      9: out3 <= 32'hbc622fff;
      10: out3 <= 32'hbc7b514b;
      11: out3 <= 32'hbc8a3938;
      12: out3 <= 32'hbc96c9b6;
      13: out3 <= 32'hbca35a1c;
      14: out3 <= 32'hbcafea69;
      15: out3 <= 32'hbcbc7a9b;
      16: out3 <= 32'hbcc90ab0;
      17: out3 <= 32'hbcd59aa6;
      18: out3 <= 32'hbce22a7a;
      19: out3 <= 32'hbceeba2c;
      20: out3 <= 32'hbcfb49ba;
      21: out3 <= 32'hbd03ec90;
      22: out3 <= 32'hbd0a342f;
      23: out3 <= 32'hbd107bb8;
      24: out3 <= 32'hbd16c32c;
      25: out3 <= 32'hbd1d0a88;
      26: out3 <= 32'hbd2351cb;
      27: out3 <= 32'hbd2998f6;
      28: out3 <= 32'hbd2fe007;
      29: out3 <= 32'hbd3626fc;
      30: out3 <= 32'hbd3c6dd5;
      31: out3 <= 32'hbd42b491;
      32: out3 <= 32'hbd48fb30;
      33: out3 <= 32'hbd4f41af;
      34: out3 <= 32'hbd55880e;
      35: out3 <= 32'hbd5bce4c;
      36: out3 <= 32'hbd621469;
      37: out3 <= 32'hbd685a62;
      38: out3 <= 32'hbd6ea038;
      39: out3 <= 32'hbd74e5e9;
      40: out3 <= 32'hbd7b2b74;
      41: out3 <= 32'hbd80b86c;
      42: out3 <= 32'hbd83db0a;
      43: out3 <= 32'hbd86fd94;
      44: out3 <= 32'hbd8a200a;
      45: out3 <= 32'hbd8d426a;
      46: out3 <= 32'hbd9064b4;
      47: out3 <= 32'hbd9386e7;
      48: out3 <= 32'hbd96a905;
      49: out3 <= 32'hbd99cb0a;
      50: out3 <= 32'hbd9cecf9;
      51: out3 <= 32'hbda00ecf;
      52: out3 <= 32'hbda3308c;
      53: out3 <= 32'hbda65230;
      54: out3 <= 32'hbda973ba;
      55: out3 <= 32'hbdac952b;
      56: out3 <= 32'hbdafb680;
      57: out3 <= 32'hbdb2d7bb;
      58: out3 <= 32'hbdb5f8da;
      59: out3 <= 32'hbdb919dd;
      60: out3 <= 32'hbdbc3ac3;
      61: out3 <= 32'hbdbf5b8d;
      62: out3 <= 32'hbdc27c39;
      63: out3 <= 32'hbdc59cc6;
      64: out3 <= 32'hbdc8bd36;
      65: out3 <= 32'hbdcbdd86;
      66: out3 <= 32'hbdcefdb7;
      67: out3 <= 32'hbdd21dc8;
      68: out3 <= 32'hbdd53db9;
      69: out3 <= 32'hbdd85d89;
      70: out3 <= 32'hbddb7d37;
      71: out3 <= 32'hbdde9cc4;
      72: out3 <= 32'hbde1bc2e;
      73: out3 <= 32'hbde4db76;
      74: out3 <= 32'hbde7fa9a;
      75: out3 <= 32'hbdeb199a;
      76: out3 <= 32'hbdee3876;
      77: out3 <= 32'hbdf1572e;
      78: out3 <= 32'hbdf475c0;
      79: out3 <= 32'hbdf7942c;
      80: out3 <= 32'hbdfab273;
      81: out3 <= 32'hbdfdd092;
      82: out3 <= 32'hbe007745;
      83: out3 <= 32'hbe02062e;
      84: out3 <= 32'hbe039502;
      85: out3 <= 32'hbe0523c2;
      86: out3 <= 32'hbe06b26e;
      87: out3 <= 32'hbe084105;
      88: out3 <= 32'hbe09cf86;
      89: out3 <= 32'hbe0b5df3;
      90: out3 <= 32'hbe0cec4a;
      91: out3 <= 32'hbe0e7a8b;
      92: out3 <= 32'hbe1008b7;
      93: out3 <= 32'hbe1196cc;
      94: out3 <= 32'hbe1324ca;
      95: out3 <= 32'hbe14b2b2;
      96: out3 <= 32'hbe164083;
      97: out3 <= 32'hbe17ce3d;
      98: out3 <= 32'hbe195be0;
      99: out3 <= 32'hbe1ae96b;
      100: out3 <= 32'hbe1c76de;
      101: out3 <= 32'hbe1e0438;
      102: out3 <= 32'hbe1f917b;
      103: out3 <= 32'hbe211ea5;
      104: out3 <= 32'hbe22abb6;
      105: out3 <= 32'hbe2438ad;
      106: out3 <= 32'hbe25c58c;
      107: out3 <= 32'hbe275251;
      108: out3 <= 32'hbe28defc;
      109: out3 <= 32'hbe2a6b8d;
      110: out3 <= 32'hbe2bf804;
      111: out3 <= 32'hbe2d8461;
      112: out3 <= 32'hbe2f10a2;
      113: out3 <= 32'hbe309cc9;
      114: out3 <= 32'hbe3228d4;
      115: out3 <= 32'hbe33b4c4;
      116: out3 <= 32'hbe354098;
      117: out3 <= 32'hbe36cc50;
      118: out3 <= 32'hbe3857ec;
      119: out3 <= 32'hbe39e36c;
      120: out3 <= 32'hbe3b6ecf;
      121: out3 <= 32'hbe3cfa15;
      122: out3 <= 32'hbe3e853e;
      123: out3 <= 32'hbe401049;
      124: out3 <= 32'hbe419b37;
      125: out3 <= 32'hbe432607;
      126: out3 <= 32'hbe44b0b9;
      127: out3 <= 32'hbe463b4d;
      128: out3 <= 32'hbe47c5c2;
      129: out3 <= 32'hbe495018;
      130: out3 <= 32'hbe4ada4f;
      131: out3 <= 32'hbe4c6467;
      132: out3 <= 32'hbe4dee60;
      133: out3 <= 32'hbe4f7838;
      134: out3 <= 32'hbe5101f1;
      135: out3 <= 32'hbe528b89;
      136: out3 <= 32'hbe541501;
      137: out3 <= 32'hbe559e58;
      138: out3 <= 32'hbe57278f;
      139: out3 <= 32'hbe58b0a4;
      140: out3 <= 32'hbe5a3997;
      141: out3 <= 32'hbe5bc26a;
      142: out3 <= 32'hbe5d4b1a;
      143: out3 <= 32'hbe5ed3a8;
      144: out3 <= 32'hbe605c13;
      145: out3 <= 32'hbe61e45c;
      146: out3 <= 32'hbe636c83;
      147: out3 <= 32'hbe64f486;
      148: out3 <= 32'hbe667c66;
      149: out3 <= 32'hbe680422;
      150: out3 <= 32'hbe698bba;
      151: out3 <= 32'hbe6b132f;
      152: out3 <= 32'hbe6c9a7f;
      153: out3 <= 32'hbe6e21ab;
      154: out3 <= 32'hbe6fa8b2;
      155: out3 <= 32'hbe712f94;
      156: out3 <= 32'hbe72b651;
      157: out3 <= 32'hbe743ce8;
      158: out3 <= 32'hbe75c35a;
      159: out3 <= 32'hbe7749a6;
      160: out3 <= 32'hbe78cfcc;
      161: out3 <= 32'hbe7a55cb;
      162: out3 <= 32'hbe7bdba4;
      163: out3 <= 32'hbe7d6156;
      164: out3 <= 32'hbe7ee6e1;
      165: out3 <= 32'hbe803622;
      166: out3 <= 32'hbe80f8c0;
      167: out3 <= 32'hbe81bb4a;
      168: out3 <= 32'hbe827dc0;
      169: out3 <= 32'hbe834022;
      170: out3 <= 32'hbe840270;
      171: out3 <= 32'hbe84c4aa;
      172: out3 <= 32'hbe8586ce;
      173: out3 <= 32'hbe8648df;
      174: out3 <= 32'hbe870ada;
      175: out3 <= 32'hbe87ccc1;
      176: out3 <= 32'hbe888e93;
      177: out3 <= 32'hbe895050;
      178: out3 <= 32'hbe8a11f7;
      179: out3 <= 32'hbe8ad38a;
      180: out3 <= 32'hbe8b9507;
      181: out3 <= 32'hbe8c566e;
      182: out3 <= 32'hbe8d17c0;
      183: out3 <= 32'hbe8dd8fc;
      184: out3 <= 32'hbe8e9a22;
      185: out3 <= 32'hbe8f5b32;
      186: out3 <= 32'hbe901c2c;
      187: out3 <= 32'hbe90dd10;
      188: out3 <= 32'hbe919ddd;
      189: out3 <= 32'hbe925e94;
      190: out3 <= 32'hbe931f35;
      191: out3 <= 32'hbe93dfbf;
      192: out3 <= 32'hbe94a031;
      193: out3 <= 32'hbe95608d;
      194: out3 <= 32'hbe9620d2;
      195: out3 <= 32'hbe96e100;
      196: out3 <= 32'hbe97a117;
      197: out3 <= 32'hbe986116;
      198: out3 <= 32'hbe9920fe;
      199: out3 <= 32'hbe99e0ce;
      200: out3 <= 32'hbe9aa086;
      201: out3 <= 32'hbe9b6027;
      202: out3 <= 32'hbe9c1faf;
      203: out3 <= 32'hbe9cdf20;
      204: out3 <= 32'hbe9d9e78;
      205: out3 <= 32'hbe9e5db8;
      206: out3 <= 32'hbe9f1cdf;
      207: out3 <= 32'hbe9fdbee;
      208: out3 <= 32'hbea09ae5;
      209: out3 <= 32'hbea159c2;
      210: out3 <= 32'hbea21887;
      211: out3 <= 32'hbea2d733;
      212: out3 <= 32'hbea395c5;
      213: out3 <= 32'hbea4543f;
      214: out3 <= 32'hbea5129f;
      215: out3 <= 32'hbea5d0e5;
      216: out3 <= 32'hbea68f12;
      217: out3 <= 32'hbea74d25;
      218: out3 <= 32'hbea80b1f;
      219: out3 <= 32'hbea8c8fe;
      220: out3 <= 32'hbea986c4;
      221: out3 <= 32'hbeaa446f;
      222: out3 <= 32'hbeab0201;
      223: out3 <= 32'hbeabbf77;
      224: out3 <= 32'hbeac7cd4;
      225: out3 <= 32'hbead3a15;
      226: out3 <= 32'hbeadf73c;
      227: out3 <= 32'hbeaeb449;
      228: out3 <= 32'hbeaf713a;
      229: out3 <= 32'hbeb02e10;
      230: out3 <= 32'hbeb0eacb;
      231: out3 <= 32'hbeb1a76b;
      232: out3 <= 32'hbeb263ef;
      233: out3 <= 32'hbeb32058;
      234: out3 <= 32'hbeb3dca5;
      235: out3 <= 32'hbeb498d6;
      236: out3 <= 32'hbeb554ec;
      237: out3 <= 32'hbeb610e6;
      238: out3 <= 32'hbeb6ccc3;
      239: out3 <= 32'hbeb78884;
      240: out3 <= 32'hbeb8442a;
      241: out3 <= 32'hbeb8ffb2;
      242: out3 <= 32'hbeb9bb1e;
      243: out3 <= 32'hbeba766e;
      244: out3 <= 32'hbebb31a0;
      245: out3 <= 32'hbebbecb6;
      246: out3 <= 32'hbebca7af;
      247: out3 <= 32'hbebd628b;
      248: out3 <= 32'hbebe1d4a;
      249: out3 <= 32'hbebed7eb;
      250: out3 <= 32'hbebf926f;
      251: out3 <= 32'hbec04cd5;
      252: out3 <= 32'hbec1071e;
      253: out3 <= 32'hbec1c148;
      254: out3 <= 32'hbec27b55;
      255: out3 <= 32'hbec33544;
      256: out3 <= 32'hbec3ef15;
      257: out3 <= 32'hbec4a8c8;
      258: out3 <= 32'hbec5625c;
      259: out3 <= 32'hbec61bd2;
      260: out3 <= 32'hbec6d529;
      261: out3 <= 32'hbec78e62;
      262: out3 <= 32'hbec8477c;
      263: out3 <= 32'hbec90077;
      264: out3 <= 32'hbec9b953;
      265: out3 <= 32'hbeca7210;
      266: out3 <= 32'hbecb2aae;
      267: out3 <= 32'hbecbe32c;
      268: out3 <= 32'hbecc9b8b;
      269: out3 <= 32'hbecd53ca;
      270: out3 <= 32'hbece0bea;
      271: out3 <= 32'hbecec3ea;
      272: out3 <= 32'hbecf7bca;
      273: out3 <= 32'hbed0338a;
      274: out3 <= 32'hbed0eb2a;
      275: out3 <= 32'hbed1a2aa;
      276: out3 <= 32'hbed25a09;
      277: out3 <= 32'hbed31148;
      278: out3 <= 32'hbed3c867;
      279: out3 <= 32'hbed47f64;
      280: out3 <= 32'hbed53641;
      281: out3 <= 32'hbed5ecfd;
      282: out3 <= 32'hbed6a399;
      283: out3 <= 32'hbed75a13;
      284: out3 <= 32'hbed8106b;
      285: out3 <= 32'hbed8c6a3;
      286: out3 <= 32'hbed97cb9;
      287: out3 <= 32'hbeda32ad;
      288: out3 <= 32'hbedae880;
      289: out3 <= 32'hbedb9e31;
      290: out3 <= 32'hbedc53c1;
      291: out3 <= 32'hbedd092e;
      292: out3 <= 32'hbeddbe79;
      293: out3 <= 32'hbede73a2;
      294: out3 <= 32'hbedf28a9;
      295: out3 <= 32'hbedfdd8d;
      296: out3 <= 32'hbee0924f;
      297: out3 <= 32'hbee146ee;
      298: out3 <= 32'hbee1fb6a;
      299: out3 <= 32'hbee2afc4;
      300: out3 <= 32'hbee363fa;
      301: out3 <= 32'hbee4180e;
      302: out3 <= 32'hbee4cbfe;
      303: out3 <= 32'hbee57fcb;
      304: out3 <= 32'hbee63375;
      305: out3 <= 32'hbee6e6fb;
      306: out3 <= 32'hbee79a5d;
      307: out3 <= 32'hbee84d9c;
      308: out3 <= 32'hbee900b7;
      309: out3 <= 32'hbee9b3ae;
      310: out3 <= 32'hbeea6681;
      311: out3 <= 32'hbeeb1930;
      312: out3 <= 32'hbeebcbbb;
      313: out3 <= 32'hbeec7e21;
      314: out3 <= 32'hbeed3063;
      315: out3 <= 32'hbeede280;
      316: out3 <= 32'hbeee9479;
      317: out3 <= 32'hbeef464c;
      318: out3 <= 32'hbeeff7fb;
      319: out3 <= 32'hbef0a985;
      320: out3 <= 32'hbef15aea;
      321: out3 <= 32'hbef20c29;
      322: out3 <= 32'hbef2bd43;
      323: out3 <= 32'hbef36e38;
      324: out3 <= 32'hbef41f07;
      325: out3 <= 32'hbef4cfb1;
      326: out3 <= 32'hbef58035;
      327: out3 <= 32'hbef63093;
      328: out3 <= 32'hbef6e0cb;
      329: out3 <= 32'hbef790dc;
      330: out3 <= 32'hbef840c8;
      331: out3 <= 32'hbef8f08e;
      332: out3 <= 32'hbef9a02d;
      333: out3 <= 32'hbefa4fa5;
      334: out3 <= 32'hbefafef7;
      335: out3 <= 32'hbefbae22;
      336: out3 <= 32'hbefc5d27;
      337: out3 <= 32'hbefd0c04;
      338: out3 <= 32'hbefdbabb;
      339: out3 <= 32'hbefe694a;
      340: out3 <= 32'hbeff17b2;
      341: out3 <= 32'hbeffc5f3;
      342: out3 <= 32'hbf003a06;
      343: out3 <= 32'hbf0090ff;
      344: out3 <= 32'hbf00e7e4;
      345: out3 <= 32'hbf013eb5;
      346: out3 <= 32'hbf019573;
      347: out3 <= 32'hbf01ec1c;
      348: out3 <= 32'hbf0242b1;
      349: out3 <= 32'hbf029932;
      350: out3 <= 32'hbf02ef9f;
      351: out3 <= 32'hbf0345f8;
      352: out3 <= 32'hbf039c3d;
      353: out3 <= 32'hbf03f26d;
      354: out3 <= 32'hbf044889;
      355: out3 <= 32'hbf049e91;
      356: out3 <= 32'hbf04f484;
      357: out3 <= 32'hbf054a62;
      358: out3 <= 32'hbf05a02c;
      359: out3 <= 32'hbf05f5e2;
      360: out3 <= 32'hbf064b82;
      361: out3 <= 32'hbf06a10e;
      362: out3 <= 32'hbf06f686;
      363: out3 <= 32'hbf074be8;
      364: out3 <= 32'hbf07a136;
      365: out3 <= 32'hbf07f66f;
      366: out3 <= 32'hbf084b92;
      367: out3 <= 32'hbf08a0a1;
      368: out3 <= 32'hbf08f59b;
      369: out3 <= 32'hbf094a7f;
      370: out3 <= 32'hbf099f4e;
      371: out3 <= 32'hbf09f409;
      372: out3 <= 32'hbf0a48ad;
      373: out3 <= 32'hbf0a9d3d;
      374: out3 <= 32'hbf0af1b7;
      375: out3 <= 32'hbf0b461c;
      376: out3 <= 32'hbf0b9a6b;
      377: out3 <= 32'hbf0beea5;
      378: out3 <= 32'hbf0c42c9;
      379: out3 <= 32'hbf0c96d7;
      380: out3 <= 32'hbf0cead0;
      381: out3 <= 32'hbf0d3eb3;
      382: out3 <= 32'hbf0d9281;
      383: out3 <= 32'hbf0de638;
      384: out3 <= 32'hbf0e39da;
      385: out3 <= 32'hbf0e8d65;
      386: out3 <= 32'hbf0ee0db;
      387: out3 <= 32'hbf0f343b;
      388: out3 <= 32'hbf0f8784;
      389: out3 <= 32'hbf0fdab8;
      390: out3 <= 32'hbf102dd5;
      391: out3 <= 32'hbf1080dc;
      392: out3 <= 32'hbf10d3cd;
      393: out3 <= 32'hbf1126a7;
      394: out3 <= 32'hbf11796b;
      395: out3 <= 32'hbf11cc19;
      396: out3 <= 32'hbf121eb0;
      397: out3 <= 32'hbf127130;
      398: out3 <= 32'hbf12c39a;
      399: out3 <= 32'hbf1315ee;
      400: out3 <= 32'hbf13682a;
      401: out3 <= 32'hbf13ba50;
      402: out3 <= 32'hbf140c5f;
      403: out3 <= 32'hbf145e58;
      404: out3 <= 32'hbf14b039;
      405: out3 <= 32'hbf150204;
      406: out3 <= 32'hbf1553b7;
      407: out3 <= 32'hbf15a554;
      408: out3 <= 32'hbf15f6d9;
      409: out3 <= 32'hbf164847;
      410: out3 <= 32'hbf16999f;
      411: out3 <= 32'hbf16eade;
      412: out3 <= 32'hbf173c07;
      413: out3 <= 32'hbf178d18;
      414: out3 <= 32'hbf17de12;
      415: out3 <= 32'hbf182ef5;
      416: out3 <= 32'hbf187fc0;
      417: out3 <= 32'hbf18d073;
      418: out3 <= 32'hbf19210f;
      419: out3 <= 32'hbf197194;
      420: out3 <= 32'hbf19c200;
      421: out3 <= 32'hbf1a1255;
      422: out3 <= 32'hbf1a6293;
      423: out3 <= 32'hbf1ab2b8;
      424: out3 <= 32'hbf1b02c6;
      425: out3 <= 32'hbf1b52bb;
      426: out3 <= 32'hbf1ba299;
      427: out3 <= 32'hbf1bf25f;
      428: out3 <= 32'hbf1c420c;
      429: out3 <= 32'hbf1c91a2;
      430: out3 <= 32'hbf1ce11f;
      431: out3 <= 32'hbf1d3084;
      432: out3 <= 32'hbf1d7fd1;
      433: out3 <= 32'hbf1dcf06;
      434: out3 <= 32'hbf1e1e22;
      435: out3 <= 32'hbf1e6d26;
      436: out3 <= 32'hbf1ebc12;
      437: out3 <= 32'hbf1f0ae5;
      438: out3 <= 32'hbf1f599f;
      439: out3 <= 32'hbf1fa841;
      440: out3 <= 32'hbf1ff6cb;
      441: out3 <= 32'hbf20453b;
      442: out3 <= 32'hbf209393;
      443: out3 <= 32'hbf20e1d2;
      444: out3 <= 32'hbf212ff9;
      445: out3 <= 32'hbf217e06;
      446: out3 <= 32'hbf21cbfb;
      447: out3 <= 32'hbf2219d7;
      448: out3 <= 32'hbf226799;
      449: out3 <= 32'hbf22b543;
      450: out3 <= 32'hbf2302d3;
      451: out3 <= 32'hbf23504b;
      452: out3 <= 32'hbf239da9;
      453: out3 <= 32'hbf23eaee;
      454: out3 <= 32'hbf24381a;
      455: out3 <= 32'hbf24852c;
      456: out3 <= 32'hbf24d225;
      457: out3 <= 32'hbf251f04;
      458: out3 <= 32'hbf256bcb;
      459: out3 <= 32'hbf25b877;
      460: out3 <= 32'hbf26050a;
      461: out3 <= 32'hbf265184;
      462: out3 <= 32'hbf269de3;
      463: out3 <= 32'hbf26ea2a;
      464: out3 <= 32'hbf273656;
      465: out3 <= 32'hbf278268;
      466: out3 <= 32'hbf27ce61;
      467: out3 <= 32'hbf281a40;
      468: out3 <= 32'hbf286605;
      469: out3 <= 32'hbf28b1b0;
      470: out3 <= 32'hbf28fd41;
      471: out3 <= 32'hbf2948b8;
      472: out3 <= 32'hbf299415;
      473: out3 <= 32'hbf29df57;
      474: out3 <= 32'hbf2a2a80;
      475: out3 <= 32'hbf2a758e;
      476: out3 <= 32'hbf2ac082;
      477: out3 <= 32'hbf2b0b5b;
      478: out3 <= 32'hbf2b561b;
      479: out3 <= 32'hbf2ba0bf;
      480: out3 <= 32'hbf2beb4a;
      481: out3 <= 32'hbf2c35b9;
      482: out3 <= 32'hbf2c800f;
      483: out3 <= 32'hbf2cca49;
      484: out3 <= 32'hbf2d1469;
      485: out3 <= 32'hbf2d5e6f;
      486: out3 <= 32'hbf2da859;
      487: out3 <= 32'hbf2df229;
      488: out3 <= 32'hbf2e3bde;
      489: out3 <= 32'hbf2e8578;
      490: out3 <= 32'hbf2ecef7;
      491: out3 <= 32'hbf2f185b;
      492: out3 <= 32'hbf2f61a5;
      493: out3 <= 32'hbf2faad3;
      494: out3 <= 32'hbf2ff3e6;
      495: out3 <= 32'hbf303cde;
      496: out3 <= 32'hbf3085bb;
      497: out3 <= 32'hbf30ce7c;
      498: out3 <= 32'hbf311722;
      499: out3 <= 32'hbf315fad;
      500: out3 <= 32'hbf31a81d;
      501: out3 <= 32'hbf31f071;
      502: out3 <= 32'hbf3238aa;
      503: out3 <= 32'hbf3280c7;
      504: out3 <= 32'hbf32c8c9;
      505: out3 <= 32'hbf3310af;
      506: out3 <= 32'hbf33587a;
      507: out3 <= 32'hbf33a029;
      508: out3 <= 32'hbf33e7bc;
      509: out3 <= 32'hbf342f34;
      510: out3 <= 32'hbf34768f;
      511: out3 <= 32'hbf34bdcf;
      512: out3 <= 32'hbf3504f3;
      513: out3 <= 32'hbf354bfb;
      514: out3 <= 32'hbf3592e7;
      515: out3 <= 32'hbf35d9b8;
      516: out3 <= 32'hbf36206c;
      517: out3 <= 32'hbf366704;
      518: out3 <= 32'hbf36ad7f;
      519: out3 <= 32'hbf36f3df;
      520: out3 <= 32'hbf373a23;
      521: out3 <= 32'hbf37804a;
      522: out3 <= 32'hbf37c655;
      523: out3 <= 32'hbf380c43;
      524: out3 <= 32'hbf385216;
      525: out3 <= 32'hbf3897cb;
      526: out3 <= 32'hbf38dd65;
      527: out3 <= 32'hbf3922e1;
      528: out3 <= 32'hbf396842;
      529: out3 <= 32'hbf39ad85;
      530: out3 <= 32'hbf39f2ac;
      531: out3 <= 32'hbf3a37b7;
      532: out3 <= 32'hbf3a7ca4;
      533: out3 <= 32'hbf3ac175;
      534: out3 <= 32'hbf3b0629;
      535: out3 <= 32'hbf3b4ac1;
      536: out3 <= 32'hbf3b8f3b;
      537: out3 <= 32'hbf3bd398;
      538: out3 <= 32'hbf3c17d9;
      539: out3 <= 32'hbf3c5bfc;
      540: out3 <= 32'hbf3ca003;
      541: out3 <= 32'hbf3ce3ec;
      542: out3 <= 32'hbf3d27b8;
      543: out3 <= 32'hbf3d6b67;
      544: out3 <= 32'hbf3daef9;
      545: out3 <= 32'hbf3df26e;
      546: out3 <= 32'hbf3e35c5;
      547: out3 <= 32'hbf3e78ff;
      548: out3 <= 32'hbf3ebc1b;
      549: out3 <= 32'hbf3eff1b;
      550: out3 <= 32'hbf3f41fc;
      551: out3 <= 32'hbf3f84c0;
      552: out3 <= 32'hbf3fc767;
      553: out3 <= 32'hbf4009f0;
      554: out3 <= 32'hbf404c5c;
      555: out3 <= 32'hbf408ea9;
      556: out3 <= 32'hbf40d0da;
      557: out3 <= 32'hbf4112ec;
      558: out3 <= 32'hbf4154e1;
      559: out3 <= 32'hbf4196b7;
      560: out3 <= 32'hbf41d870;
      561: out3 <= 32'hbf421a0b;
      562: out3 <= 32'hbf425b89;
      563: out3 <= 32'hbf429ce8;
      564: out3 <= 32'hbf42de29;
      565: out3 <= 32'hbf431f4c;
      566: out3 <= 32'hbf436051;
      567: out3 <= 32'hbf43a138;
      568: out3 <= 32'hbf43e200;
      569: out3 <= 32'hbf4422ab;
      570: out3 <= 32'hbf446337;
      571: out3 <= 32'hbf44a3a5;
      572: out3 <= 32'hbf44e3f5;
      573: out3 <= 32'hbf452426;
      574: out3 <= 32'hbf456439;
      575: out3 <= 32'hbf45a42d;
      576: out3 <= 32'hbf45e403;
      577: out3 <= 32'hbf4623bb;
      578: out3 <= 32'hbf466354;
      579: out3 <= 32'hbf46a2ce;
      580: out3 <= 32'hbf46e22a;
      581: out3 <= 32'hbf472167;
      582: out3 <= 32'hbf476085;
      583: out3 <= 32'hbf479f84;
      584: out3 <= 32'hbf47de65;
      585: out3 <= 32'hbf481d27;
      586: out3 <= 32'hbf485bca;
      587: out3 <= 32'hbf489a4e;
      588: out3 <= 32'hbf48d8b3;
      589: out3 <= 32'hbf4916fa;
      590: out3 <= 32'hbf495521;
      591: out3 <= 32'hbf499329;
      592: out3 <= 32'hbf49d112;
      593: out3 <= 32'hbf4a0edc;
      594: out3 <= 32'hbf4a4c87;
      595: out3 <= 32'hbf4a8a13;
      596: out3 <= 32'hbf4ac77f;
      597: out3 <= 32'hbf4b04cc;
      598: out3 <= 32'hbf4b41fa;
      599: out3 <= 32'hbf4b7f09;
      600: out3 <= 32'hbf4bbbf8;
      601: out3 <= 32'hbf4bf8c7;
      602: out3 <= 32'hbf4c3578;
      603: out3 <= 32'hbf4c7208;
      604: out3 <= 32'hbf4cae79;
      605: out3 <= 32'hbf4ceacb;
      606: out3 <= 32'hbf4d26fd;
      607: out3 <= 32'hbf4d6310;
      608: out3 <= 32'hbf4d9f02;
      609: out3 <= 32'hbf4ddad5;
      610: out3 <= 32'hbf4e1689;
      611: out3 <= 32'hbf4e521c;
      612: out3 <= 32'hbf4e8d90;
      613: out3 <= 32'hbf4ec8e4;
      614: out3 <= 32'hbf4f0417;
      615: out3 <= 32'hbf4f3f2b;
      616: out3 <= 32'hbf4f7a1f;
      617: out3 <= 32'hbf4fb4f4;
      618: out3 <= 32'hbf4fefa8;
      619: out3 <= 32'hbf502a3b;
      620: out3 <= 32'hbf5064af;
      621: out3 <= 32'hbf509f03;
      622: out3 <= 32'hbf50d937;
      623: out3 <= 32'hbf51134a;
      624: out3 <= 32'hbf514d3d;
      625: out3 <= 32'hbf518710;
      626: out3 <= 32'hbf51c0c2;
      627: out3 <= 32'hbf51fa54;
      628: out3 <= 32'hbf5233c6;
      629: out3 <= 32'hbf526d18;
      630: out3 <= 32'hbf52a649;
      631: out3 <= 32'hbf52df59;
      632: out3 <= 32'hbf531849;
      633: out3 <= 32'hbf535118;
      634: out3 <= 32'hbf5389c7;
      635: out3 <= 32'hbf53c255;
      636: out3 <= 32'hbf53fac3;
      637: out3 <= 32'hbf54330f;
      638: out3 <= 32'hbf546b3b;
      639: out3 <= 32'hbf54a347;
      640: out3 <= 32'hbf54db31;
      641: out3 <= 32'hbf5512fb;
      642: out3 <= 32'hbf554aa4;
      643: out3 <= 32'hbf55822c;
      644: out3 <= 32'hbf55b993;
      645: out3 <= 32'hbf55f0d9;
      646: out3 <= 32'hbf5627fe;
      647: out3 <= 32'hbf565f02;
      648: out3 <= 32'hbf5695e5;
      649: out3 <= 32'hbf56cca7;
      650: out3 <= 32'hbf570348;
      651: out3 <= 32'hbf5739c7;
      652: out3 <= 32'hbf577026;
      653: out3 <= 32'hbf57a663;
      654: out3 <= 32'hbf57dc7f;
      655: out3 <= 32'hbf581279;
      656: out3 <= 32'hbf584853;
      657: out3 <= 32'hbf587e0b;
      658: out3 <= 32'hbf58b3a1;
      659: out3 <= 32'hbf58e916;
      660: out3 <= 32'hbf591e6a;
      661: out3 <= 32'hbf59539c;
      662: out3 <= 32'hbf5988ad;
      663: out3 <= 32'hbf59bd9c;
      664: out3 <= 32'hbf59f26a;
      665: out3 <= 32'hbf5a2716;
      666: out3 <= 32'hbf5a5ba0;
      667: out3 <= 32'hbf5a9009;
      668: out3 <= 32'hbf5ac450;
      669: out3 <= 32'hbf5af875;
      670: out3 <= 32'hbf5b2c79;
      671: out3 <= 32'hbf5b605a;
      672: out3 <= 32'hbf5b941a;
      673: out3 <= 32'hbf5bc7b8;
      674: out3 <= 32'hbf5bfb34;
      675: out3 <= 32'hbf5c2e8e;
      676: out3 <= 32'hbf5c61c7;
      677: out3 <= 32'hbf5c94dd;
      678: out3 <= 32'hbf5cc7d1;
      679: out3 <= 32'hbf5cfaa3;
      680: out3 <= 32'hbf5d2d53;
      681: out3 <= 32'hbf5d5fe1;
      682: out3 <= 32'hbf5d924d;
      683: out3 <= 32'hbf5dc497;
      684: out3 <= 32'hbf5df6be;
      685: out3 <= 32'hbf5e28c3;
      686: out3 <= 32'hbf5e5aa6;
      687: out3 <= 32'hbf5e8c67;
      688: out3 <= 32'hbf5ebe05;
      689: out3 <= 32'hbf5eef81;
      690: out3 <= 32'hbf5f20db;
      691: out3 <= 32'hbf5f5212;
      692: out3 <= 32'hbf5f8327;
      693: out3 <= 32'hbf5fb419;
      694: out3 <= 32'hbf5fe4e9;
      695: out3 <= 32'hbf601596;
      696: out3 <= 32'hbf604621;
      697: out3 <= 32'hbf607689;
      698: out3 <= 32'hbf60a6cf;
      699: out3 <= 32'hbf60d6f2;
      700: out3 <= 32'hbf6106f2;
      701: out3 <= 32'hbf6136d0;
      702: out3 <= 32'hbf61668a;
      703: out3 <= 32'hbf619622;
      704: out3 <= 32'hbf61c598;
      705: out3 <= 32'hbf61f4ea;
      706: out3 <= 32'hbf62241a;
      707: out3 <= 32'hbf625326;
      708: out3 <= 32'hbf628210;
      709: out3 <= 32'hbf62b0d7;
      710: out3 <= 32'hbf62df7b;
      711: out3 <= 32'hbf630dfc;
      712: out3 <= 32'hbf633c5a;
      713: out3 <= 32'hbf636a95;
      714: out3 <= 32'hbf6398ac;
      715: out3 <= 32'hbf63c6a1;
      716: out3 <= 32'hbf63f473;
      717: out3 <= 32'hbf642221;
      718: out3 <= 32'hbf644fac;
      719: out3 <= 32'hbf647d14;
      720: out3 <= 32'hbf64aa59;
      721: out3 <= 32'hbf64d77b;
      722: out3 <= 32'hbf650479;
      723: out3 <= 32'hbf653154;
      724: out3 <= 32'hbf655e0b;
      725: out3 <= 32'hbf658aa0;
      726: out3 <= 32'hbf65b710;
      727: out3 <= 32'hbf65e35e;
      728: out3 <= 32'hbf660f88;
      729: out3 <= 32'hbf663b8e;
      730: out3 <= 32'hbf666771;
      731: out3 <= 32'hbf669330;
      732: out3 <= 32'hbf66becc;
      733: out3 <= 32'hbf66ea45;
      734: out3 <= 32'hbf671599;
      735: out3 <= 32'hbf6740ca;
      736: out3 <= 32'hbf676bd8;
      737: out3 <= 32'hbf6796c1;
      738: out3 <= 32'hbf67c187;
      739: out3 <= 32'hbf67ec29;
      740: out3 <= 32'hbf6816a8;
      741: out3 <= 32'hbf684103;
      742: out3 <= 32'hbf686b39;
      743: out3 <= 32'hbf68954c;
      744: out3 <= 32'hbf68bf3c;
      745: out3 <= 32'hbf68e907;
      746: out3 <= 32'hbf6912ae;
      747: out3 <= 32'hbf693c32;
      748: out3 <= 32'hbf696591;
      749: out3 <= 32'hbf698ecc;
      750: out3 <= 32'hbf69b7e4;
      751: out3 <= 32'hbf69e0d7;
      752: out3 <= 32'hbf6a09a7;
      753: out3 <= 32'hbf6a3252;
      754: out3 <= 32'hbf6a5ad9;
      755: out3 <= 32'hbf6a833c;
      756: out3 <= 32'hbf6aab7b;
      757: out3 <= 32'hbf6ad395;
      758: out3 <= 32'hbf6afb8c;
      759: out3 <= 32'hbf6b235e;
      760: out3 <= 32'hbf6b4b0c;
      761: out3 <= 32'hbf6b7295;
      762: out3 <= 32'hbf6b99fb;
      763: out3 <= 32'hbf6bc13b;
      764: out3 <= 32'hbf6be858;
      765: out3 <= 32'hbf6c0f50;
      766: out3 <= 32'hbf6c3624;
      767: out3 <= 32'hbf6c5cd4;
      768: out3 <= 32'hbf6c835e;
      769: out3 <= 32'hbf6ca9c5;
      770: out3 <= 32'hbf6cd007;
      771: out3 <= 32'hbf6cf624;
      772: out3 <= 32'hbf6d1c1d;
      773: out3 <= 32'hbf6d41f2;
      774: out3 <= 32'hbf6d67a1;
      775: out3 <= 32'hbf6d8d2d;
      776: out3 <= 32'hbf6db293;
      777: out3 <= 32'hbf6dd7d5;
      778: out3 <= 32'hbf6dfcf2;
      779: out3 <= 32'hbf6e21eb;
      780: out3 <= 32'hbf6e46be;
      781: out3 <= 32'hbf6e6b6d;
      782: out3 <= 32'hbf6e8ff8;
      783: out3 <= 32'hbf6eb45d;
      784: out3 <= 32'hbf6ed89e;
      785: out3 <= 32'hbf6efcba;
      786: out3 <= 32'hbf6f20b0;
      787: out3 <= 32'hbf6f4483;
      788: out3 <= 32'hbf6f6830;
      789: out3 <= 32'hbf6f8bb8;
      790: out3 <= 32'hbf6faf1b;
      791: out3 <= 32'hbf6fd25a;
      792: out3 <= 32'hbf6ff573;
      793: out3 <= 32'hbf701867;
      794: out3 <= 32'hbf703b37;
      795: out3 <= 32'hbf705de1;
      796: out3 <= 32'hbf708066;
      797: out3 <= 32'hbf70a2c6;
      798: out3 <= 32'hbf70c501;
      799: out3 <= 32'hbf70e717;
      800: out3 <= 32'hbf710908;
      801: out3 <= 32'hbf712ad4;
      802: out3 <= 32'hbf714c7a;
      803: out3 <= 32'hbf716dfb;
      804: out3 <= 32'hbf718f57;
      805: out3 <= 32'hbf71b08e;
      806: out3 <= 32'hbf71d19f;
      807: out3 <= 32'hbf71f28c;
      808: out3 <= 32'hbf721352;
      809: out3 <= 32'hbf7233f4;
      810: out3 <= 32'hbf725470;
      811: out3 <= 32'hbf7274c7;
      812: out3 <= 32'hbf7294f8;
      813: out3 <= 32'hbf72b504;
      814: out3 <= 32'hbf72d4eb;
      815: out3 <= 32'hbf72f4ac;
      816: out3 <= 32'hbf731447;
      817: out3 <= 32'hbf7333be;
      818: out3 <= 32'hbf73530e;
      819: out3 <= 32'hbf737239;
      820: out3 <= 32'hbf73913f;
      821: out3 <= 32'hbf73b01f;
      822: out3 <= 32'hbf73ced9;
      823: out3 <= 32'hbf73ed6e;
      824: out3 <= 32'hbf740bdd;
      825: out3 <= 32'hbf742a27;
      826: out3 <= 32'hbf74484b;
      827: out3 <= 32'hbf746649;
      828: out3 <= 32'hbf748422;
      829: out3 <= 32'hbf74a1d5;
      830: out3 <= 32'hbf74bf62;
      831: out3 <= 32'hbf74dcc9;
      832: out3 <= 32'hbf74fa0b;
      833: out3 <= 32'hbf751727;
      834: out3 <= 32'hbf75341d;
      835: out3 <= 32'hbf7550ed;
      836: out3 <= 32'hbf756d97;
      837: out3 <= 32'hbf758a1c;
      838: out3 <= 32'hbf75a67b;
      839: out3 <= 32'hbf75c2b3;
      840: out3 <= 32'hbf75dec6;
      841: out3 <= 32'hbf75fab3;
      842: out3 <= 32'hbf76167a;
      843: out3 <= 32'hbf76321b;
      844: out3 <= 32'hbf764d97;
      845: out3 <= 32'hbf7668ec;
      846: out3 <= 32'hbf76841b;
      847: out3 <= 32'hbf769f24;
      848: out3 <= 32'hbf76ba07;
      849: out3 <= 32'hbf76d4c4;
      850: out3 <= 32'hbf76ef5b;
      851: out3 <= 32'hbf7709cc;
      852: out3 <= 32'hbf772417;
      853: out3 <= 32'hbf773e3c;
      854: out3 <= 32'hbf77583a;
      855: out3 <= 32'hbf777213;
      856: out3 <= 32'hbf778bc5;
      857: out3 <= 32'hbf77a551;
      858: out3 <= 32'hbf77beb7;
      859: out3 <= 32'hbf77d7f7;
      860: out3 <= 32'hbf77f110;
      861: out3 <= 32'hbf780a04;
      862: out3 <= 32'hbf7822d1;
      863: out3 <= 32'hbf783b77;
      864: out3 <= 32'hbf7853f8;
      865: out3 <= 32'hbf786c52;
      866: out3 <= 32'hbf788486;
      867: out3 <= 32'hbf789c93;
      868: out3 <= 32'hbf78b47b;
      869: out3 <= 32'hbf78cc3b;
      870: out3 <= 32'hbf78e3d6;
      871: out3 <= 32'hbf78fb4a;
      872: out3 <= 32'hbf791298;
      873: out3 <= 32'hbf7929bf;
      874: out3 <= 32'hbf7940c0;
      875: out3 <= 32'hbf79579a;
      876: out3 <= 32'hbf796e4e;
      877: out3 <= 32'hbf7984dc;
      878: out3 <= 32'hbf799b43;
      879: out3 <= 32'hbf79b183;
      880: out3 <= 32'hbf79c79d;
      881: out3 <= 32'hbf79dd91;
      882: out3 <= 32'hbf79f35e;
      883: out3 <= 32'hbf7a0904;
      884: out3 <= 32'hbf7a1e84;
      885: out3 <= 32'hbf7a33dd;
      886: out3 <= 32'hbf7a4910;
      887: out3 <= 32'hbf7a5e1c;
      888: out3 <= 32'hbf7a7302;
      889: out3 <= 32'hbf7a87c1;
      890: out3 <= 32'hbf7a9c59;
      891: out3 <= 32'hbf7ab0cb;
      892: out3 <= 32'hbf7ac516;
      893: out3 <= 32'hbf7ad93a;
      894: out3 <= 32'hbf7aed37;
      895: out3 <= 32'hbf7b010e;
      896: out3 <= 32'hbf7b14be;
      897: out3 <= 32'hbf7b2848;
      898: out3 <= 32'hbf7b3bab;
      899: out3 <= 32'hbf7b4ee7;
      900: out3 <= 32'hbf7b61fc;
      901: out3 <= 32'hbf7b74ea;
      902: out3 <= 32'hbf7b87b2;
      903: out3 <= 32'hbf7b9a53;
      904: out3 <= 32'hbf7baccd;
      905: out3 <= 32'hbf7bbf20;
      906: out3 <= 32'hbf7bd14d;
      907: out3 <= 32'hbf7be353;
      908: out3 <= 32'hbf7bf531;
      909: out3 <= 32'hbf7c06e9;
      910: out3 <= 32'hbf7c187a;
      911: out3 <= 32'hbf7c29e5;
      912: out3 <= 32'hbf7c3b28;
      913: out3 <= 32'hbf7c4c44;
      914: out3 <= 32'hbf7c5d3a;
      915: out3 <= 32'hbf7c6e08;
      916: out3 <= 32'hbf7c7eb0;
      917: out3 <= 32'hbf7c8f31;
      918: out3 <= 32'hbf7c9f8a;
      919: out3 <= 32'hbf7cafbd;
      920: out3 <= 32'hbf7cbfc9;
      921: out3 <= 32'hbf7ccfae;
      922: out3 <= 32'hbf7cdf6c;
      923: out3 <= 32'hbf7cef03;
      924: out3 <= 32'hbf7cfe73;
      925: out3 <= 32'hbf7d0dbc;
      926: out3 <= 32'hbf7d1cdd;
      927: out3 <= 32'hbf7d2bd8;
      928: out3 <= 32'hbf7d3aac;
      929: out3 <= 32'hbf7d4959;
      930: out3 <= 32'hbf7d57de;
      931: out3 <= 32'hbf7d663d;
      932: out3 <= 32'hbf7d7474;
      933: out3 <= 32'hbf7d8285;
      934: out3 <= 32'hbf7d906e;
      935: out3 <= 32'hbf7d9e30;
      936: out3 <= 32'hbf7dabcc;
      937: out3 <= 32'hbf7db940;
      938: out3 <= 32'hbf7dc68c;
      939: out3 <= 32'hbf7dd3b2;
      940: out3 <= 32'hbf7de0b1;
      941: out3 <= 32'hbf7ded88;
      942: out3 <= 32'hbf7dfa38;
      943: out3 <= 32'hbf7e06c2;
      944: out3 <= 32'hbf7e1324;
      945: out3 <= 32'hbf7e1f5e;
      946: out3 <= 32'hbf7e2b72;
      947: out3 <= 32'hbf7e375e;
      948: out3 <= 32'hbf7e4323;
      949: out3 <= 32'hbf7e4ec1;
      950: out3 <= 32'hbf7e5a38;
      951: out3 <= 32'hbf7e6588;
      952: out3 <= 32'hbf7e70b0;
      953: out3 <= 32'hbf7e7bb1;
      954: out3 <= 32'hbf7e868b;
      955: out3 <= 32'hbf7e913d;
      956: out3 <= 32'hbf7e9bc9;
      957: out3 <= 32'hbf7ea62d;
      958: out3 <= 32'hbf7eb069;
      959: out3 <= 32'hbf7eba7f;
      960: out3 <= 32'hbf7ec46d;
      961: out3 <= 32'hbf7ece34;
      962: out3 <= 32'hbf7ed7d4;
      963: out3 <= 32'hbf7ee14c;
      964: out3 <= 32'hbf7eea9d;
      965: out3 <= 32'hbf7ef3c7;
      966: out3 <= 32'hbf7efcc9;
      967: out3 <= 32'hbf7f05a4;
      968: out3 <= 32'hbf7f0e58;
      969: out3 <= 32'hbf7f16e4;
      970: out3 <= 32'hbf7f1f49;
      971: out3 <= 32'hbf7f2787;
      972: out3 <= 32'hbf7f2f9d;
      973: out3 <= 32'hbf7f378c;
      974: out3 <= 32'hbf7f3f54;
      975: out3 <= 32'hbf7f46f4;
      976: out3 <= 32'hbf7f4e6d;
      977: out3 <= 32'hbf7f55bf;
      978: out3 <= 32'hbf7f5ce9;
      979: out3 <= 32'hbf7f63ec;
      980: out3 <= 32'hbf7f6ac7;
      981: out3 <= 32'hbf7f717b;
      982: out3 <= 32'hbf7f7808;
      983: out3 <= 32'hbf7f7e6d;
      984: out3 <= 32'hbf7f84ab;
      985: out3 <= 32'hbf7f8ac2;
      986: out3 <= 32'hbf7f90b1;
      987: out3 <= 32'hbf7f9678;
      988: out3 <= 32'hbf7f9c18;
      989: out3 <= 32'hbf7fa191;
      990: out3 <= 32'hbf7fa6e3;
      991: out3 <= 32'hbf7fac0d;
      992: out3 <= 32'hbf7fb10f;
      993: out3 <= 32'hbf7fb5ea;
      994: out3 <= 32'hbf7fba9e;
      995: out3 <= 32'hbf7fbf2a;
      996: out3 <= 32'hbf7fc38f;
      997: out3 <= 32'hbf7fc7cc;
      998: out3 <= 32'hbf7fcbe2;
      999: out3 <= 32'hbf7fcfd1;
      1000: out3 <= 32'hbf7fd397;
      1001: out3 <= 32'hbf7fd737;
      1002: out3 <= 32'hbf7fdaaf;
      1003: out3 <= 32'hbf7fde00;
      1004: out3 <= 32'hbf7fe129;
      1005: out3 <= 32'hbf7fe42b;
      1006: out3 <= 32'hbf7fe705;
      1007: out3 <= 32'hbf7fe9b8;
      1008: out3 <= 32'hbf7fec43;
      1009: out3 <= 32'hbf7feea7;
      1010: out3 <= 32'hbf7ff0e3;
      1011: out3 <= 32'hbf7ff2f8;
      1012: out3 <= 32'hbf7ff4e6;
      1013: out3 <= 32'hbf7ff6ac;
      1014: out3 <= 32'hbf7ff84a;
      1015: out3 <= 32'hbf7ff9c1;
      1016: out3 <= 32'hbf7ffb11;
      1017: out3 <= 32'hbf7ffc39;
      1018: out3 <= 32'hbf7ffd39;
      1019: out3 <= 32'hbf7ffe13;
      1020: out3 <= 32'hbf7ffec4;
      1021: out3 <= 32'hbf7fff4e;
      1022: out3 <= 32'hbf7fffb1;
      1023: out3 <= 32'hbf7fffec;
      1024: out3 <= 32'hbf800000;
      1025: out3 <= 32'hbf7fffec;
      1026: out3 <= 32'hbf7fffb1;
      1027: out3 <= 32'hbf7fff4e;
      1028: out3 <= 32'hbf7ffec4;
      1029: out3 <= 32'hbf7ffe13;
      1030: out3 <= 32'hbf7ffd39;
      1031: out3 <= 32'hbf7ffc39;
      1032: out3 <= 32'hbf7ffb11;
      1033: out3 <= 32'hbf7ff9c1;
      1034: out3 <= 32'hbf7ff84a;
      1035: out3 <= 32'hbf7ff6ac;
      1036: out3 <= 32'hbf7ff4e6;
      1037: out3 <= 32'hbf7ff2f8;
      1038: out3 <= 32'hbf7ff0e3;
      1039: out3 <= 32'hbf7feea7;
      1040: out3 <= 32'hbf7fec43;
      1041: out3 <= 32'hbf7fe9b8;
      1042: out3 <= 32'hbf7fe705;
      1043: out3 <= 32'hbf7fe42b;
      1044: out3 <= 32'hbf7fe129;
      1045: out3 <= 32'hbf7fde00;
      1046: out3 <= 32'hbf7fdaaf;
      1047: out3 <= 32'hbf7fd737;
      1048: out3 <= 32'hbf7fd397;
      1049: out3 <= 32'hbf7fcfd1;
      1050: out3 <= 32'hbf7fcbe2;
      1051: out3 <= 32'hbf7fc7cc;
      1052: out3 <= 32'hbf7fc38f;
      1053: out3 <= 32'hbf7fbf2a;
      1054: out3 <= 32'hbf7fba9e;
      1055: out3 <= 32'hbf7fb5ea;
      1056: out3 <= 32'hbf7fb10f;
      1057: out3 <= 32'hbf7fac0d;
      1058: out3 <= 32'hbf7fa6e3;
      1059: out3 <= 32'hbf7fa191;
      1060: out3 <= 32'hbf7f9c18;
      1061: out3 <= 32'hbf7f9678;
      1062: out3 <= 32'hbf7f90b1;
      1063: out3 <= 32'hbf7f8ac2;
      1064: out3 <= 32'hbf7f84ab;
      1065: out3 <= 32'hbf7f7e6d;
      1066: out3 <= 32'hbf7f7808;
      1067: out3 <= 32'hbf7f717b;
      1068: out3 <= 32'hbf7f6ac7;
      1069: out3 <= 32'hbf7f63ec;
      1070: out3 <= 32'hbf7f5ce9;
      1071: out3 <= 32'hbf7f55bf;
      1072: out3 <= 32'hbf7f4e6d;
      1073: out3 <= 32'hbf7f46f4;
      1074: out3 <= 32'hbf7f3f54;
      1075: out3 <= 32'hbf7f378c;
      1076: out3 <= 32'hbf7f2f9d;
      1077: out3 <= 32'hbf7f2787;
      1078: out3 <= 32'hbf7f1f49;
      1079: out3 <= 32'hbf7f16e4;
      1080: out3 <= 32'hbf7f0e58;
      1081: out3 <= 32'hbf7f05a4;
      1082: out3 <= 32'hbf7efcc9;
      1083: out3 <= 32'hbf7ef3c7;
      1084: out3 <= 32'hbf7eea9d;
      1085: out3 <= 32'hbf7ee14c;
      1086: out3 <= 32'hbf7ed7d4;
      1087: out3 <= 32'hbf7ece34;
      1088: out3 <= 32'hbf7ec46d;
      1089: out3 <= 32'hbf7eba7f;
      1090: out3 <= 32'hbf7eb069;
      1091: out3 <= 32'hbf7ea62d;
      1092: out3 <= 32'hbf7e9bc9;
      1093: out3 <= 32'hbf7e913d;
      1094: out3 <= 32'hbf7e868b;
      1095: out3 <= 32'hbf7e7bb1;
      1096: out3 <= 32'hbf7e70b0;
      1097: out3 <= 32'hbf7e6588;
      1098: out3 <= 32'hbf7e5a38;
      1099: out3 <= 32'hbf7e4ec1;
      1100: out3 <= 32'hbf7e4323;
      1101: out3 <= 32'hbf7e375e;
      1102: out3 <= 32'hbf7e2b72;
      1103: out3 <= 32'hbf7e1f5e;
      1104: out3 <= 32'hbf7e1324;
      1105: out3 <= 32'hbf7e06c2;
      1106: out3 <= 32'hbf7dfa38;
      1107: out3 <= 32'hbf7ded88;
      1108: out3 <= 32'hbf7de0b1;
      1109: out3 <= 32'hbf7dd3b2;
      1110: out3 <= 32'hbf7dc68c;
      1111: out3 <= 32'hbf7db940;
      1112: out3 <= 32'hbf7dabcc;
      1113: out3 <= 32'hbf7d9e30;
      1114: out3 <= 32'hbf7d906e;
      1115: out3 <= 32'hbf7d8285;
      1116: out3 <= 32'hbf7d7474;
      1117: out3 <= 32'hbf7d663d;
      1118: out3 <= 32'hbf7d57de;
      1119: out3 <= 32'hbf7d4959;
      1120: out3 <= 32'hbf7d3aac;
      1121: out3 <= 32'hbf7d2bd8;
      1122: out3 <= 32'hbf7d1cdd;
      1123: out3 <= 32'hbf7d0dbc;
      1124: out3 <= 32'hbf7cfe73;
      1125: out3 <= 32'hbf7cef03;
      1126: out3 <= 32'hbf7cdf6c;
      1127: out3 <= 32'hbf7ccfae;
      1128: out3 <= 32'hbf7cbfc9;
      1129: out3 <= 32'hbf7cafbd;
      1130: out3 <= 32'hbf7c9f8a;
      1131: out3 <= 32'hbf7c8f31;
      1132: out3 <= 32'hbf7c7eb0;
      1133: out3 <= 32'hbf7c6e08;
      1134: out3 <= 32'hbf7c5d3a;
      1135: out3 <= 32'hbf7c4c44;
      1136: out3 <= 32'hbf7c3b28;
      1137: out3 <= 32'hbf7c29e5;
      1138: out3 <= 32'hbf7c187a;
      1139: out3 <= 32'hbf7c06e9;
      1140: out3 <= 32'hbf7bf531;
      1141: out3 <= 32'hbf7be353;
      1142: out3 <= 32'hbf7bd14d;
      1143: out3 <= 32'hbf7bbf20;
      1144: out3 <= 32'hbf7baccd;
      1145: out3 <= 32'hbf7b9a53;
      1146: out3 <= 32'hbf7b87b2;
      1147: out3 <= 32'hbf7b74ea;
      1148: out3 <= 32'hbf7b61fc;
      1149: out3 <= 32'hbf7b4ee7;
      1150: out3 <= 32'hbf7b3bab;
      1151: out3 <= 32'hbf7b2848;
      1152: out3 <= 32'hbf7b14be;
      1153: out3 <= 32'hbf7b010e;
      1154: out3 <= 32'hbf7aed37;
      1155: out3 <= 32'hbf7ad93a;
      1156: out3 <= 32'hbf7ac516;
      1157: out3 <= 32'hbf7ab0cb;
      1158: out3 <= 32'hbf7a9c59;
      1159: out3 <= 32'hbf7a87c1;
      1160: out3 <= 32'hbf7a7302;
      1161: out3 <= 32'hbf7a5e1c;
      1162: out3 <= 32'hbf7a4910;
      1163: out3 <= 32'hbf7a33dd;
      1164: out3 <= 32'hbf7a1e84;
      1165: out3 <= 32'hbf7a0904;
      1166: out3 <= 32'hbf79f35e;
      1167: out3 <= 32'hbf79dd91;
      1168: out3 <= 32'hbf79c79d;
      1169: out3 <= 32'hbf79b183;
      1170: out3 <= 32'hbf799b43;
      1171: out3 <= 32'hbf7984dc;
      1172: out3 <= 32'hbf796e4e;
      1173: out3 <= 32'hbf79579a;
      1174: out3 <= 32'hbf7940c0;
      1175: out3 <= 32'hbf7929bf;
      1176: out3 <= 32'hbf791298;
      1177: out3 <= 32'hbf78fb4a;
      1178: out3 <= 32'hbf78e3d6;
      1179: out3 <= 32'hbf78cc3b;
      1180: out3 <= 32'hbf78b47b;
      1181: out3 <= 32'hbf789c93;
      1182: out3 <= 32'hbf788486;
      1183: out3 <= 32'hbf786c52;
      1184: out3 <= 32'hbf7853f8;
      1185: out3 <= 32'hbf783b77;
      1186: out3 <= 32'hbf7822d1;
      1187: out3 <= 32'hbf780a04;
      1188: out3 <= 32'hbf77f110;
      1189: out3 <= 32'hbf77d7f7;
      1190: out3 <= 32'hbf77beb7;
      1191: out3 <= 32'hbf77a551;
      1192: out3 <= 32'hbf778bc5;
      1193: out3 <= 32'hbf777213;
      1194: out3 <= 32'hbf77583a;
      1195: out3 <= 32'hbf773e3c;
      1196: out3 <= 32'hbf772417;
      1197: out3 <= 32'hbf7709cc;
      1198: out3 <= 32'hbf76ef5b;
      1199: out3 <= 32'hbf76d4c4;
      1200: out3 <= 32'hbf76ba07;
      1201: out3 <= 32'hbf769f24;
      1202: out3 <= 32'hbf76841b;
      1203: out3 <= 32'hbf7668ec;
      1204: out3 <= 32'hbf764d97;
      1205: out3 <= 32'hbf76321b;
      1206: out3 <= 32'hbf76167a;
      1207: out3 <= 32'hbf75fab3;
      1208: out3 <= 32'hbf75dec6;
      1209: out3 <= 32'hbf75c2b3;
      1210: out3 <= 32'hbf75a67b;
      1211: out3 <= 32'hbf758a1c;
      1212: out3 <= 32'hbf756d97;
      1213: out3 <= 32'hbf7550ed;
      1214: out3 <= 32'hbf75341d;
      1215: out3 <= 32'hbf751727;
      1216: out3 <= 32'hbf74fa0b;
      1217: out3 <= 32'hbf74dcc9;
      1218: out3 <= 32'hbf74bf62;
      1219: out3 <= 32'hbf74a1d5;
      1220: out3 <= 32'hbf748422;
      1221: out3 <= 32'hbf746649;
      1222: out3 <= 32'hbf74484b;
      1223: out3 <= 32'hbf742a27;
      1224: out3 <= 32'hbf740bdd;
      1225: out3 <= 32'hbf73ed6e;
      1226: out3 <= 32'hbf73ced9;
      1227: out3 <= 32'hbf73b01f;
      1228: out3 <= 32'hbf73913f;
      1229: out3 <= 32'hbf737239;
      1230: out3 <= 32'hbf73530e;
      1231: out3 <= 32'hbf7333be;
      1232: out3 <= 32'hbf731447;
      1233: out3 <= 32'hbf72f4ac;
      1234: out3 <= 32'hbf72d4eb;
      1235: out3 <= 32'hbf72b504;
      1236: out3 <= 32'hbf7294f8;
      1237: out3 <= 32'hbf7274c7;
      1238: out3 <= 32'hbf725470;
      1239: out3 <= 32'hbf7233f4;
      1240: out3 <= 32'hbf721352;
      1241: out3 <= 32'hbf71f28c;
      1242: out3 <= 32'hbf71d19f;
      1243: out3 <= 32'hbf71b08e;
      1244: out3 <= 32'hbf718f57;
      1245: out3 <= 32'hbf716dfb;
      1246: out3 <= 32'hbf714c7a;
      1247: out3 <= 32'hbf712ad4;
      1248: out3 <= 32'hbf710908;
      1249: out3 <= 32'hbf70e717;
      1250: out3 <= 32'hbf70c501;
      1251: out3 <= 32'hbf70a2c6;
      1252: out3 <= 32'hbf708066;
      1253: out3 <= 32'hbf705de1;
      1254: out3 <= 32'hbf703b37;
      1255: out3 <= 32'hbf701867;
      1256: out3 <= 32'hbf6ff573;
      1257: out3 <= 32'hbf6fd25a;
      1258: out3 <= 32'hbf6faf1b;
      1259: out3 <= 32'hbf6f8bb8;
      1260: out3 <= 32'hbf6f6830;
      1261: out3 <= 32'hbf6f4483;
      1262: out3 <= 32'hbf6f20b0;
      1263: out3 <= 32'hbf6efcba;
      1264: out3 <= 32'hbf6ed89e;
      1265: out3 <= 32'hbf6eb45d;
      1266: out3 <= 32'hbf6e8ff8;
      1267: out3 <= 32'hbf6e6b6d;
      1268: out3 <= 32'hbf6e46be;
      1269: out3 <= 32'hbf6e21eb;
      1270: out3 <= 32'hbf6dfcf2;
      1271: out3 <= 32'hbf6dd7d5;
      1272: out3 <= 32'hbf6db293;
      1273: out3 <= 32'hbf6d8d2d;
      1274: out3 <= 32'hbf6d67a1;
      1275: out3 <= 32'hbf6d41f2;
      1276: out3 <= 32'hbf6d1c1d;
      1277: out3 <= 32'hbf6cf624;
      1278: out3 <= 32'hbf6cd007;
      1279: out3 <= 32'hbf6ca9c5;
      1280: out3 <= 32'hbf6c835e;
      1281: out3 <= 32'hbf6c5cd4;
      1282: out3 <= 32'hbf6c3624;
      1283: out3 <= 32'hbf6c0f50;
      1284: out3 <= 32'hbf6be858;
      1285: out3 <= 32'hbf6bc13b;
      1286: out3 <= 32'hbf6b99fb;
      1287: out3 <= 32'hbf6b7295;
      1288: out3 <= 32'hbf6b4b0c;
      1289: out3 <= 32'hbf6b235e;
      1290: out3 <= 32'hbf6afb8c;
      1291: out3 <= 32'hbf6ad395;
      1292: out3 <= 32'hbf6aab7b;
      1293: out3 <= 32'hbf6a833c;
      1294: out3 <= 32'hbf6a5ad9;
      1295: out3 <= 32'hbf6a3252;
      1296: out3 <= 32'hbf6a09a7;
      1297: out3 <= 32'hbf69e0d7;
      1298: out3 <= 32'hbf69b7e4;
      1299: out3 <= 32'hbf698ecc;
      1300: out3 <= 32'hbf696591;
      1301: out3 <= 32'hbf693c32;
      1302: out3 <= 32'hbf6912ae;
      1303: out3 <= 32'hbf68e907;
      1304: out3 <= 32'hbf68bf3c;
      1305: out3 <= 32'hbf68954c;
      1306: out3 <= 32'hbf686b39;
      1307: out3 <= 32'hbf684103;
      1308: out3 <= 32'hbf6816a8;
      1309: out3 <= 32'hbf67ec29;
      1310: out3 <= 32'hbf67c187;
      1311: out3 <= 32'hbf6796c1;
      1312: out3 <= 32'hbf676bd8;
      1313: out3 <= 32'hbf6740ca;
      1314: out3 <= 32'hbf671599;
      1315: out3 <= 32'hbf66ea45;
      1316: out3 <= 32'hbf66becc;
      1317: out3 <= 32'hbf669330;
      1318: out3 <= 32'hbf666771;
      1319: out3 <= 32'hbf663b8e;
      1320: out3 <= 32'hbf660f88;
      1321: out3 <= 32'hbf65e35e;
      1322: out3 <= 32'hbf65b710;
      1323: out3 <= 32'hbf658aa0;
      1324: out3 <= 32'hbf655e0b;
      1325: out3 <= 32'hbf653154;
      1326: out3 <= 32'hbf650479;
      1327: out3 <= 32'hbf64d77b;
      1328: out3 <= 32'hbf64aa59;
      1329: out3 <= 32'hbf647d14;
      1330: out3 <= 32'hbf644fac;
      1331: out3 <= 32'hbf642221;
      1332: out3 <= 32'hbf63f473;
      1333: out3 <= 32'hbf63c6a1;
      1334: out3 <= 32'hbf6398ac;
      1335: out3 <= 32'hbf636a95;
      1336: out3 <= 32'hbf633c5a;
      1337: out3 <= 32'hbf630dfc;
      1338: out3 <= 32'hbf62df7b;
      1339: out3 <= 32'hbf62b0d7;
      1340: out3 <= 32'hbf628210;
      1341: out3 <= 32'hbf625326;
      1342: out3 <= 32'hbf62241a;
      1343: out3 <= 32'hbf61f4ea;
      1344: out3 <= 32'hbf61c598;
      1345: out3 <= 32'hbf619622;
      1346: out3 <= 32'hbf61668a;
      1347: out3 <= 32'hbf6136d0;
      1348: out3 <= 32'hbf6106f2;
      1349: out3 <= 32'hbf60d6f2;
      1350: out3 <= 32'hbf60a6cf;
      1351: out3 <= 32'hbf607689;
      1352: out3 <= 32'hbf604621;
      1353: out3 <= 32'hbf601596;
      1354: out3 <= 32'hbf5fe4e9;
      1355: out3 <= 32'hbf5fb419;
      1356: out3 <= 32'hbf5f8327;
      1357: out3 <= 32'hbf5f5212;
      1358: out3 <= 32'hbf5f20db;
      1359: out3 <= 32'hbf5eef81;
      1360: out3 <= 32'hbf5ebe05;
      1361: out3 <= 32'hbf5e8c67;
      1362: out3 <= 32'hbf5e5aa6;
      1363: out3 <= 32'hbf5e28c3;
      1364: out3 <= 32'hbf5df6be;
      1365: out3 <= 32'hbf5dc497;
      1366: out3 <= 32'hbf5d924d;
      1367: out3 <= 32'hbf5d5fe1;
      1368: out3 <= 32'hbf5d2d53;
      1369: out3 <= 32'hbf5cfaa3;
      1370: out3 <= 32'hbf5cc7d1;
      1371: out3 <= 32'hbf5c94dd;
      1372: out3 <= 32'hbf5c61c7;
      1373: out3 <= 32'hbf5c2e8e;
      1374: out3 <= 32'hbf5bfb34;
      1375: out3 <= 32'hbf5bc7b8;
      1376: out3 <= 32'hbf5b941a;
      1377: out3 <= 32'hbf5b605a;
      1378: out3 <= 32'hbf5b2c79;
      1379: out3 <= 32'hbf5af875;
      1380: out3 <= 32'hbf5ac450;
      1381: out3 <= 32'hbf5a9009;
      1382: out3 <= 32'hbf5a5ba0;
      1383: out3 <= 32'hbf5a2716;
      1384: out3 <= 32'hbf59f26a;
      1385: out3 <= 32'hbf59bd9c;
      1386: out3 <= 32'hbf5988ad;
      1387: out3 <= 32'hbf59539c;
      1388: out3 <= 32'hbf591e6a;
      1389: out3 <= 32'hbf58e916;
      1390: out3 <= 32'hbf58b3a1;
      1391: out3 <= 32'hbf587e0b;
      1392: out3 <= 32'hbf584853;
      1393: out3 <= 32'hbf581279;
      1394: out3 <= 32'hbf57dc7f;
      1395: out3 <= 32'hbf57a663;
      1396: out3 <= 32'hbf577026;
      1397: out3 <= 32'hbf5739c7;
      1398: out3 <= 32'hbf570348;
      1399: out3 <= 32'hbf56cca7;
      1400: out3 <= 32'hbf5695e5;
      1401: out3 <= 32'hbf565f02;
      1402: out3 <= 32'hbf5627fe;
      1403: out3 <= 32'hbf55f0d9;
      1404: out3 <= 32'hbf55b993;
      1405: out3 <= 32'hbf55822c;
      1406: out3 <= 32'hbf554aa4;
      1407: out3 <= 32'hbf5512fb;
      1408: out3 <= 32'hbf54db31;
      1409: out3 <= 32'hbf54a347;
      1410: out3 <= 32'hbf546b3b;
      1411: out3 <= 32'hbf54330f;
      1412: out3 <= 32'hbf53fac3;
      1413: out3 <= 32'hbf53c255;
      1414: out3 <= 32'hbf5389c7;
      1415: out3 <= 32'hbf535118;
      1416: out3 <= 32'hbf531849;
      1417: out3 <= 32'hbf52df59;
      1418: out3 <= 32'hbf52a649;
      1419: out3 <= 32'hbf526d18;
      1420: out3 <= 32'hbf5233c6;
      1421: out3 <= 32'hbf51fa54;
      1422: out3 <= 32'hbf51c0c2;
      1423: out3 <= 32'hbf518710;
      1424: out3 <= 32'hbf514d3d;
      1425: out3 <= 32'hbf51134a;
      1426: out3 <= 32'hbf50d937;
      1427: out3 <= 32'hbf509f03;
      1428: out3 <= 32'hbf5064af;
      1429: out3 <= 32'hbf502a3b;
      1430: out3 <= 32'hbf4fefa8;
      1431: out3 <= 32'hbf4fb4f4;
      1432: out3 <= 32'hbf4f7a1f;
      1433: out3 <= 32'hbf4f3f2b;
      1434: out3 <= 32'hbf4f0417;
      1435: out3 <= 32'hbf4ec8e4;
      1436: out3 <= 32'hbf4e8d90;
      1437: out3 <= 32'hbf4e521c;
      1438: out3 <= 32'hbf4e1689;
      1439: out3 <= 32'hbf4ddad5;
      1440: out3 <= 32'hbf4d9f02;
      1441: out3 <= 32'hbf4d6310;
      1442: out3 <= 32'hbf4d26fd;
      1443: out3 <= 32'hbf4ceacb;
      1444: out3 <= 32'hbf4cae79;
      1445: out3 <= 32'hbf4c7208;
      1446: out3 <= 32'hbf4c3578;
      1447: out3 <= 32'hbf4bf8c7;
      1448: out3 <= 32'hbf4bbbf8;
      1449: out3 <= 32'hbf4b7f09;
      1450: out3 <= 32'hbf4b41fa;
      1451: out3 <= 32'hbf4b04cc;
      1452: out3 <= 32'hbf4ac77f;
      1453: out3 <= 32'hbf4a8a13;
      1454: out3 <= 32'hbf4a4c87;
      1455: out3 <= 32'hbf4a0edc;
      1456: out3 <= 32'hbf49d112;
      1457: out3 <= 32'hbf499329;
      1458: out3 <= 32'hbf495521;
      1459: out3 <= 32'hbf4916fa;
      1460: out3 <= 32'hbf48d8b3;
      1461: out3 <= 32'hbf489a4e;
      1462: out3 <= 32'hbf485bca;
      1463: out3 <= 32'hbf481d27;
      1464: out3 <= 32'hbf47de65;
      1465: out3 <= 32'hbf479f84;
      1466: out3 <= 32'hbf476085;
      1467: out3 <= 32'hbf472167;
      1468: out3 <= 32'hbf46e22a;
      1469: out3 <= 32'hbf46a2ce;
      1470: out3 <= 32'hbf466354;
      1471: out3 <= 32'hbf4623bb;
      1472: out3 <= 32'hbf45e403;
      1473: out3 <= 32'hbf45a42d;
      1474: out3 <= 32'hbf456439;
      1475: out3 <= 32'hbf452426;
      1476: out3 <= 32'hbf44e3f5;
      1477: out3 <= 32'hbf44a3a5;
      1478: out3 <= 32'hbf446337;
      1479: out3 <= 32'hbf4422ab;
      1480: out3 <= 32'hbf43e200;
      1481: out3 <= 32'hbf43a138;
      1482: out3 <= 32'hbf436051;
      1483: out3 <= 32'hbf431f4c;
      1484: out3 <= 32'hbf42de29;
      1485: out3 <= 32'hbf429ce8;
      1486: out3 <= 32'hbf425b89;
      1487: out3 <= 32'hbf421a0b;
      1488: out3 <= 32'hbf41d870;
      1489: out3 <= 32'hbf4196b7;
      1490: out3 <= 32'hbf4154e1;
      1491: out3 <= 32'hbf4112ec;
      1492: out3 <= 32'hbf40d0da;
      1493: out3 <= 32'hbf408ea9;
      1494: out3 <= 32'hbf404c5c;
      1495: out3 <= 32'hbf4009f0;
      1496: out3 <= 32'hbf3fc767;
      1497: out3 <= 32'hbf3f84c0;
      1498: out3 <= 32'hbf3f41fc;
      1499: out3 <= 32'hbf3eff1b;
      1500: out3 <= 32'hbf3ebc1b;
      1501: out3 <= 32'hbf3e78ff;
      1502: out3 <= 32'hbf3e35c5;
      1503: out3 <= 32'hbf3df26e;
      1504: out3 <= 32'hbf3daef9;
      1505: out3 <= 32'hbf3d6b67;
      1506: out3 <= 32'hbf3d27b8;
      1507: out3 <= 32'hbf3ce3ec;
      1508: out3 <= 32'hbf3ca003;
      1509: out3 <= 32'hbf3c5bfc;
      1510: out3 <= 32'hbf3c17d9;
      1511: out3 <= 32'hbf3bd398;
      1512: out3 <= 32'hbf3b8f3b;
      1513: out3 <= 32'hbf3b4ac1;
      1514: out3 <= 32'hbf3b0629;
      1515: out3 <= 32'hbf3ac175;
      1516: out3 <= 32'hbf3a7ca4;
      1517: out3 <= 32'hbf3a37b7;
      1518: out3 <= 32'hbf39f2ac;
      1519: out3 <= 32'hbf39ad85;
      1520: out3 <= 32'hbf396842;
      1521: out3 <= 32'hbf3922e1;
      1522: out3 <= 32'hbf38dd65;
      1523: out3 <= 32'hbf3897cb;
      1524: out3 <= 32'hbf385216;
      1525: out3 <= 32'hbf380c43;
      1526: out3 <= 32'hbf37c655;
      1527: out3 <= 32'hbf37804a;
      1528: out3 <= 32'hbf373a23;
      1529: out3 <= 32'hbf36f3df;
      1530: out3 <= 32'hbf36ad7f;
      1531: out3 <= 32'hbf366704;
      1532: out3 <= 32'hbf36206c;
      1533: out3 <= 32'hbf35d9b8;
      1534: out3 <= 32'hbf3592e7;
      1535: out3 <= 32'hbf354bfb;
      1536: out3 <= 32'hbf3504f3;
      1537: out3 <= 32'hbf34bdcf;
      1538: out3 <= 32'hbf34768f;
      1539: out3 <= 32'hbf342f34;
      1540: out3 <= 32'hbf33e7bc;
      1541: out3 <= 32'hbf33a029;
      1542: out3 <= 32'hbf33587a;
      1543: out3 <= 32'hbf3310af;
      1544: out3 <= 32'hbf32c8c9;
      1545: out3 <= 32'hbf3280c7;
      1546: out3 <= 32'hbf3238aa;
      1547: out3 <= 32'hbf31f071;
      1548: out3 <= 32'hbf31a81d;
      1549: out3 <= 32'hbf315fad;
      1550: out3 <= 32'hbf311722;
      1551: out3 <= 32'hbf30ce7c;
      1552: out3 <= 32'hbf3085bb;
      1553: out3 <= 32'hbf303cde;
      1554: out3 <= 32'hbf2ff3e6;
      1555: out3 <= 32'hbf2faad3;
      1556: out3 <= 32'hbf2f61a5;
      1557: out3 <= 32'hbf2f185b;
      1558: out3 <= 32'hbf2ecef7;
      1559: out3 <= 32'hbf2e8578;
      1560: out3 <= 32'hbf2e3bde;
      1561: out3 <= 32'hbf2df229;
      1562: out3 <= 32'hbf2da859;
      1563: out3 <= 32'hbf2d5e6f;
      1564: out3 <= 32'hbf2d1469;
      1565: out3 <= 32'hbf2cca49;
      1566: out3 <= 32'hbf2c800f;
      1567: out3 <= 32'hbf2c35b9;
      1568: out3 <= 32'hbf2beb4a;
      1569: out3 <= 32'hbf2ba0bf;
      1570: out3 <= 32'hbf2b561b;
      1571: out3 <= 32'hbf2b0b5b;
      1572: out3 <= 32'hbf2ac082;
      1573: out3 <= 32'hbf2a758e;
      1574: out3 <= 32'hbf2a2a80;
      1575: out3 <= 32'hbf29df57;
      1576: out3 <= 32'hbf299415;
      1577: out3 <= 32'hbf2948b8;
      1578: out3 <= 32'hbf28fd41;
      1579: out3 <= 32'hbf28b1b0;
      1580: out3 <= 32'hbf286605;
      1581: out3 <= 32'hbf281a40;
      1582: out3 <= 32'hbf27ce61;
      1583: out3 <= 32'hbf278268;
      1584: out3 <= 32'hbf273656;
      1585: out3 <= 32'hbf26ea2a;
      1586: out3 <= 32'hbf269de3;
      1587: out3 <= 32'hbf265184;
      1588: out3 <= 32'hbf26050a;
      1589: out3 <= 32'hbf25b877;
      1590: out3 <= 32'hbf256bcb;
      1591: out3 <= 32'hbf251f04;
      1592: out3 <= 32'hbf24d225;
      1593: out3 <= 32'hbf24852c;
      1594: out3 <= 32'hbf24381a;
      1595: out3 <= 32'hbf23eaee;
      1596: out3 <= 32'hbf239da9;
      1597: out3 <= 32'hbf23504b;
      1598: out3 <= 32'hbf2302d3;
      1599: out3 <= 32'hbf22b543;
      1600: out3 <= 32'hbf226799;
      1601: out3 <= 32'hbf2219d7;
      1602: out3 <= 32'hbf21cbfb;
      1603: out3 <= 32'hbf217e06;
      1604: out3 <= 32'hbf212ff9;
      1605: out3 <= 32'hbf20e1d2;
      1606: out3 <= 32'hbf209393;
      1607: out3 <= 32'hbf20453b;
      1608: out3 <= 32'hbf1ff6cb;
      1609: out3 <= 32'hbf1fa841;
      1610: out3 <= 32'hbf1f599f;
      1611: out3 <= 32'hbf1f0ae5;
      1612: out3 <= 32'hbf1ebc12;
      1613: out3 <= 32'hbf1e6d26;
      1614: out3 <= 32'hbf1e1e22;
      1615: out3 <= 32'hbf1dcf06;
      1616: out3 <= 32'hbf1d7fd1;
      1617: out3 <= 32'hbf1d3084;
      1618: out3 <= 32'hbf1ce11f;
      1619: out3 <= 32'hbf1c91a2;
      1620: out3 <= 32'hbf1c420c;
      1621: out3 <= 32'hbf1bf25f;
      1622: out3 <= 32'hbf1ba299;
      1623: out3 <= 32'hbf1b52bb;
      1624: out3 <= 32'hbf1b02c6;
      1625: out3 <= 32'hbf1ab2b8;
      1626: out3 <= 32'hbf1a6293;
      1627: out3 <= 32'hbf1a1255;
      1628: out3 <= 32'hbf19c200;
      1629: out3 <= 32'hbf197194;
      1630: out3 <= 32'hbf19210f;
      1631: out3 <= 32'hbf18d073;
      1632: out3 <= 32'hbf187fc0;
      1633: out3 <= 32'hbf182ef5;
      1634: out3 <= 32'hbf17de12;
      1635: out3 <= 32'hbf178d18;
      1636: out3 <= 32'hbf173c07;
      1637: out3 <= 32'hbf16eade;
      1638: out3 <= 32'hbf16999f;
      1639: out3 <= 32'hbf164847;
      1640: out3 <= 32'hbf15f6d9;
      1641: out3 <= 32'hbf15a554;
      1642: out3 <= 32'hbf1553b7;
      1643: out3 <= 32'hbf150204;
      1644: out3 <= 32'hbf14b039;
      1645: out3 <= 32'hbf145e58;
      1646: out3 <= 32'hbf140c5f;
      1647: out3 <= 32'hbf13ba50;
      1648: out3 <= 32'hbf13682a;
      1649: out3 <= 32'hbf1315ee;
      1650: out3 <= 32'hbf12c39a;
      1651: out3 <= 32'hbf127130;
      1652: out3 <= 32'hbf121eb0;
      1653: out3 <= 32'hbf11cc19;
      1654: out3 <= 32'hbf11796b;
      1655: out3 <= 32'hbf1126a7;
      1656: out3 <= 32'hbf10d3cd;
      1657: out3 <= 32'hbf1080dc;
      1658: out3 <= 32'hbf102dd5;
      1659: out3 <= 32'hbf0fdab8;
      1660: out3 <= 32'hbf0f8784;
      1661: out3 <= 32'hbf0f343b;
      1662: out3 <= 32'hbf0ee0db;
      1663: out3 <= 32'hbf0e8d65;
      1664: out3 <= 32'hbf0e39da;
      1665: out3 <= 32'hbf0de638;
      1666: out3 <= 32'hbf0d9281;
      1667: out3 <= 32'hbf0d3eb3;
      1668: out3 <= 32'hbf0cead0;
      1669: out3 <= 32'hbf0c96d7;
      1670: out3 <= 32'hbf0c42c9;
      1671: out3 <= 32'hbf0beea5;
      1672: out3 <= 32'hbf0b9a6b;
      1673: out3 <= 32'hbf0b461c;
      1674: out3 <= 32'hbf0af1b7;
      1675: out3 <= 32'hbf0a9d3d;
      1676: out3 <= 32'hbf0a48ad;
      1677: out3 <= 32'hbf09f409;
      1678: out3 <= 32'hbf099f4e;
      1679: out3 <= 32'hbf094a7f;
      1680: out3 <= 32'hbf08f59b;
      1681: out3 <= 32'hbf08a0a1;
      1682: out3 <= 32'hbf084b92;
      1683: out3 <= 32'hbf07f66f;
      1684: out3 <= 32'hbf07a136;
      1685: out3 <= 32'hbf074be8;
      1686: out3 <= 32'hbf06f686;
      1687: out3 <= 32'hbf06a10e;
      1688: out3 <= 32'hbf064b82;
      1689: out3 <= 32'hbf05f5e2;
      1690: out3 <= 32'hbf05a02c;
      1691: out3 <= 32'hbf054a62;
      1692: out3 <= 32'hbf04f484;
      1693: out3 <= 32'hbf049e91;
      1694: out3 <= 32'hbf044889;
      1695: out3 <= 32'hbf03f26d;
      1696: out3 <= 32'hbf039c3d;
      1697: out3 <= 32'hbf0345f8;
      1698: out3 <= 32'hbf02ef9f;
      1699: out3 <= 32'hbf029932;
      1700: out3 <= 32'hbf0242b1;
      1701: out3 <= 32'hbf01ec1c;
      1702: out3 <= 32'hbf019573;
      1703: out3 <= 32'hbf013eb5;
      1704: out3 <= 32'hbf00e7e4;
      1705: out3 <= 32'hbf0090ff;
      1706: out3 <= 32'hbf003a06;
      1707: out3 <= 32'hbeffc5f3;
      1708: out3 <= 32'hbeff17b2;
      1709: out3 <= 32'hbefe694a;
      1710: out3 <= 32'hbefdbabb;
      1711: out3 <= 32'hbefd0c04;
      1712: out3 <= 32'hbefc5d27;
      1713: out3 <= 32'hbefbae22;
      1714: out3 <= 32'hbefafef7;
      1715: out3 <= 32'hbefa4fa5;
      1716: out3 <= 32'hbef9a02d;
      1717: out3 <= 32'hbef8f08e;
      1718: out3 <= 32'hbef840c8;
      1719: out3 <= 32'hbef790dc;
      1720: out3 <= 32'hbef6e0cb;
      1721: out3 <= 32'hbef63093;
      1722: out3 <= 32'hbef58035;
      1723: out3 <= 32'hbef4cfb1;
      1724: out3 <= 32'hbef41f07;
      1725: out3 <= 32'hbef36e38;
      1726: out3 <= 32'hbef2bd43;
      1727: out3 <= 32'hbef20c29;
      1728: out3 <= 32'hbef15aea;
      1729: out3 <= 32'hbef0a985;
      1730: out3 <= 32'hbeeff7fb;
      1731: out3 <= 32'hbeef464c;
      1732: out3 <= 32'hbeee9479;
      1733: out3 <= 32'hbeede280;
      1734: out3 <= 32'hbeed3063;
      1735: out3 <= 32'hbeec7e21;
      1736: out3 <= 32'hbeebcbbb;
      1737: out3 <= 32'hbeeb1930;
      1738: out3 <= 32'hbeea6681;
      1739: out3 <= 32'hbee9b3ae;
      1740: out3 <= 32'hbee900b7;
      1741: out3 <= 32'hbee84d9c;
      1742: out3 <= 32'hbee79a5d;
      1743: out3 <= 32'hbee6e6fb;
      1744: out3 <= 32'hbee63375;
      1745: out3 <= 32'hbee57fcb;
      1746: out3 <= 32'hbee4cbfe;
      1747: out3 <= 32'hbee4180e;
      1748: out3 <= 32'hbee363fa;
      1749: out3 <= 32'hbee2afc4;
      1750: out3 <= 32'hbee1fb6a;
      1751: out3 <= 32'hbee146ee;
      1752: out3 <= 32'hbee0924f;
      1753: out3 <= 32'hbedfdd8d;
      1754: out3 <= 32'hbedf28a9;
      1755: out3 <= 32'hbede73a2;
      1756: out3 <= 32'hbeddbe79;
      1757: out3 <= 32'hbedd092e;
      1758: out3 <= 32'hbedc53c1;
      1759: out3 <= 32'hbedb9e31;
      1760: out3 <= 32'hbedae880;
      1761: out3 <= 32'hbeda32ad;
      1762: out3 <= 32'hbed97cb9;
      1763: out3 <= 32'hbed8c6a3;
      1764: out3 <= 32'hbed8106b;
      1765: out3 <= 32'hbed75a13;
      1766: out3 <= 32'hbed6a399;
      1767: out3 <= 32'hbed5ecfd;
      1768: out3 <= 32'hbed53641;
      1769: out3 <= 32'hbed47f64;
      1770: out3 <= 32'hbed3c867;
      1771: out3 <= 32'hbed31148;
      1772: out3 <= 32'hbed25a09;
      1773: out3 <= 32'hbed1a2aa;
      1774: out3 <= 32'hbed0eb2a;
      1775: out3 <= 32'hbed0338a;
      1776: out3 <= 32'hbecf7bca;
      1777: out3 <= 32'hbecec3ea;
      1778: out3 <= 32'hbece0bea;
      1779: out3 <= 32'hbecd53ca;
      1780: out3 <= 32'hbecc9b8b;
      1781: out3 <= 32'hbecbe32c;
      1782: out3 <= 32'hbecb2aae;
      1783: out3 <= 32'hbeca7210;
      1784: out3 <= 32'hbec9b953;
      1785: out3 <= 32'hbec90077;
      1786: out3 <= 32'hbec8477c;
      1787: out3 <= 32'hbec78e62;
      1788: out3 <= 32'hbec6d529;
      1789: out3 <= 32'hbec61bd2;
      1790: out3 <= 32'hbec5625c;
      1791: out3 <= 32'hbec4a8c8;
      1792: out3 <= 32'hbec3ef15;
      1793: out3 <= 32'hbec33544;
      1794: out3 <= 32'hbec27b55;
      1795: out3 <= 32'hbec1c148;
      1796: out3 <= 32'hbec1071e;
      1797: out3 <= 32'hbec04cd5;
      1798: out3 <= 32'hbebf926f;
      1799: out3 <= 32'hbebed7eb;
      1800: out3 <= 32'hbebe1d4a;
      1801: out3 <= 32'hbebd628b;
      1802: out3 <= 32'hbebca7af;
      1803: out3 <= 32'hbebbecb6;
      1804: out3 <= 32'hbebb31a0;
      1805: out3 <= 32'hbeba766e;
      1806: out3 <= 32'hbeb9bb1e;
      1807: out3 <= 32'hbeb8ffb2;
      1808: out3 <= 32'hbeb8442a;
      1809: out3 <= 32'hbeb78884;
      1810: out3 <= 32'hbeb6ccc3;
      1811: out3 <= 32'hbeb610e6;
      1812: out3 <= 32'hbeb554ec;
      1813: out3 <= 32'hbeb498d6;
      1814: out3 <= 32'hbeb3dca5;
      1815: out3 <= 32'hbeb32058;
      1816: out3 <= 32'hbeb263ef;
      1817: out3 <= 32'hbeb1a76b;
      1818: out3 <= 32'hbeb0eacb;
      1819: out3 <= 32'hbeb02e10;
      1820: out3 <= 32'hbeaf713a;
      1821: out3 <= 32'hbeaeb449;
      1822: out3 <= 32'hbeadf73c;
      1823: out3 <= 32'hbead3a15;
      1824: out3 <= 32'hbeac7cd4;
      1825: out3 <= 32'hbeabbf77;
      1826: out3 <= 32'hbeab0201;
      1827: out3 <= 32'hbeaa446f;
      1828: out3 <= 32'hbea986c4;
      1829: out3 <= 32'hbea8c8fe;
      1830: out3 <= 32'hbea80b1f;
      1831: out3 <= 32'hbea74d25;
      1832: out3 <= 32'hbea68f12;
      1833: out3 <= 32'hbea5d0e5;
      1834: out3 <= 32'hbea5129f;
      1835: out3 <= 32'hbea4543f;
      1836: out3 <= 32'hbea395c5;
      1837: out3 <= 32'hbea2d733;
      1838: out3 <= 32'hbea21887;
      1839: out3 <= 32'hbea159c2;
      1840: out3 <= 32'hbea09ae5;
      1841: out3 <= 32'hbe9fdbee;
      1842: out3 <= 32'hbe9f1cdf;
      1843: out3 <= 32'hbe9e5db8;
      1844: out3 <= 32'hbe9d9e78;
      1845: out3 <= 32'hbe9cdf20;
      1846: out3 <= 32'hbe9c1faf;
      1847: out3 <= 32'hbe9b6027;
      1848: out3 <= 32'hbe9aa086;
      1849: out3 <= 32'hbe99e0ce;
      1850: out3 <= 32'hbe9920fe;
      1851: out3 <= 32'hbe986116;
      1852: out3 <= 32'hbe97a117;
      1853: out3 <= 32'hbe96e100;
      1854: out3 <= 32'hbe9620d2;
      1855: out3 <= 32'hbe95608d;
      1856: out3 <= 32'hbe94a031;
      1857: out3 <= 32'hbe93dfbf;
      1858: out3 <= 32'hbe931f35;
      1859: out3 <= 32'hbe925e94;
      1860: out3 <= 32'hbe919ddd;
      1861: out3 <= 32'hbe90dd10;
      1862: out3 <= 32'hbe901c2c;
      1863: out3 <= 32'hbe8f5b32;
      1864: out3 <= 32'hbe8e9a22;
      1865: out3 <= 32'hbe8dd8fc;
      1866: out3 <= 32'hbe8d17c0;
      1867: out3 <= 32'hbe8c566e;
      1868: out3 <= 32'hbe8b9507;
      1869: out3 <= 32'hbe8ad38a;
      1870: out3 <= 32'hbe8a11f7;
      1871: out3 <= 32'hbe895050;
      1872: out3 <= 32'hbe888e93;
      1873: out3 <= 32'hbe87ccc1;
      1874: out3 <= 32'hbe870ada;
      1875: out3 <= 32'hbe8648df;
      1876: out3 <= 32'hbe8586ce;
      1877: out3 <= 32'hbe84c4aa;
      1878: out3 <= 32'hbe840270;
      1879: out3 <= 32'hbe834022;
      1880: out3 <= 32'hbe827dc0;
      1881: out3 <= 32'hbe81bb4a;
      1882: out3 <= 32'hbe80f8c0;
      1883: out3 <= 32'hbe803622;
      1884: out3 <= 32'hbe7ee6e1;
      1885: out3 <= 32'hbe7d6156;
      1886: out3 <= 32'hbe7bdba4;
      1887: out3 <= 32'hbe7a55cb;
      1888: out3 <= 32'hbe78cfcc;
      1889: out3 <= 32'hbe7749a6;
      1890: out3 <= 32'hbe75c35a;
      1891: out3 <= 32'hbe743ce8;
      1892: out3 <= 32'hbe72b651;
      1893: out3 <= 32'hbe712f94;
      1894: out3 <= 32'hbe6fa8b2;
      1895: out3 <= 32'hbe6e21ab;
      1896: out3 <= 32'hbe6c9a7f;
      1897: out3 <= 32'hbe6b132f;
      1898: out3 <= 32'hbe698bba;
      1899: out3 <= 32'hbe680422;
      1900: out3 <= 32'hbe667c66;
      1901: out3 <= 32'hbe64f486;
      1902: out3 <= 32'hbe636c83;
      1903: out3 <= 32'hbe61e45c;
      1904: out3 <= 32'hbe605c13;
      1905: out3 <= 32'hbe5ed3a8;
      1906: out3 <= 32'hbe5d4b1a;
      1907: out3 <= 32'hbe5bc26a;
      1908: out3 <= 32'hbe5a3997;
      1909: out3 <= 32'hbe58b0a4;
      1910: out3 <= 32'hbe57278f;
      1911: out3 <= 32'hbe559e58;
      1912: out3 <= 32'hbe541501;
      1913: out3 <= 32'hbe528b89;
      1914: out3 <= 32'hbe5101f1;
      1915: out3 <= 32'hbe4f7838;
      1916: out3 <= 32'hbe4dee60;
      1917: out3 <= 32'hbe4c6467;
      1918: out3 <= 32'hbe4ada4f;
      1919: out3 <= 32'hbe495018;
      1920: out3 <= 32'hbe47c5c2;
      1921: out3 <= 32'hbe463b4d;
      1922: out3 <= 32'hbe44b0b9;
      1923: out3 <= 32'hbe432607;
      1924: out3 <= 32'hbe419b37;
      1925: out3 <= 32'hbe401049;
      1926: out3 <= 32'hbe3e853e;
      1927: out3 <= 32'hbe3cfa15;
      1928: out3 <= 32'hbe3b6ecf;
      1929: out3 <= 32'hbe39e36c;
      1930: out3 <= 32'hbe3857ec;
      1931: out3 <= 32'hbe36cc50;
      1932: out3 <= 32'hbe354098;
      1933: out3 <= 32'hbe33b4c4;
      1934: out3 <= 32'hbe3228d4;
      1935: out3 <= 32'hbe309cc9;
      1936: out3 <= 32'hbe2f10a2;
      1937: out3 <= 32'hbe2d8461;
      1938: out3 <= 32'hbe2bf804;
      1939: out3 <= 32'hbe2a6b8d;
      1940: out3 <= 32'hbe28defc;
      1941: out3 <= 32'hbe275251;
      1942: out3 <= 32'hbe25c58c;
      1943: out3 <= 32'hbe2438ad;
      1944: out3 <= 32'hbe22abb6;
      1945: out3 <= 32'hbe211ea5;
      1946: out3 <= 32'hbe1f917b;
      1947: out3 <= 32'hbe1e0438;
      1948: out3 <= 32'hbe1c76de;
      1949: out3 <= 32'hbe1ae96b;
      1950: out3 <= 32'hbe195be0;
      1951: out3 <= 32'hbe17ce3d;
      1952: out3 <= 32'hbe164083;
      1953: out3 <= 32'hbe14b2b2;
      1954: out3 <= 32'hbe1324ca;
      1955: out3 <= 32'hbe1196cc;
      1956: out3 <= 32'hbe1008b7;
      1957: out3 <= 32'hbe0e7a8b;
      1958: out3 <= 32'hbe0cec4a;
      1959: out3 <= 32'hbe0b5df3;
      1960: out3 <= 32'hbe09cf86;
      1961: out3 <= 32'hbe084105;
      1962: out3 <= 32'hbe06b26e;
      1963: out3 <= 32'hbe0523c2;
      1964: out3 <= 32'hbe039502;
      1965: out3 <= 32'hbe02062e;
      1966: out3 <= 32'hbe007745;
      1967: out3 <= 32'hbdfdd092;
      1968: out3 <= 32'hbdfab273;
      1969: out3 <= 32'hbdf7942c;
      1970: out3 <= 32'hbdf475c0;
      1971: out3 <= 32'hbdf1572e;
      1972: out3 <= 32'hbdee3876;
      1973: out3 <= 32'hbdeb199a;
      1974: out3 <= 32'hbde7fa9a;
      1975: out3 <= 32'hbde4db76;
      1976: out3 <= 32'hbde1bc2e;
      1977: out3 <= 32'hbdde9cc4;
      1978: out3 <= 32'hbddb7d37;
      1979: out3 <= 32'hbdd85d89;
      1980: out3 <= 32'hbdd53db9;
      1981: out3 <= 32'hbdd21dc8;
      1982: out3 <= 32'hbdcefdb7;
      1983: out3 <= 32'hbdcbdd86;
      1984: out3 <= 32'hbdc8bd36;
      1985: out3 <= 32'hbdc59cc6;
      1986: out3 <= 32'hbdc27c39;
      1987: out3 <= 32'hbdbf5b8d;
      1988: out3 <= 32'hbdbc3ac3;
      1989: out3 <= 32'hbdb919dd;
      1990: out3 <= 32'hbdb5f8da;
      1991: out3 <= 32'hbdb2d7bb;
      1992: out3 <= 32'hbdafb680;
      1993: out3 <= 32'hbdac952b;
      1994: out3 <= 32'hbda973ba;
      1995: out3 <= 32'hbda65230;
      1996: out3 <= 32'hbda3308c;
      1997: out3 <= 32'hbda00ecf;
      1998: out3 <= 32'hbd9cecf9;
      1999: out3 <= 32'hbd99cb0a;
      2000: out3 <= 32'hbd96a905;
      2001: out3 <= 32'hbd9386e7;
      2002: out3 <= 32'hbd9064b4;
      2003: out3 <= 32'hbd8d426a;
      2004: out3 <= 32'hbd8a200a;
      2005: out3 <= 32'hbd86fd94;
      2006: out3 <= 32'hbd83db0a;
      2007: out3 <= 32'hbd80b86c;
      2008: out3 <= 32'hbd7b2b74;
      2009: out3 <= 32'hbd74e5e9;
      2010: out3 <= 32'hbd6ea038;
      2011: out3 <= 32'hbd685a62;
      2012: out3 <= 32'hbd621469;
      2013: out3 <= 32'hbd5bce4c;
      2014: out3 <= 32'hbd55880e;
      2015: out3 <= 32'hbd4f41af;
      2016: out3 <= 32'hbd48fb30;
      2017: out3 <= 32'hbd42b491;
      2018: out3 <= 32'hbd3c6dd5;
      2019: out3 <= 32'hbd3626fc;
      2020: out3 <= 32'hbd2fe007;
      2021: out3 <= 32'hbd2998f6;
      2022: out3 <= 32'hbd2351cb;
      2023: out3 <= 32'hbd1d0a88;
      2024: out3 <= 32'hbd16c32c;
      2025: out3 <= 32'hbd107bb8;
      2026: out3 <= 32'hbd0a342f;
      2027: out3 <= 32'hbd03ec90;
      2028: out3 <= 32'hbcfb49ba;
      2029: out3 <= 32'hbceeba2c;
      2030: out3 <= 32'hbce22a7a;
      2031: out3 <= 32'hbcd59aa6;
      2032: out3 <= 32'hbcc90ab0;
      2033: out3 <= 32'hbcbc7a9b;
      2034: out3 <= 32'hbcafea69;
      2035: out3 <= 32'hbca35a1c;
      2036: out3 <= 32'hbc96c9b6;
      2037: out3 <= 32'hbc8a3938;
      2038: out3 <= 32'hbc7b514b;
      2039: out3 <= 32'hbc622fff;
      2040: out3 <= 32'hbc490e90;
      2041: out3 <= 32'hbc2fed02;
      2042: out3 <= 32'hbc16cb58;
      2043: out3 <= 32'hbbfb5330;
      2044: out3 <= 32'hbbc90f88;
      2045: out3 <= 32'hbb96cbc1;
      2046: out3 <= 32'hbb490fc6;
      2047: out3 <= 32'hbac90fd5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 24
// Gap: 1
module codeBlock98320(clk, reset, next_in, next_out,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [10:0] i1_in;
   reg [10:0] i1;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(23, 1) shiftFIFO_110271(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a53;
   wire signed [31:0] a42;
   wire signed [31:0] a56;
   wire signed [31:0] a46;
   wire signed [31:0] a57;
   wire signed [31:0] a58;
   reg signed [31:0] tm906;
   reg signed [31:0] tm910;
   reg signed [31:0] tm922;
   reg signed [31:0] tm945;
   reg signed [31:0] tm907;
   reg signed [31:0] tm911;
   reg signed [31:0] tm923;
   reg signed [31:0] tm946;
   wire signed [31:0] tm42;
   wire signed [31:0] a47;
   wire signed [31:0] tm43;
   wire signed [31:0] a49;
   reg signed [31:0] tm908;
   reg signed [31:0] tm912;
   reg signed [31:0] tm924;
   reg signed [31:0] tm947;
   reg signed [31:0] tm128;
   reg signed [31:0] tm129;
   reg signed [31:0] tm909;
   reg signed [31:0] tm913;
   reg signed [31:0] tm925;
   reg signed [31:0] tm948;
   reg signed [31:0] tm926;
   reg signed [31:0] tm949;
   reg signed [31:0] tm927;
   reg signed [31:0] tm950;
   reg signed [31:0] tm928;
   reg signed [31:0] tm951;
   reg signed [31:0] tm929;
   reg signed [31:0] tm952;
   reg signed [31:0] tm930;
   reg signed [31:0] tm953;
   reg signed [31:0] tm931;
   reg signed [31:0] tm954;
   reg signed [31:0] tm932;
   reg signed [31:0] tm955;
   wire  [31:0] a48;
   wire  [31:0] a50;
   wire  [31:0] a51;
   wire  [31:0] a52;
   reg signed [31:0] tm933;
   reg signed [31:0] tm956;
   reg signed [31:0] tm934;
   reg signed [31:0] tm957;
   reg signed [31:0] tm935;
   reg signed [31:0] tm958;
   reg signed [31:0] tm936;
   reg signed [31:0] tm959;
   reg signed [31:0] tm937;
   reg signed [31:0] tm960;
   reg signed [31:0] tm938;
   reg signed [31:0] tm961;
   reg signed [31:0] tm939;
   reg signed [31:0] tm962;
   reg signed [31:0] tm940;
   reg signed [31:0] tm963;
   reg signed [31:0] tm941;
   reg signed [31:0] tm964;
   reg signed [31:0] tm942;
   reg signed [31:0] tm965;
   reg signed [31:0] tm943;
   reg signed [31:0] tm966;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire  [31:0] Y2;
   wire  [31:0] Y3;
   reg signed [31:0] tm944;
   reg signed [31:0] tm967;


   assign a53 = X0;
   assign a42 = a53;
   assign a56 = X1;
   assign a46 = a56;
   assign a57 = X2;
   assign a58 = X3;
   assign a47 = tm42;
   assign a49 = tm43;
   assign Y0 = tm944;
   assign Y1 = tm967;

   D2_100530 instD2inst0_100530(.addr(i1[10:0]), .out(tm42), .clk(clk));

   D4_104630 instD4inst0_104630(.addr(i1[10:0]), .out(tm43), .clk(clk));

    multfp32fp32 m98419(.a(tm128), .b(tm909), .clk(clk), .out(a48), .enable(1'b1), .rst(reset));
    multfp32fp32 m98441(.a(tm129), .b(tm913), .clk(clk), .out(a50), .enable(1'b1), .rst(reset));
    multfp32fp32 m98459(.a(tm129), .b(tm909), .clk(clk), .out(a51), .enable(1'b1), .rst(reset));
    multfp32fp32 m98470(.a(tm128), .b(tm913), .clk(clk), .out(a52), .enable(1'b1), .rst(reset));
    subfp32 sub98448(.a(a48), .b(a50), .clk(clk), .out(Y2), .enable(1'b1), .rst(reset));
    addfp32 add98477(.a(a51), .b(a52), .clk(clk), .out(Y3), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
         tm128 <= 0;
         tm909 <= 0;
         tm129 <= 0;
         tm913 <= 0;
         tm129 <= 0;
         tm909 <= 0;
         tm128 <= 0;
         tm913 <= 0;
      end
      else begin
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
         tm906 <= a57;
         tm910 <= a58;
         tm922 <= a42;
         tm945 <= a46;
         tm907 <= tm906;
         tm911 <= tm910;
         tm923 <= tm922;
         tm946 <= tm945;
         tm908 <= tm907;
         tm912 <= tm911;
         tm924 <= tm923;
         tm947 <= tm946;
         tm128 <= a47;
         tm129 <= a49;
         tm909 <= tm908;
         tm913 <= tm912;
         tm925 <= tm924;
         tm948 <= tm947;
         tm926 <= tm925;
         tm949 <= tm948;
         tm927 <= tm926;
         tm950 <= tm949;
         tm928 <= tm927;
         tm951 <= tm950;
         tm929 <= tm928;
         tm952 <= tm951;
         tm930 <= tm929;
         tm953 <= tm952;
         tm931 <= tm930;
         tm954 <= tm953;
         tm932 <= tm931;
         tm955 <= tm954;
         tm933 <= tm932;
         tm956 <= tm955;
         tm934 <= tm933;
         tm957 <= tm956;
         tm935 <= tm934;
         tm958 <= tm957;
         tm936 <= tm935;
         tm959 <= tm958;
         tm937 <= tm936;
         tm960 <= tm959;
         tm938 <= tm937;
         tm961 <= tm960;
         tm939 <= tm938;
         tm962 <= tm961;
         tm940 <= tm939;
         tm963 <= tm962;
         tm941 <= tm940;
         tm964 <= tm963;
         tm942 <= tm941;
         tm965 <= tm964;
         tm943 <= tm942;
         tm966 <= tm965;
         tm944 <= tm943;
         tm967 <= tm966;
      end
   end
endmodule

// Latency: 12
// Gap: 1
module codeBlock106685(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(11, 1) shiftFIFO_110274(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a9;
   wire signed [31:0] a10;
   wire signed [31:0] a11;
   wire signed [31:0] a12;
   wire  [31:0] t21;
   wire  [31:0] t22;
   wire  [31:0] t23;
   wire  [31:0] t24;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a9 = X0;
   assign a10 = X2;
   assign a11 = X1;
   assign a12 = X3;
   assign Y0 = t21;
   assign Y1 = t22;
   assign Y2 = t23;
   assign Y3 = t24;

    addfp32 add106697(.a(a9), .b(a10), .clk(clk), .out(t21), .enable(1'b1), .rst(reset));
    addfp32 add106712(.a(a11), .b(a12), .clk(clk), .out(t22), .enable(1'b1), .rst(reset));
    subfp32 sub106727(.a(a9), .b(a10), .clk(clk), .out(t23), .enable(1'b1), .rst(reset));
    subfp32 sub106742(.a(a11), .b(a12), .clk(clk), .out(t24), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 1027
// Gap: 2048
module rc106766(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm106764 instPerm110275(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 1027
// Gap: 2048
module perm106764(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 2048;
   parameter logDepth = 11;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[1] ^ addr0[0];
   assign inAddr0[0] = addr0[2];
   assign inAddr0[1] = addr0[3];
   assign inAddr0[2] = addr0[4];
   assign inAddr0[3] = addr0[5];
   assign inAddr0[4] = addr0[6];
   assign inAddr0[5] = addr0[7];
   assign inAddr0[6] = addr0[8];
   assign inAddr0[7] = addr0[9];
   assign inAddr0[8] = addr0[10];
   assign inAddr0[9] = addr0[11];
   assign inAddr0[10] = addr0[0];
   assign outBank0[0] = addr0b[11] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outAddr0[3] = addr0b[4];
   assign outAddr0[4] = addr0b[5];
   assign outAddr0[5] = addr0b[6];
   assign outAddr0[6] = addr0b[7];
   assign outAddr0[7] = addr0b[8];
   assign outAddr0[8] = addr0b[9];
   assign outAddr0[9] = addr0b[10];
   assign outAddr0[10] = addr0b[11];
   assign outBank_a0[0] = addr0c[11] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];
   assign outAddr_a0[3] = addr0c[4];
   assign outAddr_a0[4] = addr0c[5];
   assign outAddr_a0[5] = addr0c[6];
   assign outAddr_a0[6] = addr0c[7];
   assign outAddr_a0[7] = addr0c[8];
   assign outAddr_a0[8] = addr0c[9];
   assign outAddr_a0[9] = addr0c[10];
   assign outAddr_a0[10] = addr0c[11];

   assign inBank1[0] = addr1[1] ^ addr1[0];
   assign inAddr1[0] = addr1[2];
   assign inAddr1[1] = addr1[3];
   assign inAddr1[2] = addr1[4];
   assign inAddr1[3] = addr1[5];
   assign inAddr1[4] = addr1[6];
   assign inAddr1[5] = addr1[7];
   assign inAddr1[6] = addr1[8];
   assign inAddr1[7] = addr1[9];
   assign inAddr1[8] = addr1[10];
   assign inAddr1[9] = addr1[11];
   assign inAddr1[10] = addr1[0];
   assign outBank1[0] = addr1b[11] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outAddr1[3] = addr1b[4];
   assign outAddr1[4] = addr1b[5];
   assign outAddr1[5] = addr1b[6];
   assign outAddr1[6] = addr1b[7];
   assign outAddr1[7] = addr1b[8];
   assign outAddr1[8] = addr1b[9];
   assign outAddr1[9] = addr1b[10];
   assign outAddr1[10] = addr1b[11];
   assign outBank_a1[0] = addr1c[11] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];
   assign outAddr_a1[3] = addr1c[4];
   assign outAddr_a1[4] = addr1c[5];
   assign outAddr_a1[5] = addr1c[6];
   assign outAddr_a1[6] = addr1c[7];
   assign outAddr_a1[7] = addr1c[8];
   assign outAddr_a1[8] = addr1c[9];
   assign outAddr_a1[9] = addr1c[10];
   assign outAddr_a1[10] = addr1c[11];

   nextReg #(1025, 11) nextReg_110280(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_110283(.X(next0), .Y(next_out), .clk(clk));


   memArray4096_106764 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 1024)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 1026)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 1024) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 2047) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 1024)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[0];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[10];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[10];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray4096_106764(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 2048;
   parameter logDepth = 11;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   nextReg #(2048, 11) nextReg_110288(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule


module multfp32fp32(clk, enable, rst, a, b, out);
   input [31:0] a, b;
   output [31:0] out;
   input 	clk, enable, rst;

   wire signA, signB; 
   wire [7:0] expA, expB;
   wire [23:0] sigA, sigB;

   assign signA=b[31];
   assign expA=b[30:23];
   assign sigA={1'b1,b[22:0]};

   assign signB=a[31];
   assign expB=a[30:23];
   assign sigB={1'b1,a[22:0]};
   
   reg 	  signP_m0;
   reg [8:0] expP_m0;

   wire [47:0] mult_res0;
   
   
   multfxp24fxp24 mult(clk, enable, rst, sigA, sigB, mult_res0);

   reg 	       isNaN_a0, isNaN_b0, isZero_a0, isZero_b0, isInf_a0, isInf_b0;   

   wire        sigAZero, sigBZero;
   
   assign      sigAZero = (sigA[22:0] == 0);
   assign      sigBZero = (sigB[22:0] == 0);
      
   // stage 1 mult stage 1
   always@(posedge clk) if (enable) begin
      isNaN_a0 <= (expA == 8'hff) && !sigAZero;
      isNaN_b0 <= (expB == 8'hff) && !sigBZero;

      isZero_a0 <= (expA == 8'h00);
      isZero_b0 <= (expB == 8'h00);

      isInf_a0 <= (expA == 8'hff) && sigAZero;
      isInf_b0 <= (expB == 8'hff) && sigBZero;
      
      signP_m0<=signA!=signB;
      expP_m0<=expA + expB;
   end 

   reg signP_m1, zero_m1, inf_m1, nan_m1, under_m1;
   reg [8:0] expP_m1;

   // stage 2 mult stage 2
   always@(posedge clk) if (enable) begin
      zero_m1 <= isZero_a0 || isZero_b0;
      inf_m1 <= isInf_a0 || isInf_b0;
      nan_m1 <= isNaN_a0 || isNaN_b0;
      under_m1 <= (expP_m0 < 128);      
      
      signP_m1<=signP_m0;      
      expP_m1<=expP_m0 - 127;      
   end 

   reg signP_m2, zero_m2, inf_m2, nan_m2; 
   reg [8:0] expP_m2;

   // stage 3 mult stage 3
   always@(posedge clk) if (enable) begin
      zero_m2 <= zero_m1 || under_m1;
      inf_m2 <= (inf_m1 || (expP_m1[8] && ~under_m1));
      nan_m2 <= nan_m1 || (zero_m1 && inf_m1); // 0 * infty = NaN
            
      signP_m2<=signP_m1;      
      expP_m2<=expP_m1;
   end 

   reg signP_m3, zero_m3, inf_m3, nan_m3; 
   reg [8:0] expP_m3;

   // stage 4 mult stage 4
   always@(posedge clk) if (enable) begin
      zero_m3 <= zero_m2;
      inf_m3 <= (inf_m2 || (expP_m2 == 9'h0ff));
      nan_m3 <= nan_m2;
      
      signP_m3<=signP_m2;
      expP_m3<=expP_m2;
   end 

   reg signP_m4, zero_m4, inf_m4, nan_m4; 
   reg [8:0] expP_m4;

   // stage 5 mult stage 5
   always@(posedge clk) if (enable) begin
      zero_m4 <= zero_m3;
      inf_m4 <= inf_m3;
      nan_m4 <= nan_m3;
      
      signP_m4<=signP_m3;      
      expP_m4<=expP_m3;      
   end 

   reg signP_m5, zero_m5, inf_m5, nan_m5;
   reg [8:0] expP_m5;

   
   // stage 6 mult stage 6
   always@(posedge clk) if (enable) begin
      zero_m5 <= zero_m4;
      inf_m5 <= inf_m4;
      nan_m5 <= nan_m4;
      
      signP_m5<=signP_m4;      
      expP_m5 <= expP_m4;
      
   end

   reg signP_m6, zero_m6, inf_m6, nan_m6;   
   reg [8:0] expP_m6;
   reg [23:0] sig_m6;

   // stage 7 --  mult output here!
   // normalize product
   always@(posedge clk) if (enable) begin

      zero_m6 <= (zero_m5 || (mult_res0[47:23] == 0));
      nan_m6 <= nan_m5;      
      
      signP_m6<=signP_m5;      

      if (mult_res0[47] == 1'b1) begin
	 expP_m6<=expP_m5+1;
	 sig_m6 <= mult_res0[47:24];
	 inf_m6 <= (inf_m5 || (expP_m5 == 9'h0ff));	 
      end
      else begin
	 expP_m6 <= expP_m5;
	 sig_m6 <= mult_res0[46:23];
	 inf_m6 <= inf_m5;	 
      end	 
   end

   reg signP_m7;
   reg [7:0] expP_m7;
   reg [22:0] sig_m7;
   
   // stage 8: cleanup
   always@(posedge clk) if (enable) begin
      signP_m7 <= signP_m6;

      if (inf_m6 || nan_m6)
	expP_m7 <= 8'hff;
      else if (zero_m6)
	expP_m7 <= 8'h00;
      else
	expP_m7 <= expP_m6;

      if (nan_m6)
	sig_m7 <= 1;
      else if (zero_m6 || inf_m6)
	sig_m7 <= 0;
      else
	sig_m7 <= sig_m6[22:0];      
   end

   assign out = {signP_m7, expP_m7, sig_m7};   
   
endmodule


module multfxp24fxp24(clk, enable, rst, a, b, out);
        parameter WIDTH=24, CYCLES=6;
        input  [WIDTH-1:0]   a,b;
        output [2*WIDTH-1:0] out;
        input                clk, rst,enable;
        reg [2*WIDTH-1:0]    q[CYCLES-1:0];
        integer              i;

        assign               out = q[CYCLES-1];   

        always @(posedge clk) begin
                q[0] <= a * b;
                for (i = 1; i < CYCLES; i=i+1) begin
                        q[i] <= q[i-1];
                end
        end
endmodule 


module subfp32(clk, enable, rst,  a, b, out);

   input [31:0] a, b;
   output [31:0] out;
   input 	 clk, enable, rst;	

   addfp32 xyz(.clk(clk), .enable(enable), .rst(rst),  .a(a), .b(b^32'h80000000), .out(out));
endmodule

module addfp32(clk, enable, rst,  a, b, out);

   input [31:0] a, b;
   output [31:0] out;
   input 	 clk, enable, rst;	

   wire [7:0] expA;
   wire [23:0] sigA;

   assign expA=a[30:23];
   assign sigA={1'b1,a[22:0]};
	
   wire [7:0] expB;
   wire [23:0] sigB;

   assign expB=b[30:23];
   assign sigB={1'b1,b[22:0]};

   reg [31:0] Big, Small;
   reg [7:0] expDiff;

   // stage 1 swap A, B
   always@(posedge clk) if (enable) begin
     if (expA>expB) begin
	// A has larger exp
        Big<=a;
	     Small<=b;
        expDiff<=expA-expB;
     end else if (expA==expB) begin
        if (sigA>=sigB) begin
	  // A has larger sig
          Big<=a;
	       Small<=b;
          expDiff<=expA-expB;
        end else begin
          Small<=a;
	       Big<=b;
          expDiff<=expB-expA;
        end
     end else begin
        Small<=a;
        Big<=b;
        expDiff<=expB-expA;
     end
  end

  wire signBig; 
  wire [7:0] expBig;
  wire [23:0] sigBig;

  assign signBig=Big[31];
  assign expBig=Big[30:23];
  assign sigBig=(expBig!=0)?{1'b1,Big[22:0]}:0;

  wire signSmall; 
  wire [7:0] expSmall;
  wire [23:0] sigSmall;

  assign signSmall=Small[31];
  assign expSmall=Small[30:23];
  assign sigSmall=(expDiff[7:5]||(expSmall==0))?0:(expDiff[4]?{16'h0000,1'b1,Small[22:16]}:{1'b1,Small[22:0]});

  reg signSum_a0; 
  reg [7:0] expSum_a0;
  reg [23:0] sigBig_a0;
  reg [23:0] sigSmall_a0;
  reg [3:0] expDiff_a0;
  reg add_a0;

  // stage 2 align addend coarse part 1 
  always@(posedge clk) if (enable) begin
    signSum_a0<=signBig;
    expSum_a0<=expBig;
    sigBig_a0<=sigBig;
    sigSmall_a0<=sigSmall;
    expDiff_a0<=expDiff[3:0];
    add_a0<=signSmall==signBig;
  end

  reg signSum_a1; 
  reg [7:0] expSum_a1;
  reg [23:0] sigBig_a1;
  reg [23:0] sigSmall_a1;
  reg [1:0] expDiff_a1;
  reg add_a1;

  // stage 3  align addend fine part 2
  always@(posedge clk) if (enable) begin
    signSum_a1<=signSum_a0;
    expSum_a1<=expSum_a0;
    sigBig_a1<=sigBig_a0;
    expDiff_a1<=expDiff_a0;
    add_a1<=add_a0;

    if (expDiff_a0[3:2]==2'b11) begin
      sigSmall_a1<={12'h000,sigSmall_a0[23:12]};
    end else if (expDiff_a0[3:2]==2'b10) begin
      sigSmall_a1<={8'h00,sigSmall_a0[23:8]};
    end else if (expDiff_a0[3:2]==2'b01) begin
      sigSmall_a1<={4'h0,sigSmall_a0[23:4]};
    end else begin 
      sigSmall_a1<=sigSmall_a0;
    end
  end


  reg signSum_a2; 
  reg [7:0] expSum_a2;
  reg [23:0] sigBig_a2;
  reg [23:0] sigSmall_a2;
  reg add_a2;

  // stage 4  align addend finest part 3
  always@(posedge clk) if (enable) begin
    signSum_a2<=signSum_a1;
    expSum_a2<=expSum_a1;
    sigBig_a2<=sigBig_a1;
    add_a2<=add_a1;

    if (expDiff_a1[1:0]==2'b11) begin
      sigSmall_a2<={3'h0,sigSmall_a1[23:3]};
    end else if (expDiff_a1[1:0]==2'b10) begin
      sigSmall_a2<={2'h0,sigSmall_a1[23:2]};
    end else if (expDiff_a1[1:0]==2'b01) begin
      sigSmall_a2<={1'h0,sigSmall_a1[23:1]};
    end else begin 
      sigSmall_a2<=sigSmall_a1;
    end
  end

  reg signSum_s0; 
  reg [8:0] expSum_s0;
  reg [24:0] sigSum_s0;
  reg of_s0;

  // stage 5  do addition/substraction
  always@(posedge clk) if (enable) begin
    signSum_s0<=signSum_a2;
    expSum_s0<={1'b0,expSum_a2};
    of_s0<=(expSum_a2==8'hff)?1:0;

    if (add_a2) begin 
      sigSum_s0<={1'b0,sigBig_a2}+{1'b0,sigSmall_a2};
    end else begin
      sigSum_s0<={1'b0,sigBig_a2}-{1'b0,sigSmall_a2};
    end
  end


  reg signSum_n0; 
  reg [8:0] expSum_n0;
  reg [23:0] sigSum_n0;
  reg of_n0;
  
  // stage 6  renormalize after add
  always@(posedge clk) if (enable) begin
    signSum_n0<=signSum_s0;
    if (sigSum_s0[24] && (!of_s0)) begin
      expSum_n0<=expSum_s0+1;
      sigSum_n0<=sigSum_s0[24:1];
      of_n0<=(expSum_s0==9'h0fe);
    end else begin
      expSum_n0<=expSum_s0;
      sigSum_n0<=sigSum_s0[23:0];
      of_n0<=of_s0;
    end
  end 

  reg signSum_n1; 
  reg [8:0] expSum_n1;
  reg [23:0] sigSum_n1;
  reg of_n1;

  // stage 7  renormalized after subtract coarse
  always@(posedge clk) if (enable) begin
    signSum_n1<=signSum_n0;
    of_n1<=of_n0;    

    if (sigSum_n0[23:16]==8'h00) begin
      expSum_n1<=expSum_n0-8;
      sigSum_n1<={sigSum_n0[16:0],8'h00};
    end else begin
      expSum_n1<=expSum_n0;
      sigSum_n1<=sigSum_n0;
    end
  end 

  reg signSum_n2; 
  reg [8:0] expSum_n2;
  reg [23:0] sigSum_n2;
  reg of_n2;

  // stage 8  
  always@(posedge clk) if (enable) begin
    signSum_n2<=signSum_n1;
    of_n2<=of_n1;

    if (sigSum_n1[23:16]==8'h00) begin
      expSum_n2<=expSum_n1-8;
      sigSum_n2<={sigSum_n1[16:0],8'h00};
    end else begin
      expSum_n2<=expSum_n1;
      sigSum_n2<=sigSum_n1;
    end
  end 

  reg signSum_n3; 
  reg [8:0] expSum_n3;
  reg [23:0] sigSum_n3;
  reg of_n3;

  // stage 9  
  always@(posedge clk) if (enable) begin
    signSum_n3<=signSum_n2;
    of_n3<=of_n2;

    if (sigSum_n2[23:20]==4'h0) begin
      expSum_n3<=expSum_n2-4;
      sigSum_n3<={sigSum_n2[20:0],4'h0};
    end else begin
      expSum_n3<=expSum_n2;
      sigSum_n3<=sigSum_n2;
    end
  end 


  reg signSum_n4; 
  reg [8:0] expSum_n4;
  reg [23:0] sigSum_n4;
  reg of_n4;

  // stage 10  
  always@(posedge clk) if (enable) begin
    signSum_n4<=signSum_n3;
    of_n4<=of_n3;

    if (sigSum_n3[23:20]==4'h0) begin
      expSum_n4<=expSum_n3-4;
      sigSum_n4<={sigSum_n3[20:0],4'h0};
    end else if (sigSum_n3[23:21]==3'b000) begin
      expSum_n4<=expSum_n3-3;
      sigSum_n4<={sigSum_n3[21:0],3'h0};
    end else if (sigSum_n3[23:22]==2'b00) begin
      expSum_n4<=expSum_n3-2;
      sigSum_n4<={sigSum_n3[22:0],2'h0};
    end else if (sigSum_n3[23]==1'b0) begin
      expSum_n4<=expSum_n3-1;
      sigSum_n4<={sigSum_n3[22:0],1'h0};
    end else begin
      expSum_n4<=expSum_n3;
      sigSum_n4<=sigSum_n3;
    end
  end 

  reg signSum_f0; 
  reg [7:0] expSum_f0;
  reg [23:0] sigSum_f0;

  // stage 11 clean-up
  always@(posedge clk) if (enable) begin
    signSum_f0<=signSum_n4;

    if (of_n4) begin 
      expSum_f0<=8'hff;
      sigSum_f0<=0;
    end else if (expSum_n4[8]||(expSum_n4==0)||(sigSum_n4==0)) begin
      expSum_f0<=8'h00;
      sigSum_f0<=0;
    end else begin
      expSum_f0<=expSum_n4[7:0];
      sigSum_f0<=sigSum_n4;
    end
  end  

  assign out={signSum_f0, expSum_f0, sigSum_f0[22:0]};

endmodule
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule

